{"ast":null,"code":"var _jsxFileName = \"/Users/srailkar/Desktop/my-app/client/src/components/TipTap/TipTap.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useEditor, EditorContent } from '@tiptap/react';\nimport { defaultExtensions } from '@tiptap/starter-kit';\nimport './styles.scss';\nimport MenuBar from './MenuBar';\nimport { useQuery, gql } from '@apollo/client';\nimport { LOAD_HUB } from '../../graphql/queries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Editor = () => {\n  _s();\n\n  const [content, setContent] = useState(`\n  <h2>\n    Hi there,\n  </h2>\n  <p>\n    this is a basic <em>basic</em> example of <strong>tiptap</strong>. Sure, there are all kind of basic text styles you’d probably expect from a text editor. But wait until you see the lists:\n  </p>\n  <ul>\n    <li>\n      That’s a bullet list with one …\n    </li>\n    <li>\n      … or two list items.\n    </li>\n  </ul>\n  <p>\n    Isn’t that great? And all of that is editable. But wait, there’s more. Let’s try a code block:\n  </p>\n  <pre><code class=\"language-css\">body {\ndisplay: none;\n}</code></pre>\n  <p>\n    I know, I know, this is impressive. It’s only the tip of the iceberg though. Give it a try and click a little bit around. Don’t forget to check the other examples too.\n  </p>\n  <blockquote>\n    Wow, that’s amazing. Good work, boy! 👏\n    <br />\n    — Mom\n  </blockquote>\n`);\n  const editor = useEditor({\n    extensions: [...defaultExtensions()],\n    content: content,\n\n    onUpdate({\n      editor\n    }) {\n      console.log(JSON.stringify(editor.getJSON()));\n      console.log(editor.getHTML());\n    }\n\n  });\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(LOAD_HUB);\n  useEffect(() => {\n    // console.log(JSON.parse(data.getHub.description));\n    setContent(JSON.parse(data.getHub.description));\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MenuBar, {\n      editor: editor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EditorContent, {\n      editor: editor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Editor, \"IA8XRKEUWEcIpH8RXssKt/WCnmQ=\", false, function () {\n  return [useEditor, useQuery];\n});\n\n_c = Editor;\nexport default Editor;\n\nvar _c;\n\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"sources":["/Users/srailkar/Desktop/my-app/client/src/components/TipTap/TipTap.jsx"],"names":["React","useEffect","useState","useEditor","EditorContent","defaultExtensions","MenuBar","useQuery","gql","LOAD_HUB","Editor","content","setContent","editor","extensions","onUpdate","console","log","JSON","stringify","getJSON","getHTML","loading","error","data","parse","getHub","description"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,eAAzC;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,OAAO,eAAP;AAEA,OAAOC,OAAP,MAAoB,WAApB;AAEA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,SAASC,QAAT,QAAyB,uBAAzB;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA7BwC,CAAtC;AA+BA,QAAMW,MAAM,GAAGV,SAAS,CAAC;AACvBW,IAAAA,UAAU,EAAE,CACV,GAAGT,iBAAiB,EADV,CADW;AAIvBM,IAAAA,OAAO,EAAEA,OAJc;;AAKvBI,IAAAA,QAAQ,CAAC;AAAEF,MAAAA;AAAF,KAAD,EAAa;AACnBG,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeN,MAAM,CAACO,OAAP,EAAf,CAAZ;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACQ,OAAP,EAAZ;AACD;;AARsB,GAAD,CAAxB;AAWA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BjB,QAAQ,CAACE,QAAD,CAAzC;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd;AACAW,IAAAA,UAAU,CAACM,IAAI,CAACO,KAAL,CAAWD,IAAI,CAACE,MAAL,CAAYC,WAAvB,CAAD,CAAV;AACD,GAHQ,EAGN,CAACH,IAAD,CAHM,CAAT;AAKA,sBACE;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,MAAM,EAAEX;AAAjB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,aAAD;AAAe,MAAA,MAAM,EAAEA;AAAvB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAxDD;;GAAMH,M;UAgCWP,S,EAWkBI,Q;;;KA3C7BG,M;AA0DN,eAAeA,MAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useEditor, EditorContent } from '@tiptap/react'\nimport { defaultExtensions } from '@tiptap/starter-kit'\nimport './styles.scss'\n\nimport MenuBar from './MenuBar';\n\nimport { useQuery, gql } from '@apollo/client';\nimport { LOAD_HUB } from '../../graphql/queries';\n\nconst Editor = () => {\n  const [content, setContent] = useState(`\n  <h2>\n    Hi there,\n  </h2>\n  <p>\n    this is a basic <em>basic</em> example of <strong>tiptap</strong>. Sure, there are all kind of basic text styles you’d probably expect from a text editor. But wait until you see the lists:\n  </p>\n  <ul>\n    <li>\n      That’s a bullet list with one …\n    </li>\n    <li>\n      … or two list items.\n    </li>\n  </ul>\n  <p>\n    Isn’t that great? And all of that is editable. But wait, there’s more. Let’s try a code block:\n  </p>\n  <pre><code class=\"language-css\">body {\ndisplay: none;\n}</code></pre>\n  <p>\n    I know, I know, this is impressive. It’s only the tip of the iceberg though. Give it a try and click a little bit around. Don’t forget to check the other examples too.\n  </p>\n  <blockquote>\n    Wow, that’s amazing. Good work, boy! 👏\n    <br />\n    — Mom\n  </blockquote>\n`);\n\n  const editor = useEditor({\n    extensions: [\n      ...defaultExtensions(),\n    ],\n    content: content,\n    onUpdate({ editor }) {\n      console.log(JSON.stringify(editor.getJSON()));\n      console.log(editor.getHTML());\n    },\n  })\n\n  const { loading, error, data } = useQuery(LOAD_HUB);\n\n  useEffect(() => {\n    // console.log(JSON.parse(data.getHub.description));\n    setContent(JSON.parse(data.getHub.description));\n  }, [data]);\n\n  return (\n    <div>\n      <MenuBar editor={editor} />\n      <EditorContent editor={editor} />\n    </div>\n  )\n}\n\nexport default Editor;"]},"metadata":{},"sourceType":"module"}