{"ast":null,"code":"var _jsxFileName = \"/Users/srailkar/Desktop/my-app/src/components/Slate/MySlate.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useCallback, useMemo, useState } from 'react';\nimport isHotkey from 'is-hotkey';\nimport { Editable, withReact, useSlate, Slate } from 'slate-react';\nimport { Editor, Transforms, createEditor, Element as SlateElement } from 'slate';\nimport { withHistory } from 'slate-history';\nimport { Button, Icon, Toolbar } from './components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HOTKEYS = {\n  'mod+b': 'bold',\n  'mod+i': 'italic',\n  'mod+u': 'underline',\n  'mod+`': 'code'\n};\nconst LIST_TYPES = ['numbered-list', 'bulleted-list'];\n\nconst MySlate = () => {\n  _s();\n\n  const [value, setValue] = useState(initialValue);\n  const renderElement = useCallback(props => /*#__PURE__*/_jsxDEV(Element, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 46\n  }, this), []);\n  const renderLeaf = useCallback(props => /*#__PURE__*/_jsxDEV(Leaf, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 43\n  }, this), []);\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\n\n  const onChange = value => {\n    setValue(value);\n    console.log(JSON.stringify(value));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Slate, {\n    editor: editor,\n    value: value,\n    onChange: onChange,\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n      children: [/*#__PURE__*/_jsxDEV(MarkButton, {\n        format: \"bold\",\n        icon: \"format_bold\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MarkButton, {\n        format: \"italic\",\n        icon: \"format_italic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MarkButton, {\n        format: \"underline\",\n        icon: \"format_underlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MarkButton, {\n        format: \"code\",\n        icon: \"code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BlockButton, {\n        format: \"heading-one\",\n        icon: \"looks_one\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BlockButton, {\n        format: \"heading-two\",\n        icon: \"looks_two\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BlockButton, {\n        format: \"block-quote\",\n        icon: \"format_quote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BlockButton, {\n        format: \"numbered-list\",\n        icon: \"format_list_numbered\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BlockButton, {\n        format: \"bulleted-list\",\n        icon: \"format_list_bulleted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Editable, {\n      renderElement: renderElement,\n      renderLeaf: renderLeaf,\n      placeholder: \"Enter some rich text\\u2026\",\n      spellCheck: true,\n      autoFocus: true,\n      onKeyDown: event => {\n        for (const hotkey in HOTKEYS) {\n          if (isHotkey(hotkey, event)) {\n            event.preventDefault();\n            const mark = HOTKEYS[hotkey];\n            toggleMark(editor, mark);\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MySlate, \"eGTXoAMSU5Zwxn30ofCLeiwqzhc=\");\n\n_c = MySlate;\n\nconst toggleBlock = (editor, format) => {\n  const isActive = isBlockActive(editor, format);\n  const isList = LIST_TYPES.includes(format);\n  Transforms.unwrapNodes(editor, {\n    match: n => LIST_TYPES.includes(!Editor.isEditor(n) && SlateElement.isElement(n) && n.type),\n    split: true\n  });\n  const newProperties = {\n    type: isActive ? 'paragraph' : isList ? 'list-item' : format\n  };\n  Transforms.setNodes(editor, newProperties);\n\n  if (!isActive && isList) {\n    const block = {\n      type: format,\n      children: []\n    };\n    Transforms.wrapNodes(editor, block);\n  }\n};\n\nconst toggleMark = (editor, format) => {\n  const isActive = isMarkActive(editor, format);\n\n  if (isActive) {\n    Editor.removeMark(editor, format);\n  } else {\n    Editor.addMark(editor, format, true);\n  }\n};\n\nconst isBlockActive = (editor, format) => {\n  const [match] = Editor.nodes(editor, {\n    match: n => !Editor.isEditor(n) && SlateElement.isElement(n) && n.type === format\n  });\n  return !!match;\n};\n\nconst isMarkActive = (editor, format) => {\n  const marks = Editor.marks(editor);\n  return marks ? marks[format] === true : false;\n};\n\nconst Element = ({\n  attributes,\n  children,\n  element\n}) => {\n  switch (element.type) {\n    case 'block-quote':\n      return /*#__PURE__*/_jsxDEV(\"blockquote\", { ...attributes,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 14\n      }, this);\n\n    case 'bulleted-list':\n      return /*#__PURE__*/_jsxDEV(\"ul\", { ...attributes,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 14\n      }, this);\n\n    case 'heading-one':\n      return /*#__PURE__*/_jsxDEV(\"h1\", { ...attributes,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 14\n      }, this);\n\n    case 'heading-two':\n      return /*#__PURE__*/_jsxDEV(\"h2\", { ...attributes,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 14\n      }, this);\n\n    case 'list-item':\n      return /*#__PURE__*/_jsxDEV(\"li\", { ...attributes,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 14\n      }, this);\n\n    case 'numbered-list':\n      return /*#__PURE__*/_jsxDEV(\"ol\", { ...attributes,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 14\n      }, this);\n\n    default:\n      return /*#__PURE__*/_jsxDEV(\"p\", { ...attributes,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 14\n      }, this);\n  }\n};\n\n_c2 = Element;\n\nconst Leaf = ({\n  attributes,\n  children,\n  leaf\n}) => {\n  if (leaf.bold) {\n    children = /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (leaf.code) {\n    children = /*#__PURE__*/_jsxDEV(\"code\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (leaf.italic) {\n    children = /*#__PURE__*/_jsxDEV(\"em\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (leaf.underline) {\n    children = /*#__PURE__*/_jsxDEV(\"u\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"span\", { ...attributes,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 10\n  }, this);\n};\n\n_c3 = Leaf;\n\nconst BlockButton = ({\n  format,\n  icon\n}) => {\n  _s2();\n\n  const editor = useSlate();\n  return /*#__PURE__*/_jsxDEV(Button, {\n    active: isBlockActive(editor, format),\n    onMouseDown: event => {\n      event.preventDefault();\n      toggleBlock(editor, format);\n    },\n    children: /*#__PURE__*/_jsxDEV(Icon, {\n      children: icon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(BlockButton, \"YMFVEh3YGumTkrWAgpqmxHJ20Oc=\", false, function () {\n  return [useSlate];\n});\n\n_c4 = BlockButton;\n\nconst MarkButton = ({\n  format,\n  icon\n}) => {\n  _s3();\n\n  const editor = useSlate();\n  return /*#__PURE__*/_jsxDEV(Button, {\n    active: isMarkActive(editor, format),\n    onMouseDown: event => {\n      event.preventDefault();\n      toggleMark(editor, format);\n    },\n    children: /*#__PURE__*/_jsxDEV(Icon, {\n      children: icon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n\n_s3(MarkButton, \"YMFVEh3YGumTkrWAgpqmxHJ20Oc=\", false, function () {\n  return [useSlate];\n});\n\n_c5 = MarkButton;\nconst initialValue = [{\n  type: 'paragraph',\n  children: [{\n    text: 'This is editable '\n  }, {\n    text: 'rich',\n    bold: true\n  }, {\n    text: ' text, '\n  }, {\n    text: 'much',\n    italic: true\n  }, {\n    text: ' better than a '\n  }, {\n    text: '<textarea>',\n    code: true\n  }, {\n    text: '!'\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: \"Since it's rich text, you can do things like turn a selection of text \"\n  }, {\n    text: 'bold',\n    bold: true\n  }, {\n    text: ', or add a semantically rendered block quote in the middle of the page, like this:'\n  }]\n}, {\n  type: 'block-quote',\n  children: [{\n    text: 'A wise quote.'\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: 'Try it out for yourself!'\n  }]\n}];\nexport default MySlate;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"MySlate\");\n$RefreshReg$(_c2, \"Element\");\n$RefreshReg$(_c3, \"Leaf\");\n$RefreshReg$(_c4, \"BlockButton\");\n$RefreshReg$(_c5, \"MarkButton\");","map":{"version":3,"sources":["/Users/srailkar/Desktop/my-app/src/components/Slate/MySlate.jsx"],"names":["React","useCallback","useMemo","useState","isHotkey","Editable","withReact","useSlate","Slate","Editor","Transforms","createEditor","Element","SlateElement","withHistory","Button","Icon","Toolbar","HOTKEYS","LIST_TYPES","MySlate","value","setValue","initialValue","renderElement","props","renderLeaf","editor","onChange","console","log","JSON","stringify","event","hotkey","preventDefault","mark","toggleMark","toggleBlock","format","isActive","isBlockActive","isList","includes","unwrapNodes","match","n","isEditor","isElement","type","split","newProperties","setNodes","block","children","wrapNodes","isMarkActive","removeMark","addMark","nodes","marks","attributes","element","Leaf","leaf","bold","code","italic","underline","BlockButton","icon","MarkButton","text"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react'\nimport isHotkey from 'is-hotkey'\nimport { Editable, withReact, useSlate, Slate } from 'slate-react'\nimport {\n  Editor,\n  Transforms,\n  createEditor,\n  Element as SlateElement,\n} from 'slate'\nimport { withHistory } from 'slate-history'\n\nimport { Button, Icon, Toolbar } from './components';\n\nconst HOTKEYS = {\n  'mod+b': 'bold',\n  'mod+i': 'italic',\n  'mod+u': 'underline',\n  'mod+`': 'code',\n}\n\nconst LIST_TYPES = ['numbered-list', 'bulleted-list']\n\nconst MySlate = () => {\n  const [value, setValue] = useState(initialValue)\n  const renderElement = useCallback(props => <Element {...props} />, [])\n  const renderLeaf = useCallback(props => <Leaf {...props} />, [])\n  const editor = useMemo(() => withHistory(withReact(createEditor())), [])\n\n  const onChange = (value) => {\n    setValue(value);\n    console.log(JSON.stringify(value));\n  }\n\n  return (\n    <Slate editor={editor} value={value} onChange={onChange}>\n      <Toolbar>\n        <MarkButton format=\"bold\" icon=\"format_bold\" />\n        <MarkButton format=\"italic\" icon=\"format_italic\" />\n        <MarkButton format=\"underline\" icon=\"format_underlined\" />\n        <MarkButton format=\"code\" icon=\"code\" />\n        <BlockButton format=\"heading-one\" icon=\"looks_one\" />\n        <BlockButton format=\"heading-two\" icon=\"looks_two\" />\n        <BlockButton format=\"block-quote\" icon=\"format_quote\" />\n        <BlockButton format=\"numbered-list\" icon=\"format_list_numbered\" />\n        <BlockButton format=\"bulleted-list\" icon=\"format_list_bulleted\" />\n      </Toolbar>\n      <Editable\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        placeholder=\"Enter some rich text…\"\n        spellCheck\n        autoFocus\n        onKeyDown={event => {\n          for (const hotkey in HOTKEYS) {\n            if (isHotkey(hotkey, event)) {\n              event.preventDefault()\n              const mark = HOTKEYS[hotkey]\n              toggleMark(editor, mark)\n            }\n          }\n        }}\n      />\n    </Slate>\n  )\n}\n\nconst toggleBlock = (editor, format) => {\n  const isActive = isBlockActive(editor, format)\n  const isList = LIST_TYPES.includes(format)\n\n  Transforms.unwrapNodes(editor, {\n    match: n =>\n      LIST_TYPES.includes(\n        !Editor.isEditor(n) && SlateElement.isElement(n) && n.type\n      ),\n    split: true,\n  })\n  const newProperties = {\n    type: isActive ? 'paragraph' : isList ? 'list-item' : format,\n  }\n  Transforms.setNodes(editor, newProperties)\n\n  if (!isActive && isList) {\n    const block = { type: format, children: [] }\n    Transforms.wrapNodes(editor, block)\n  }\n}\n\nconst toggleMark = (editor, format) => {\n  const isActive = isMarkActive(editor, format)\n\n  if (isActive) {\n    Editor.removeMark(editor, format)\n  } else {\n    Editor.addMark(editor, format, true)\n  }\n}\n\nconst isBlockActive = (editor, format) => {\n  const [match] = Editor.nodes(editor, {\n    match: n =>\n      !Editor.isEditor(n) && SlateElement.isElement(n) && n.type === format,\n  })\n\n  return !!match\n}\n\nconst isMarkActive = (editor, format) => {\n  const marks = Editor.marks(editor)\n  return marks ? marks[format] === true : false\n}\n\nconst Element = ({ attributes, children, element }) => {\n  switch (element.type) {\n    case 'block-quote':\n      return <blockquote {...attributes}>{children}</blockquote>\n    case 'bulleted-list':\n      return <ul {...attributes}>{children}</ul>\n    case 'heading-one':\n      return <h1 {...attributes}>{children}</h1>\n    case 'heading-two':\n      return <h2 {...attributes}>{children}</h2>\n    case 'list-item':\n      return <li {...attributes}>{children}</li>\n    case 'numbered-list':\n      return <ol {...attributes}>{children}</ol>\n    default:\n      return <p {...attributes}>{children}</p>\n  }\n}\n\nconst Leaf = ({ attributes, children, leaf }) => {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>\n  }\n\n  if (leaf.code) {\n    children = <code>{children}</code>\n  }\n\n  if (leaf.italic) {\n    children = <em>{children}</em>\n  }\n\n  if (leaf.underline) {\n    children = <u>{children}</u>\n  }\n\n  return <span {...attributes}>{children}</span>\n}\n\nconst BlockButton = ({ format, icon }) => {\n  const editor = useSlate()\n  return (\n    <Button\n      active={isBlockActive(editor, format)}\n      onMouseDown={event => {\n        event.preventDefault()\n        toggleBlock(editor, format)\n      }}\n    >\n      <Icon>{icon}</Icon>\n    </Button>\n  )\n}\n\nconst MarkButton = ({ format, icon }) => {\n  const editor = useSlate()\n  return (\n    <Button\n      active={isMarkActive(editor, format)}\n      onMouseDown={event => {\n        event.preventDefault()\n        toggleMark(editor, format)\n      }}\n    >\n      <Icon>{icon}</Icon>\n    </Button>\n  )\n}\n\nconst initialValue = [\n  {\n    type: 'paragraph',\n    children: [\n      { text: 'This is editable ' },\n      { text: 'rich', bold: true },\n      { text: ' text, ' },\n      { text: 'much', italic: true },\n      { text: ' better than a ' },\n      { text: '<textarea>', code: true },\n      { text: '!' },\n    ],\n  },\n  {\n    type: 'paragraph',\n    children: [\n      {\n        text:\n          \"Since it's rich text, you can do things like turn a selection of text \",\n      },\n      { text: 'bold', bold: true },\n      {\n        text:\n          ', or add a semantically rendered block quote in the middle of the page, like this:',\n      },\n    ],\n  },\n  {\n    type: 'block-quote',\n    children: [{ text: 'A wise quote.' }],\n  },\n  {\n    type: 'paragraph',\n    children: [{ text: 'Try it out for yourself!' }],\n  },\n]\n\nexport default MySlate;"]},"metadata":{},"sourceType":"module"}