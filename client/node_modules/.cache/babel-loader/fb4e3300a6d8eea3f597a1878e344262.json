{"ast":null,"code":"var _jsxFileName = \"/Users/srailkar/Desktop/my-app/client/src/components/TipTap/TipTap.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useEditor, EditorContent } from '@tiptap/react';\nimport { defaultExtensions } from '@tiptap/starter-kit';\nimport './styles.scss';\nimport MenuBar from './MenuBar';\nimport { useQuery, gql } from '@apollo/client';\nimport { LOAD_HUB } from '../../graphql/queries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Editor = () => {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(LOAD_HUB);\n  const editor = useEditor({\n    extensions: [...defaultExtensions()],\n    content: data === undefined ? '<p> Loading... </p>' : JSON.parse(data.getHub.description),\n\n    onUpdate({\n      editor\n    }) {\n      console.log(JSON.stringify(editor.getJSON()));\n      console.log(editor.getHTML());\n    },\n\n    onBlur({\n      editor\n    }) {\n      console.log('Blur');\n    }\n\n  });\n  useEffect(() => {\n    if (editor !== null && data !== undefined) {\n      editor.commands.setContent(JSON.parse(data.getHub.description));\n    }\n  }, [editor, data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MenuBar, {\n      editor: editor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EditorContent, {\n      editor: editor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Editor, \"aFBYc9N5E7VwhOn/fMM2Ji3be0w=\", false, function () {\n  return [useQuery, useEditor];\n});\n\n_c = Editor;\nexport default Editor; // `\n//   <h2>\n//     Hi there,\n//   </h2>\n//   <p>\n//     this is a basic <em>basic</em> example of <strong>tiptap</strong>. Sure, there are all kind of basic text styles you‚Äôd probably expect from a text editor. But wait until you see the lists:\n//   </p>\n//   <ul>\n//     <li>\n//       That‚Äôs a bullet list with one ‚Ä¶\n//     </li>\n//     <li>\n//       ‚Ä¶ or two list items.\n//     </li>\n//   </ul>\n//   <p>\n//     Isn‚Äôt that great? And all of that is editable. But wait, there‚Äôs more. Let‚Äôs try a code block:\n//   </p>\n//   <pre><code class=\"language-css\">body {\n// display: none;\n// }</code></pre>\n//   <p>\n//     I know, I know, this is impressive. It‚Äôs only the tip of the iceberg though. Give it a try and click a little bit around. Don‚Äôt forget to check the other examples too.\n//   </p>\n//   <blockquote>\n//     Wow, that‚Äôs amazing. Good work, boy! üëè\n//     <br />\n//     ‚Äî Mom\n//   </blockquote>\n// `\n\nvar _c;\n\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"sources":["/Users/srailkar/Desktop/my-app/client/src/components/TipTap/TipTap.jsx"],"names":["React","useEffect","useState","useEditor","EditorContent","defaultExtensions","MenuBar","useQuery","gql","LOAD_HUB","Editor","loading","error","data","editor","extensions","content","undefined","JSON","parse","getHub","description","onUpdate","console","log","stringify","getJSON","getHTML","onBlur","commands","setContent"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,eAAzC;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,OAAO,eAAP;AAEA,OAAOC,OAAP,MAAoB,WAApB;AAEA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,SAASC,QAAT,QAAyB,uBAAzB;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BN,QAAQ,CAACE,QAAD,CAAzC;AAEA,QAAMK,MAAM,GAAGX,SAAS,CAAC;AACvBY,IAAAA,UAAU,EAAE,CACV,GAAGV,iBAAiB,EADV,CADW;AAIvBW,IAAAA,OAAO,EAAGH,IAAI,KAAKI,SAAT,GAAqB,qBAArB,GAA6CC,IAAI,CAACC,KAAL,CAAWN,IAAI,CAACO,MAAL,CAAYC,WAAvB,CAJhC;;AAKvBC,IAAAA,QAAQ,CAAC;AAAER,MAAAA;AAAF,KAAD,EAAa;AACnBS,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACO,SAAL,CAAeX,MAAM,CAACY,OAAP,EAAf,CAAZ;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYV,MAAM,CAACa,OAAP,EAAZ;AACD,KARsB;;AASvBC,IAAAA,MAAM,CAAC;AAAEd,MAAAA;AAAF,KAAD,EAAa;AACjBS,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD;;AAXsB,GAAD,CAAxB;AAcAvB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,MAAM,KAAK,IAAX,IAAmBD,IAAI,KAAKI,SAAhC,EAA2C;AACzCH,MAAAA,MAAM,CAACe,QAAP,CAAgBC,UAAhB,CAA2BZ,IAAI,CAACC,KAAL,CAAWN,IAAI,CAACO,MAAL,CAAYC,WAAvB,CAA3B;AACD;AACF,GAJQ,EAIN,CAACP,MAAD,EAASD,IAAT,CAJM,CAAT;AAMA,sBACE;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,MAAM,EAAEC;AAAjB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,aAAD;AAAe,MAAA,MAAM,EAAEA;AAAvB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CA7BD;;GAAMJ,M;UAC6BH,Q,EAElBJ,S;;;KAHXO,M;AA+BN,eAAeA,MAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useEditor, EditorContent } from '@tiptap/react'\nimport { defaultExtensions } from '@tiptap/starter-kit'\nimport './styles.scss'\n\nimport MenuBar from './MenuBar';\n\nimport { useQuery, gql } from '@apollo/client';\nimport { LOAD_HUB } from '../../graphql/queries';\n\nconst Editor = () => {\n  const { loading, error, data } = useQuery(LOAD_HUB);\n\n  const editor = useEditor({\n    extensions: [\n      ...defaultExtensions(),\n    ],\n    content: (data === undefined ? '<p> Loading... </p>' : JSON.parse(data.getHub.description)),\n    onUpdate({ editor }) {\n      console.log(JSON.stringify(editor.getJSON()));\n      console.log(editor.getHTML());\n    },\n    onBlur({ editor }) {\n      console.log('Blur');\n    }\n  });\n\n  useEffect(() => {\n    if (editor !== null && data !== undefined) {\n      editor.commands.setContent(JSON.parse(data.getHub.description));\n    }\n  }, [editor, data]);\n\n  return (\n    <div>\n      <MenuBar editor={editor} />\n      <EditorContent editor={editor} />\n    </div>\n  )\n}\n\nexport default Editor;\n\n// `\n//   <h2>\n//     Hi there,\n//   </h2>\n//   <p>\n//     this is a basic <em>basic</em> example of <strong>tiptap</strong>. Sure, there are all kind of basic text styles you‚Äôd probably expect from a text editor. But wait until you see the lists:\n//   </p>\n//   <ul>\n//     <li>\n//       That‚Äôs a bullet list with one ‚Ä¶\n//     </li>\n//     <li>\n//       ‚Ä¶ or two list items.\n//     </li>\n//   </ul>\n//   <p>\n//     Isn‚Äôt that great? And all of that is editable. But wait, there‚Äôs more. Let‚Äôs try a code block:\n//   </p>\n//   <pre><code class=\"language-css\">body {\n// display: none;\n// }</code></pre>\n//   <p>\n//     I know, I know, this is impressive. It‚Äôs only the tip of the iceberg though. Give it a try and click a little bit around. Don‚Äôt forget to check the other examples too.\n//   </p>\n//   <blockquote>\n//     Wow, that‚Äôs amazing. Good work, boy! üëè\n//     <br />\n//     ‚Äî Mom\n//   </blockquote>\n// `"]},"metadata":{},"sourceType":"module"}