{"ast":null,"code":"var _jsxFileName = \"/Users/srailkar/Desktop/my-app/src/components/Draft/Draft.jsx\";\nimport React from 'react';\nimport { Editor, EditorState, RichUtils, convertToRaw, getDefaultKeyBinding } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport './Draft.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Draft extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorState: EditorState.createEmpty()\n    };\n\n    this.onChange = editorState => {\n      this.setState({\n        editorState\n      });\n      console.log(JSON.stringify(convertToRaw(editorState.getCurrentContent())));\n    };\n\n    this.handleKeyCommand = this._handleKeyCommand.bind(this);\n    this.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\n    this.toggleBlockType = this._toggleBlockType.bind(this);\n    this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\n  }\n\n  _handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      this.onChange(newState);\n      return true;\n    }\n\n    return false;\n  }\n\n  _mapKeyToEditorCommand(e) {\n    if (e.keyCode === 9\n    /* TAB */\n    ) {\n        const newEditorState = RichUtils.onTab(e, this.state.editorState, 4\n        /* maxDepth */\n        );\n\n        if (newEditorState !== this.state.editorState) {\n          this.onChange(newEditorState);\n        }\n\n        return;\n      }\n\n    return getDefaultKeyBinding(e);\n  }\n\n  _toggleBlockType(blockType) {\n    this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType));\n  }\n\n  _toggleInlineStyle(inlineStyle) {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle));\n  }\n\n  render() {\n    const {\n      editorState\n    } = this.state; // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n\n    let className = 'RichEditor-editor';\n    var contentState = editorState.getCurrentContent();\n\n    if (!contentState.hasText()) {\n      if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n        className += ' RichEditor-hidePlaceholder';\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RichEditor-root\",\n      children: [/*#__PURE__*/_jsxDEV(BlockStyleControls, {\n        editorState: editorState,\n        onToggle: this.toggleBlockType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(InlineStyleControls, {\n        editorState: editorState,\n        onToggle: this.toggleInlineStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: className,\n        onClick: this.focus,\n        children: /*#__PURE__*/_jsxDEV(Editor, {\n          blockStyleFn: getBlockStyle,\n          customStyleMap: styleMap,\n          editorState: editorState,\n          handleKeyCommand: this.handleKeyCommand,\n          keyBindingFn: this.mapKeyToEditorCommand,\n          onChange: this.onChange,\n          placeholder: \"Tell a story...\",\n          spellCheck: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this);\n  }\n\n} // Custom overrides for \"code\" style.\n\n\nconst styleMap = {\n  CODE: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2\n  }\n};\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote';\n\n    default:\n      return null;\n  }\n}\n\nclass StyleButton extends React.Component {\n  constructor() {\n    super();\n\n    this.onToggle = e => {\n      e.preventDefault();\n      this.props.onToggle(this.props.style);\n    };\n  }\n\n  render() {\n    let className = 'RichEditor-styleButton';\n\n    if (this.props.active) {\n      className += ' RichEditor-activeButton';\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: className,\n      onMouseDown: this.onToggle,\n      children: this.props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nconst BLOCK_TYPES = [{\n  label: 'H1',\n  style: 'header-one'\n}, {\n  label: 'H2',\n  style: 'header-two'\n}, {\n  label: 'H3',\n  style: 'header-three'\n}, {\n  label: 'H4',\n  style: 'header-four'\n}, {\n  label: 'H5',\n  style: 'header-five'\n}, {\n  label: 'H6',\n  style: 'header-six'\n}, {\n  label: 'Blockquote',\n  style: 'blockquote'\n}, {\n  label: 'UL',\n  style: 'unordered-list-item'\n}, {\n  label: 'OL',\n  style: 'ordered-list-item'\n}, {\n  label: 'Code Block',\n  style: 'code-block'\n}];\n\nconst BlockStyleControls = props => {\n  const {\n    editorState\n  } = props;\n  const selection = editorState.getSelection();\n  const blockType = editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RichEditor-controls\",\n    children: BLOCK_TYPES.map(type => /*#__PURE__*/_jsxDEV(StyleButton, {\n      active: type.style === blockType,\n      label: type.label,\n      onToggle: props.onToggle,\n      style: type.style\n    }, type.label, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 7\n  }, this);\n};\n\n_c = BlockStyleControls;\nvar INLINE_STYLES = [{\n  label: 'Bold',\n  style: 'BOLD'\n}, {\n  label: 'Italic',\n  style: 'ITALIC'\n}, {\n  label: 'Underline',\n  style: 'UNDERLINE'\n}, {\n  label: 'Monospace',\n  style: 'CODE'\n}];\n\nconst InlineStyleControls = props => {\n  const currentStyle = props.editorState.getCurrentInlineStyle();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RichEditor-controls\",\n    children: INLINE_STYLES.map(type => /*#__PURE__*/_jsxDEV(StyleButton, {\n      active: currentStyle.has(type.style),\n      label: type.label,\n      onToggle: props.onToggle,\n      style: type.style\n    }, type.label, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 7\n  }, this);\n};\n\n_c2 = InlineStyleControls;\nexport default Draft;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BlockStyleControls\");\n$RefreshReg$(_c2, \"InlineStyleControls\");","map":{"version":3,"sources":["/Users/srailkar/Desktop/my-app/src/components/Draft/Draft.jsx"],"names":["React","Editor","EditorState","RichUtils","convertToRaw","getDefaultKeyBinding","Draft","Component","constructor","props","state","editorState","createEmpty","onChange","setState","console","log","JSON","stringify","getCurrentContent","handleKeyCommand","_handleKeyCommand","bind","mapKeyToEditorCommand","_mapKeyToEditorCommand","toggleBlockType","_toggleBlockType","toggleInlineStyle","_toggleInlineStyle","command","newState","e","keyCode","newEditorState","onTab","blockType","inlineStyle","render","className","contentState","hasText","getBlockMap","first","getType","focus","getBlockStyle","styleMap","CODE","backgroundColor","fontFamily","fontSize","padding","block","StyleButton","onToggle","preventDefault","style","active","label","BLOCK_TYPES","BlockStyleControls","selection","getSelection","getBlockForKey","getStartKey","map","type","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Editor, EditorState, RichUtils, convertToRaw, getDefaultKeyBinding } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport './Draft.css';\n\nclass Draft extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {editorState: EditorState.createEmpty()};\n\n      this.onChange = (editorState) => {\n          this.setState({editorState});\n          console.log(JSON.stringify(convertToRaw(editorState.getCurrentContent())));\n      }\n\n      this.handleKeyCommand = this._handleKeyCommand.bind(this);\n      this.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\n      this.toggleBlockType = this._toggleBlockType.bind(this);\n      this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\n    }\n\n    _handleKeyCommand(command, editorState) {\n      const newState = RichUtils.handleKeyCommand(editorState, command);\n      if (newState) {\n        this.onChange(newState);\n        return true;\n      }\n      return false;\n    }\n\n    _mapKeyToEditorCommand(e) {\n      if (e.keyCode === 9 /* TAB */) {\n        const newEditorState = RichUtils.onTab(\n          e,\n          this.state.editorState,\n          4, /* maxDepth */\n        );\n        if (newEditorState !== this.state.editorState) {\n          this.onChange(newEditorState);\n        }\n        return;\n      }\n      return getDefaultKeyBinding(e);\n    }\n\n    _toggleBlockType(blockType) {\n      this.onChange(\n        RichUtils.toggleBlockType(\n          this.state.editorState,\n          blockType\n        )\n      );\n    }\n\n    _toggleInlineStyle(inlineStyle) {\n      this.onChange(\n        RichUtils.toggleInlineStyle(\n          this.state.editorState,\n          inlineStyle\n        )\n      );\n    }\n\n    render() {\n      const {editorState} = this.state;\n\n      // If the user changes block type before entering any text, we can\n      // either style the placeholder or hide it. Let's just hide it now.\n      let className = 'RichEditor-editor';\n      var contentState = editorState.getCurrentContent();\n      if (!contentState.hasText()) {\n        if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n          className += ' RichEditor-hidePlaceholder';\n        }\n      }\n\n      return (\n        <div className=\"RichEditor-root\">\n          <BlockStyleControls\n            editorState={editorState}\n            onToggle={this.toggleBlockType}\n          />\n          <InlineStyleControls\n            editorState={editorState}\n            onToggle={this.toggleInlineStyle}\n          />\n          <div className={className} onClick={this.focus}>\n            <Editor\n              blockStyleFn={getBlockStyle}\n              customStyleMap={styleMap}\n              editorState={editorState}\n              handleKeyCommand={this.handleKeyCommand}\n              keyBindingFn={this.mapKeyToEditorCommand}\n              onChange={this.onChange}\n              placeholder=\"Tell a story...\"\n              spellCheck={true}\n            />\n          </div>\n        </div>\n      );\n    }\n  }\n\n  // Custom overrides for \"code\" style.\n  const styleMap = {\n    CODE: {\n      backgroundColor: 'rgba(0, 0, 0, 0.05)',\n      fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n      fontSize: 16,\n      padding: 2,\n    },\n  };\n\n  function getBlockStyle(block) {\n    switch (block.getType()) {\n      case 'blockquote': return 'RichEditor-blockquote';\n      default: return null;\n    }\n  }\n\n  class StyleButton extends React.Component {\n    constructor() {\n      super();\n      this.onToggle = (e) => {\n        e.preventDefault();\n        this.props.onToggle(this.props.style);\n      };\n    }\n\n    render() {\n      let className = 'RichEditor-styleButton';\n      if (this.props.active) {\n        className += ' RichEditor-activeButton';\n      }\n\n      return (\n        <span className={className} onMouseDown={this.onToggle}>\n          {this.props.label}\n        </span>\n      );\n    }\n  }\n\n  const BLOCK_TYPES = [\n    {label: 'H1', style: 'header-one'},\n    {label: 'H2', style: 'header-two'},\n    {label: 'H3', style: 'header-three'},\n    {label: 'H4', style: 'header-four'},\n    {label: 'H5', style: 'header-five'},\n    {label: 'H6', style: 'header-six'},\n    {label: 'Blockquote', style: 'blockquote'},\n    {label: 'UL', style: 'unordered-list-item'},\n    {label: 'OL', style: 'ordered-list-item'},\n    {label: 'Code Block', style: 'code-block'},\n  ];\n\n  const BlockStyleControls = (props) => {\n    const {editorState} = props;\n    const selection = editorState.getSelection();\n    const blockType = editorState\n      .getCurrentContent()\n      .getBlockForKey(selection.getStartKey())\n      .getType();\n\n    return (\n      <div className=\"RichEditor-controls\">\n        {BLOCK_TYPES.map((type) =>\n          <StyleButton\n            key={type.label}\n            active={type.style === blockType}\n            label={type.label}\n            onToggle={props.onToggle}\n            style={type.style}\n          />\n        )}\n      </div>\n    );\n  };\n\n  var INLINE_STYLES = [\n    {label: 'Bold', style: 'BOLD'},\n    {label: 'Italic', style: 'ITALIC'},\n    {label: 'Underline', style: 'UNDERLINE'},\n    {label: 'Monospace', style: 'CODE'},\n  ];\n\n  const InlineStyleControls = (props) => {\n    const currentStyle = props.editorState.getCurrentInlineStyle();\n    \n    return (\n      <div className=\"RichEditor-controls\">\n        {INLINE_STYLES.map((type) =>\n          <StyleButton\n            key={type.label}\n            active={currentStyle.has(type.style)}\n            label={type.label}\n            onToggle={props.onToggle}\n            style={type.style}\n          />\n        )}\n      </div>\n    );\n  };\n\nexport default Draft;"]},"metadata":{},"sourceType":"module"}