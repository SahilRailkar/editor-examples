{"version":3,"file":"tiptap-extension-hard-break.bundle.umd.min.js","sources":["../../../node_modules/prosemirror-model/src/diff.js","../../../node_modules/prosemirror-model/src/fragment.js","../../../node_modules/prosemirror-model/src/comparedeep.js","../../../node_modules/prosemirror-model/src/mark.js","../../../node_modules/prosemirror-model/src/replace.js","../../../node_modules/prosemirror-model/src/resolvedpos.js","../../../node_modules/prosemirror-model/src/node.js","../../../node_modules/prosemirror-model/src/content.js","../../../node_modules/prosemirror-model/src/schema.js","../../../node_modules/prosemirror-model/src/from_dom.js","../../../node_modules/prosemirror-model/src/to_dom.js","../../../node_modules/prosemirror-transform/src/map.js","../../../node_modules/prosemirror-transform/src/transform.js","../../../node_modules/prosemirror-transform/src/step.js","../../../node_modules/prosemirror-transform/src/replace_step.js","../../../node_modules/prosemirror-transform/src/structure.js","../../../node_modules/prosemirror-transform/src/mark_step.js","../../../node_modules/prosemirror-transform/src/replace.js","../../../node_modules/prosemirror-transform/src/mark.js","../../../node_modules/prosemirror-state/src/selection.js","../../../node_modules/prosemirror-state/src/transaction.js","../../../node_modules/prosemirror-state/src/state.js","../../../node_modules/prosemirror-commands/src/commands.js","../src/hard-break.ts"],"sourcesContent":["export function findDiffStart(a, b, pos) {\n  for (let i = 0;; i++) {\n    if (i == a.childCount || i == b.childCount)\n      return a.childCount == b.childCount ? null : pos\n\n    let childA = a.child(i), childB = b.child(i)\n    if (childA == childB) { pos += childA.nodeSize; continue }\n\n    if (!childA.sameMarkup(childB)) return pos\n\n    if (childA.isText && childA.text != childB.text) {\n      for (let j = 0; childA.text[j] == childB.text[j]; j++)\n        pos++\n      return pos\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffStart(childA.content, childB.content, pos + 1)\n      if (inner != null) return inner\n    }\n    pos += childA.nodeSize\n  }\n}\n\nexport function findDiffEnd(a, b, posA, posB) {\n  for (let iA = a.childCount, iB = b.childCount;;) {\n    if (iA == 0 || iB == 0)\n      return iA == iB ? null : {a: posA, b: posB}\n\n    let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize\n    if (childA == childB) {\n      posA -= size; posB -= size\n      continue\n    }\n\n    if (!childA.sameMarkup(childB)) return {a: posA, b: posB}\n\n    if (childA.isText && childA.text != childB.text) {\n      let same = 0, minSize = Math.min(childA.text.length, childB.text.length)\n      while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {\n        same++; posA--; posB--\n      }\n      return {a: posA, b: posB}\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1)\n      if (inner) return inner\n    }\n    posA -= size; posB -= size\n  }\n}\n","import {findDiffStart, findDiffEnd} from \"./diff\"\n\n// ::- A fragment represents a node's collection of child nodes.\n//\n// Like nodes, fragments are persistent data structures, and you\n// should not mutate them or their content. Rather, you create new\n// instances whenever needed. The API tries to make this easy.\nexport class Fragment {\n  constructor(content, size) {\n    this.content = content\n    // :: number\n    // The size of the fragment, which is the total of the size of its\n    // content nodes.\n    this.size = size || 0\n    if (size == null) for (let i = 0; i < content.length; i++)\n      this.size += content[i].nodeSize\n  }\n\n  // :: (number, number, (node: Node, start: number, parent: Node, index: number) → ?bool, ?number)\n  // Invoke a callback for all descendant nodes between the given two\n  // positions (relative to start of this fragment). Doesn't descend\n  // into a node when the callback returns `false`.\n  nodesBetween(from, to, f, nodeStart = 0, parent) {\n    for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from && f(child, nodeStart + pos, parent, i) !== false && child.content.size) {\n        let start = pos + 1\n        child.nodesBetween(Math.max(0, from - start),\n                           Math.min(child.content.size, to - start),\n                           f, nodeStart + start)\n      }\n      pos = end\n    }\n  }\n\n  // :: ((node: Node, pos: number, parent: Node) → ?bool)\n  // Call the given callback for every descendant node. The callback\n  // may return `false` to prevent traversal of a given node's children.\n  descendants(f) {\n    this.nodesBetween(0, this.size, f)\n  }\n\n  // :: (number, number, ?string, ?string) → string\n  // Extract the text between `from` and `to`. See the same method on\n  // [`Node`](#model.Node.textBetween).\n  textBetween(from, to, blockSeparator, leafText) {\n    let text = \"\", separated = true\n    this.nodesBetween(from, to, (node, pos) => {\n      if (node.isText) {\n        text += node.text.slice(Math.max(from, pos) - pos, to - pos)\n        separated = !blockSeparator\n      } else if (node.isLeaf && leafText) {\n        text += leafText\n        separated = !blockSeparator\n      } else if (!separated && node.isBlock) {\n        text += blockSeparator\n        separated = true\n      }\n    }, 0)\n    return text\n  }\n\n  // :: (Fragment) → Fragment\n  // Create a new fragment containing the combined content of this\n  // fragment and the other.\n  append(other) {\n    if (!other.size) return this\n    if (!this.size) return other\n    let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0\n    if (last.isText && last.sameMarkup(first)) {\n      content[content.length - 1] = last.withText(last.text + first.text)\n      i = 1\n    }\n    for (; i < other.content.length; i++) content.push(other.content[i])\n    return new Fragment(content, this.size + other.size)\n  }\n\n  // :: (number, ?number) → Fragment\n  // Cut out the sub-fragment between the two given positions.\n  cut(from, to) {\n    if (to == null) to = this.size\n    if (from == 0 && to == this.size) return this\n    let result = [], size = 0\n    if (to > from) for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from) {\n        if (pos < from || end > to) {\n          if (child.isText)\n            child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos))\n          else\n            child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1))\n        }\n        result.push(child)\n        size += child.nodeSize\n      }\n      pos = end\n    }\n    return new Fragment(result, size)\n  }\n\n  cutByIndex(from, to) {\n    if (from == to) return Fragment.empty\n    if (from == 0 && to == this.content.length) return this\n    return new Fragment(this.content.slice(from, to))\n  }\n\n  // :: (number, Node) → Fragment\n  // Create a new fragment in which the node at the given index is\n  // replaced by the given node.\n  replaceChild(index, node) {\n    let current = this.content[index]\n    if (current == node) return this\n    let copy = this.content.slice()\n    let size = this.size + node.nodeSize - current.nodeSize\n    copy[index] = node\n    return new Fragment(copy, size)\n  }\n\n  // : (Node) → Fragment\n  // Create a new fragment by prepending the given node to this\n  // fragment.\n  addToStart(node) {\n    return new Fragment([node].concat(this.content), this.size + node.nodeSize)\n  }\n\n  // : (Node) → Fragment\n  // Create a new fragment by appending the given node to this\n  // fragment.\n  addToEnd(node) {\n    return new Fragment(this.content.concat(node), this.size + node.nodeSize)\n  }\n\n  // :: (Fragment) → bool\n  // Compare this fragment to another one.\n  eq(other) {\n    if (this.content.length != other.content.length) return false\n    for (let i = 0; i < this.content.length; i++)\n      if (!this.content[i].eq(other.content[i])) return false\n    return true\n  }\n\n  // :: ?Node\n  // The first child of the fragment, or `null` if it is empty.\n  get firstChild() { return this.content.length ? this.content[0] : null }\n\n  // :: ?Node\n  // The last child of the fragment, or `null` if it is empty.\n  get lastChild() { return this.content.length ? this.content[this.content.length - 1] : null }\n\n  // :: number\n  // The number of child nodes in this fragment.\n  get childCount() { return this.content.length }\n\n  // :: (number) → Node\n  // Get the child node at the given index. Raise an error when the\n  // index is out of range.\n  child(index) {\n    let found = this.content[index]\n    if (!found) throw new RangeError(\"Index \" + index + \" out of range for \" + this)\n    return found\n  }\n\n  // :: (number) → ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) {\n    return this.content[index]\n  }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) {\n    for (let i = 0, p = 0; i < this.content.length; i++) {\n      let child = this.content[i]\n      f(child, p, i)\n      p += child.nodeSize\n    }\n  }\n\n  // :: (Fragment) → ?number\n  // Find the first position at which this fragment and another\n  // fragment differ, or `null` if they are the same.\n  findDiffStart(other, pos = 0) {\n    return findDiffStart(this, other, pos)\n  }\n\n  // :: (Fragment) → ?{a: number, b: number}\n  // Find the first position, searching from the end, at which this\n  // fragment and the given fragment differ, or `null` if they are the\n  // same. Since this position will not be the same in both nodes, an\n  // object with two separate positions is returned.\n  findDiffEnd(other, pos = this.size, otherPos = other.size) {\n    return findDiffEnd(this, other, pos, otherPos)\n  }\n\n  // : (number, ?number) → {index: number, offset: number}\n  // Find the index and inner offset corresponding to a given relative\n  // position in this fragment. The result object will be reused\n  // (overwritten) the next time the function is called. (Not public.)\n  findIndex(pos, round = -1) {\n    if (pos == 0) return retIndex(0, pos)\n    if (pos == this.size) return retIndex(this.content.length, pos)\n    if (pos > this.size || pos < 0) throw new RangeError(`Position ${pos} outside of fragment (${this})`)\n    for (let i = 0, curPos = 0;; i++) {\n      let cur = this.child(i), end = curPos + cur.nodeSize\n      if (end >= pos) {\n        if (end == pos || round > 0) return retIndex(i + 1, end)\n        return retIndex(i, curPos)\n      }\n      curPos = end\n    }\n  }\n\n  // :: () → string\n  // Return a debugging string that describes this fragment.\n  toString() { return \"<\" + this.toStringInner() + \">\" }\n\n  toStringInner() { return this.content.join(\", \") }\n\n  // :: () → ?Object\n  // Create a JSON-serializeable representation of this fragment.\n  toJSON() {\n    return this.content.length ? this.content.map(n => n.toJSON()) : null\n  }\n\n  // :: (Schema, ?Object) → Fragment\n  // Deserialize a fragment from its JSON representation.\n  static fromJSON(schema, value) {\n    if (!value) return Fragment.empty\n    if (!Array.isArray(value)) throw new RangeError(\"Invalid input for Fragment.fromJSON\")\n    return new Fragment(value.map(schema.nodeFromJSON))\n  }\n\n  // :: ([Node]) → Fragment\n  // Build a fragment from an array of nodes. Ensures that adjacent\n  // text nodes with the same marks are joined together.\n  static fromArray(array) {\n    if (!array.length) return Fragment.empty\n    let joined, size = 0\n    for (let i = 0; i < array.length; i++) {\n      let node = array[i]\n      size += node.nodeSize\n      if (i && node.isText && array[i - 1].sameMarkup(node)) {\n        if (!joined) joined = array.slice(0, i)\n        joined[joined.length - 1] = node.withText(joined[joined.length - 1].text + node.text)\n      } else if (joined) {\n        joined.push(node)\n      }\n    }\n    return new Fragment(joined || array, size)\n  }\n\n  // :: (?union<Fragment, Node, [Node]>) → Fragment\n  // Create a fragment from something that can be interpreted as a set\n  // of nodes. For `null`, it returns the empty fragment. For a\n  // fragment, the fragment itself. For a node or array of nodes, a\n  // fragment containing those nodes.\n  static from(nodes) {\n    if (!nodes) return Fragment.empty\n    if (nodes instanceof Fragment) return nodes\n    if (Array.isArray(nodes)) return this.fromArray(nodes)\n    if (nodes.attrs) return new Fragment([nodes], nodes.nodeSize)\n    throw new RangeError(\"Can not convert \" + nodes + \" to a Fragment\" +\n                         (nodes.nodesBetween ? \" (looks like multiple versions of prosemirror-model were loaded)\" : \"\"))\n  }\n}\n\nconst found = {index: 0, offset: 0}\nfunction retIndex(index, offset) {\n  found.index = index\n  found.offset = offset\n  return found\n}\n\n// :: Fragment\n// An empty fragment. Intended to be reused whenever a node doesn't\n// contain anything (rather than allocating a new empty fragment for\n// each leaf node).\nFragment.empty = new Fragment([], 0)\n","export function compareDeep(a, b) {\n  if (a === b) return true\n  if (!(a && typeof a == \"object\") ||\n      !(b && typeof b == \"object\")) return false\n  let array = Array.isArray(a)\n  if (Array.isArray(b) != array) return false\n  if (array) {\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++) if (!compareDeep(a[i], b[i])) return false\n  } else {\n    for (let p in a) if (!(p in b) || !compareDeep(a[p], b[p])) return false\n    for (let p in b) if (!(p in a)) return false\n  }\n  return true\n}\n","import {compareDeep} from \"./comparedeep\"\n\n// ::- A mark is a piece of information that can be attached to a node,\n// such as it being emphasized, in code font, or a link. It has a type\n// and optionally a set of attributes that provide further information\n// (such as the target of the link). Marks are created through a\n// `Schema`, which controls which types exist and which\n// attributes they have.\nexport class Mark {\n  constructor(type, attrs) {\n    // :: MarkType\n    // The type of this mark.\n    this.type = type\n    // :: Object\n    // The attributes associated with this mark.\n    this.attrs = attrs\n  }\n\n  // :: ([Mark]) → [Mark]\n  // Given a set of marks, create a new set which contains this one as\n  // well, in the right position. If this mark is already in the set,\n  // the set itself is returned. If any marks that are set to be\n  // [exclusive](#model.MarkSpec.excludes) with this mark are present,\n  // those are replaced by this one.\n  addToSet(set) {\n    let copy, placed = false\n    for (let i = 0; i < set.length; i++) {\n      let other = set[i]\n      if (this.eq(other)) return set\n      if (this.type.excludes(other.type)) {\n        if (!copy) copy = set.slice(0, i)\n      } else if (other.type.excludes(this.type)) {\n        return set\n      } else {\n        if (!placed && other.type.rank > this.type.rank) {\n          if (!copy) copy = set.slice(0, i)\n          copy.push(this)\n          placed = true\n        }\n        if (copy) copy.push(other)\n      }\n    }\n    if (!copy) copy = set.slice()\n    if (!placed) copy.push(this)\n    return copy\n  }\n\n  // :: ([Mark]) → [Mark]\n  // Remove this mark from the given set, returning a new set. If this\n  // mark is not in the set, the set itself is returned.\n  removeFromSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (this.eq(set[i]))\n        return set.slice(0, i).concat(set.slice(i + 1))\n    return set\n  }\n\n  // :: ([Mark]) → bool\n  // Test whether this mark is in the given set of marks.\n  isInSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (this.eq(set[i])) return true\n    return false\n  }\n\n  // :: (Mark) → bool\n  // Test whether this mark has the same type and attributes as\n  // another mark.\n  eq(other) {\n    return this == other ||\n      (this.type == other.type && compareDeep(this.attrs, other.attrs))\n  }\n\n  // :: () → Object\n  // Convert this mark to a JSON-serializeable representation.\n  toJSON() {\n    let obj = {type: this.type.name}\n    for (let _ in this.attrs) {\n      obj.attrs = this.attrs\n      break\n    }\n    return obj\n  }\n\n  // :: (Schema, Object) → Mark\n  static fromJSON(schema, json) {\n    if (!json) throw new RangeError(\"Invalid input for Mark.fromJSON\")\n    let type = schema.marks[json.type]\n    if (!type) throw new RangeError(`There is no mark type ${json.type} in this schema`)\n    return type.create(json.attrs)\n  }\n\n  // :: ([Mark], [Mark]) → bool\n  // Test whether two sets of marks are identical.\n  static sameSet(a, b) {\n    if (a == b) return true\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++)\n      if (!a[i].eq(b[i])) return false\n    return true\n  }\n\n  // :: (?union<Mark, [Mark]>) → [Mark]\n  // Create a properly sorted mark set from null, a single mark, or an\n  // unsorted array of marks.\n  static setFrom(marks) {\n    if (!marks || marks.length == 0) return Mark.none\n    if (marks instanceof Mark) return [marks]\n    let copy = marks.slice()\n    copy.sort((a, b) => a.type.rank - b.type.rank)\n    return copy\n  }\n}\n\n// :: [Mark] The empty set of marks.\nMark.none = []\n","import {Fragment} from \"./fragment\"\n\n// ReplaceError:: class extends Error\n// Error type raised by [`Node.replace`](#model.Node.replace) when\n// given an invalid replacement.\n\nexport function ReplaceError(message) {\n  let err = Error.call(this, message)\n  err.__proto__ = ReplaceError.prototype\n  return err\n}\n\nReplaceError.prototype = Object.create(Error.prototype)\nReplaceError.prototype.constructor = ReplaceError\nReplaceError.prototype.name = \"ReplaceError\"\n\n// ::- A slice represents a piece cut out of a larger document. It\n// stores not only a fragment, but also the depth up to which nodes on\n// both side are ‘open’ (cut through).\nexport class Slice {\n  // :: (Fragment, number, number)\n  // Create a slice. When specifying a non-zero open depth, you must\n  // make sure that there are nodes of at least that depth at the\n  // appropriate side of the fragment—i.e. if the fragment is an empty\n  // paragraph node, `openStart` and `openEnd` can't be greater than 1.\n  //\n  // It is not necessary for the content of open nodes to conform to\n  // the schema's content constraints, though it should be a valid\n  // start/end/middle for such a node, depending on which sides are\n  // open.\n  constructor(content, openStart, openEnd) {\n    // :: Fragment The slice's content.\n    this.content = content\n    // :: number The open depth at the start.\n    this.openStart = openStart\n    // :: number The open depth at the end.\n    this.openEnd = openEnd\n  }\n\n  // :: number\n  // The size this slice would add when inserted into a document.\n  get size() {\n    return this.content.size - this.openStart - this.openEnd\n  }\n\n  insertAt(pos, fragment) {\n    let content = insertInto(this.content, pos + this.openStart, fragment, null)\n    return content && new Slice(content, this.openStart, this.openEnd)\n  }\n\n  removeBetween(from, to) {\n    return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd)\n  }\n\n  // :: (Slice) → bool\n  // Tests whether this slice is equal to another slice.\n  eq(other) {\n    return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd\n  }\n\n  toString() {\n    return this.content + \"(\" + this.openStart + \",\" + this.openEnd + \")\"\n  }\n\n  // :: () → ?Object\n  // Convert a slice to a JSON-serializable representation.\n  toJSON() {\n    if (!this.content.size) return null\n    let json = {content: this.content.toJSON()}\n    if (this.openStart > 0) json.openStart = this.openStart\n    if (this.openEnd > 0) json.openEnd = this.openEnd\n    return json\n  }\n\n  // :: (Schema, ?Object) → Slice\n  // Deserialize a slice from its JSON representation.\n  static fromJSON(schema, json) {\n    if (!json) return Slice.empty\n    let openStart = json.openStart || 0, openEnd = json.openEnd || 0\n    if (typeof openStart != \"number\" || typeof openEnd != \"number\")\n      throw new RangeError(\"Invalid input for Slice.fromJSON\")\n    return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd)\n  }\n\n  // :: (Fragment, ?bool) → Slice\n  // Create a slice from a fragment by taking the maximum possible\n  // open value on both side of the fragment.\n  static maxOpen(fragment, openIsolating=true) {\n    let openStart = 0, openEnd = 0\n    for (let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild) openStart++\n    for (let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild) openEnd++\n    return new Slice(fragment, openStart, openEnd)\n  }\n}\n\nfunction removeRange(content, from, to) {\n  let {index, offset} = content.findIndex(from), child = content.maybeChild(index)\n  let {index: indexTo, offset: offsetTo} = content.findIndex(to)\n  if (offset == from || child.isText) {\n    if (offsetTo != to && !content.child(indexTo).isText) throw new RangeError(\"Removing non-flat range\")\n    return content.cut(0, from).append(content.cut(to))\n  }\n  if (index != indexTo) throw new RangeError(\"Removing non-flat range\")\n  return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)))\n}\n\nfunction insertInto(content, dist, insert, parent) {\n  let {index, offset} = content.findIndex(dist), child = content.maybeChild(index)\n  if (offset == dist || child.isText) {\n    if (parent && !parent.canReplace(index, index, insert)) return null\n    return content.cut(0, dist).append(insert).append(content.cut(dist))\n  }\n  let inner = insertInto(child.content, dist - offset - 1, insert)\n  return inner && content.replaceChild(index, child.copy(inner))\n}\n\n// :: Slice\n// The empty slice.\nSlice.empty = new Slice(Fragment.empty, 0, 0)\n\nexport function replace($from, $to, slice) {\n  if (slice.openStart > $from.depth)\n    throw new ReplaceError(\"Inserted content deeper than insertion position\")\n  if ($from.depth - slice.openStart != $to.depth - slice.openEnd)\n    throw new ReplaceError(\"Inconsistent open depths\")\n  return replaceOuter($from, $to, slice, 0)\n}\n\nfunction replaceOuter($from, $to, slice, depth) {\n  let index = $from.index(depth), node = $from.node(depth)\n  if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {\n    let inner = replaceOuter($from, $to, slice, depth + 1)\n    return node.copy(node.content.replaceChild(index, inner))\n  } else if (!slice.content.size) {\n    return close(node, replaceTwoWay($from, $to, depth))\n  } else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case\n    let parent = $from.parent, content = parent.content\n    return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)))\n  } else {\n    let {start, end} = prepareSliceForReplace(slice, $from)\n    return close(node, replaceThreeWay($from, start, end, $to, depth))\n  }\n}\n\nfunction checkJoin(main, sub) {\n  if (!sub.type.compatibleContent(main.type))\n    throw new ReplaceError(\"Cannot join \" + sub.type.name + \" onto \" + main.type.name)\n}\n\nfunction joinable($before, $after, depth) {\n  let node = $before.node(depth)\n  checkJoin(node, $after.node(depth))\n  return node\n}\n\nfunction addNode(child, target) {\n  let last = target.length - 1\n  if (last >= 0 && child.isText && child.sameMarkup(target[last]))\n    target[last] = child.withText(target[last].text + child.text)\n  else\n    target.push(child)\n}\n\nfunction addRange($start, $end, depth, target) {\n  let node = ($end || $start).node(depth)\n  let startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount\n  if ($start) {\n    startIndex = $start.index(depth)\n    if ($start.depth > depth) {\n      startIndex++\n    } else if ($start.textOffset) {\n      addNode($start.nodeAfter, target)\n      startIndex++\n    }\n  }\n  for (let i = startIndex; i < endIndex; i++) addNode(node.child(i), target)\n  if ($end && $end.depth == depth && $end.textOffset)\n    addNode($end.nodeBefore, target)\n}\n\nfunction close(node, content) {\n  if (!node.type.validContent(content))\n    throw new ReplaceError(\"Invalid content for node \" + node.type.name)\n  return node.copy(content)\n}\n\nfunction replaceThreeWay($from, $start, $end, $to, depth) {\n  let openStart = $from.depth > depth && joinable($from, $start, depth + 1)\n  let openEnd = $to.depth > depth && joinable($end, $to, depth + 1)\n\n  let content = []\n  addRange(null, $from, depth, content)\n  if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {\n    checkJoin(openStart, openEnd)\n    addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content)\n  } else {\n    if (openStart)\n      addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content)\n    addRange($start, $end, depth, content)\n    if (openEnd)\n      addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content)\n  }\n  addRange($to, null, depth, content)\n  return new Fragment(content)\n}\n\nfunction replaceTwoWay($from, $to, depth) {\n  let content = []\n  addRange(null, $from, depth, content)\n  if ($from.depth > depth) {\n    let type = joinable($from, $to, depth + 1)\n    addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content)\n  }\n  addRange($to, null, depth, content)\n  return new Fragment(content)\n}\n\nfunction prepareSliceForReplace(slice, $along) {\n  let extra = $along.depth - slice.openStart, parent = $along.node(extra)\n  let node = parent.copy(slice.content)\n  for (let i = extra - 1; i >= 0; i--)\n    node = $along.node(i).copy(Fragment.from(node))\n  return {start: node.resolveNoCache(slice.openStart + extra),\n          end: node.resolveNoCache(node.content.size - slice.openEnd - extra)}\n}\n","import {Mark} from \"./mark\"\n\n// ::- You can [_resolve_](#model.Node.resolve) a position to get more\n// information about it. Objects of this class represent such a\n// resolved position, providing various pieces of context information,\n// and some helper methods.\n//\n// Throughout this interface, methods that take an optional `depth`\n// parameter will interpret undefined as `this.depth` and negative\n// numbers as `this.depth + value`.\nexport class ResolvedPos {\n  constructor(pos, path, parentOffset) {\n    // :: number The position that was resolved.\n    this.pos = pos\n    this.path = path\n    // :: number\n    // The number of levels the parent node is from the root. If this\n    // position points directly into the root node, it is 0. If it\n    // points into a top-level paragraph, 1, and so on.\n    this.depth = path.length / 3 - 1\n    // :: number The offset this position has into its parent node.\n    this.parentOffset = parentOffset\n  }\n\n  resolveDepth(val) {\n    if (val == null) return this.depth\n    if (val < 0) return this.depth + val\n    return val\n  }\n\n  // :: Node\n  // The parent node that the position points into. Note that even if\n  // a position points into a text node, that node is not considered\n  // the parent—text nodes are ‘flat’ in this model, and have no content.\n  get parent() { return this.node(this.depth) }\n\n  // :: Node\n  // The root node in which the position was resolved.\n  get doc() { return this.node(0) }\n\n  // :: (?number) → Node\n  // The ancestor node at the given level. `p.node(p.depth)` is the\n  // same as `p.parent`.\n  node(depth) { return this.path[this.resolveDepth(depth) * 3] }\n\n  // :: (?number) → number\n  // The index into the ancestor at the given level. If this points at\n  // the 3rd node in the 2nd paragraph on the top level, for example,\n  // `p.index(0)` is 1 and `p.index(1)` is 2.\n  index(depth) { return this.path[this.resolveDepth(depth) * 3 + 1] }\n\n  // :: (?number) → number\n  // The index pointing after this position into the ancestor at the\n  // given level.\n  indexAfter(depth) {\n    depth = this.resolveDepth(depth)\n    return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1)\n  }\n\n  // :: (?number) → number\n  // The (absolute) position at the start of the node at the given\n  // level.\n  start(depth) {\n    depth = this.resolveDepth(depth)\n    return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1\n  }\n\n  // :: (?number) → number\n  // The (absolute) position at the end of the node at the given\n  // level.\n  end(depth) {\n    depth = this.resolveDepth(depth)\n    return this.start(depth) + this.node(depth).content.size\n  }\n\n  // :: (?number) → number\n  // The (absolute) position directly before the wrapping node at the\n  // given level, or, when `depth` is `this.depth + 1`, the original\n  // position.\n  before(depth) {\n    depth = this.resolveDepth(depth)\n    if (!depth) throw new RangeError(\"There is no position before the top-level node\")\n    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1]\n  }\n\n  // :: (?number) → number\n  // The (absolute) position directly after the wrapping node at the\n  // given level, or the original position when `depth` is `this.depth + 1`.\n  after(depth) {\n    depth = this.resolveDepth(depth)\n    if (!depth) throw new RangeError(\"There is no position after the top-level node\")\n    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize\n  }\n\n  // :: number\n  // When this position points into a text node, this returns the\n  // distance between the position and the start of the text node.\n  // Will be zero for positions that point between nodes.\n  get textOffset() { return this.pos - this.path[this.path.length - 1] }\n\n  // :: ?Node\n  // Get the node directly after the position, if any. If the position\n  // points into a text node, only the part of that node after the\n  // position is returned.\n  get nodeAfter() {\n    let parent = this.parent, index = this.index(this.depth)\n    if (index == parent.childCount) return null\n    let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index)\n    return dOff ? parent.child(index).cut(dOff) : child\n  }\n\n  // :: ?Node\n  // Get the node directly before the position, if any. If the\n  // position points into a text node, only the part of that node\n  // before the position is returned.\n  get nodeBefore() {\n    let index = this.index(this.depth)\n    let dOff = this.pos - this.path[this.path.length - 1]\n    if (dOff) return this.parent.child(index).cut(0, dOff)\n    return index == 0 ? null : this.parent.child(index - 1)\n  }\n\n  // :: (number, ?number) → number\n  // Get the position at the given index in the parent node at the\n  // given depth (which defaults to `this.depth`).\n  posAtIndex(index, depth) {\n    depth = this.resolveDepth(depth)\n    let node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1\n    for (let i = 0; i < index; i++) pos += node.child(i).nodeSize\n    return pos\n  }\n\n  // :: () → [Mark]\n  // Get the marks at this position, factoring in the surrounding\n  // marks' [`inclusive`](#model.MarkSpec.inclusive) property. If the\n  // position is at the start of a non-empty node, the marks of the\n  // node after it (if any) are returned.\n  marks() {\n    let parent = this.parent, index = this.index()\n\n    // In an empty parent, return the empty array\n    if (parent.content.size == 0) return Mark.none\n\n    // When inside a text node, just return the text node's marks\n    if (this.textOffset) return parent.child(index).marks\n\n    let main = parent.maybeChild(index - 1), other = parent.maybeChild(index)\n    // If the `after` flag is true of there is no node before, make\n    // the node after this position the main reference.\n    if (!main) { let tmp = main; main = other; other = tmp }\n\n    // Use all marks in the main node, except those that have\n    // `inclusive` set to false and are not present in the other node.\n    let marks = main.marks\n    for (var i = 0; i < marks.length; i++)\n      if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))\n        marks = marks[i--].removeFromSet(marks)\n\n    return marks\n  }\n\n  // :: (ResolvedPos) → ?[Mark]\n  // Get the marks after the current position, if any, except those\n  // that are non-inclusive and not present at position `$end`. This\n  // is mostly useful for getting the set of marks to preserve after a\n  // deletion. Will return `null` if this position is at the end of\n  // its parent node or its parent node isn't a textblock (in which\n  // case no marks should be preserved).\n  marksAcross($end) {\n    let after = this.parent.maybeChild(this.index())\n    if (!after || !after.isInline) return null\n\n    let marks = after.marks, next = $end.parent.maybeChild($end.index())\n    for (var i = 0; i < marks.length; i++)\n      if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))\n        marks = marks[i--].removeFromSet(marks)\n    return marks\n  }\n\n  // :: (number) → number\n  // The depth up to which this position and the given (non-resolved)\n  // position share the same parent nodes.\n  sharedDepth(pos) {\n    for (let depth = this.depth; depth > 0; depth--)\n      if (this.start(depth) <= pos && this.end(depth) >= pos) return depth\n    return 0\n  }\n\n  // :: (?ResolvedPos, ?(Node) → bool) → ?NodeRange\n  // Returns a range based on the place where this position and the\n  // given position diverge around block content. If both point into\n  // the same textblock, for example, a range around that textblock\n  // will be returned. If they point into different blocks, the range\n  // around those blocks in their shared ancestor is returned. You can\n  // pass in an optional predicate that will be called with a parent\n  // node to see if a range into that parent is acceptable.\n  blockRange(other = this, pred) {\n    if (other.pos < this.pos) return other.blockRange(this)\n    for (let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)\n      if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))\n        return new NodeRange(this, other, d)\n  }\n\n  // :: (ResolvedPos) → bool\n  // Query whether the given position shares the same parent node.\n  sameParent(other) {\n    return this.pos - this.parentOffset == other.pos - other.parentOffset\n  }\n\n  // :: (ResolvedPos) → ResolvedPos\n  // Return the greater of this and the given position.\n  max(other) {\n    return other.pos > this.pos ? other : this\n  }\n\n  // :: (ResolvedPos) → ResolvedPos\n  // Return the smaller of this and the given position.\n  min(other) {\n    return other.pos < this.pos ? other : this\n  }\n\n  toString() {\n    let str = \"\"\n    for (let i = 1; i <= this.depth; i++)\n      str += (str ? \"/\" : \"\") + this.node(i).type.name + \"_\" + this.index(i - 1)\n    return str + \":\" + this.parentOffset\n  }\n\n  static resolve(doc, pos) {\n    if (!(pos >= 0 && pos <= doc.content.size)) throw new RangeError(\"Position \" + pos + \" out of range\")\n    let path = []\n    let start = 0, parentOffset = pos\n    for (let node = doc;;) {\n      let {index, offset} = node.content.findIndex(parentOffset)\n      let rem = parentOffset - offset\n      path.push(node, index, start + offset)\n      if (!rem) break\n      node = node.child(index)\n      if (node.isText) break\n      parentOffset = rem - 1\n      start += offset + 1\n    }\n    return new ResolvedPos(pos, path, parentOffset)\n  }\n\n  static resolveCached(doc, pos) {\n    for (let i = 0; i < resolveCache.length; i++) {\n      let cached = resolveCache[i]\n      if (cached.pos == pos && cached.doc == doc) return cached\n    }\n    let result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos)\n    resolveCachePos = (resolveCachePos + 1) % resolveCacheSize\n    return result\n  }\n}\n\nlet resolveCache = [], resolveCachePos = 0, resolveCacheSize = 12\n\n// ::- Represents a flat range of content, i.e. one that starts and\n// ends in the same node.\nexport class NodeRange {\n  // :: (ResolvedPos, ResolvedPos, number)\n  // Construct a node range. `$from` and `$to` should point into the\n  // same node until at least the given `depth`, since a node range\n  // denotes an adjacent set of nodes in a single parent node.\n  constructor($from, $to, depth) {\n    // :: ResolvedPos A resolved position along the start of the\n    // content. May have a `depth` greater than this object's `depth`\n    // property, since these are the positions that were used to\n    // compute the range, not re-resolved positions directly at its\n    // boundaries.\n    this.$from = $from\n    // :: ResolvedPos A position along the end of the content. See\n    // caveat for [`$from`](#model.NodeRange.$from).\n    this.$to = $to\n    // :: number The depth of the node that this range points into.\n    this.depth = depth\n  }\n\n  // :: number The position at the start of the range.\n  get start() { return this.$from.before(this.depth + 1) }\n  // :: number The position at the end of the range.\n  get end() { return this.$to.after(this.depth + 1) }\n\n  // :: Node The parent node that the range points into.\n  get parent() { return this.$from.node(this.depth) }\n  // :: number The start index of the range in the parent node.\n  get startIndex() { return this.$from.index(this.depth) }\n  // :: number The end index of the range in the parent node.\n  get endIndex() { return this.$to.indexAfter(this.depth) }\n}\n","import {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {Slice, replace} from \"./replace\"\nimport {ResolvedPos} from \"./resolvedpos\"\nimport {compareDeep} from \"./comparedeep\"\n\nconst emptyAttrs = Object.create(null)\n\n// ::- This class represents a node in the tree that makes up a\n// ProseMirror document. So a document is an instance of `Node`, with\n// children that are also instances of `Node`.\n//\n// Nodes are persistent data structures. Instead of changing them, you\n// create new ones with the content you want. Old ones keep pointing\n// at the old document shape. This is made cheaper by sharing\n// structure between the old and new data as much as possible, which a\n// tree shape like this (without back pointers) makes easy.\n//\n// **Do not** directly mutate the properties of a `Node` object. See\n// [the guide](/docs/guide/#doc) for more information.\nexport class Node {\n  constructor(type, attrs, content, marks) {\n    // :: NodeType\n    // The type of node that this is.\n    this.type = type\n\n    // :: Object\n    // An object mapping attribute names to values. The kind of\n    // attributes allowed and required are\n    // [determined](#model.NodeSpec.attrs) by the node type.\n    this.attrs = attrs\n\n    // :: Fragment\n    // A container holding the node's children.\n    this.content = content || Fragment.empty\n\n    // :: [Mark]\n    // The marks (things like whether it is emphasized or part of a\n    // link) applied to this node.\n    this.marks = marks || Mark.none\n  }\n\n  // text:: ?string\n  // For text nodes, this contains the node's text content.\n\n  // :: number\n  // The size of this node, as defined by the integer-based [indexing\n  // scheme](/docs/guide/#doc.indexing). For text nodes, this is the\n  // amount of characters. For other leaf nodes, it is one. For\n  // non-leaf nodes, it is the size of the content plus two (the start\n  // and end token).\n  get nodeSize() { return this.isLeaf ? 1 : 2 + this.content.size }\n\n  // :: number\n  // The number of children that the node has.\n  get childCount() { return this.content.childCount }\n\n  // :: (number) → Node\n  // Get the child node at the given index. Raises an error when the\n  // index is out of range.\n  child(index) { return this.content.child(index) }\n\n  // :: (number) → ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) { return this.content.maybeChild(index) }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) { this.content.forEach(f) }\n\n  // :: (number, number, (node: Node, pos: number, parent: Node, index: number) → ?bool, ?number)\n  // Invoke a callback for all descendant nodes recursively between\n  // the given two positions that are relative to start of this node's\n  // content. The callback is invoked with the node, its\n  // parent-relative position, its parent node, and its child index.\n  // When the callback returns false for a given node, that node's\n  // children will not be recursed over. The last parameter can be\n  // used to specify a starting position to count from.\n  nodesBetween(from, to, f, startPos = 0) {\n    this.content.nodesBetween(from, to, f, startPos, this)\n  }\n\n  // :: ((node: Node, pos: number, parent: Node) → ?bool)\n  // Call the given callback for every descendant node. Doesn't\n  // descend into a node when the callback returns `false`.\n  descendants(f) {\n    this.nodesBetween(0, this.content.size, f)\n  }\n\n  // :: string\n  // Concatenates all the text nodes found in this fragment and its\n  // children.\n  get textContent() { return this.textBetween(0, this.content.size, \"\") }\n\n  // :: (number, number, ?string, ?string) → string\n  // Get all text between positions `from` and `to`. When\n  // `blockSeparator` is given, it will be inserted whenever a new\n  // block node is started. When `leafText` is given, it'll be\n  // inserted for every non-text leaf node encountered.\n  textBetween(from, to, blockSeparator, leafText) {\n    return this.content.textBetween(from, to, blockSeparator, leafText)\n  }\n\n  // :: ?Node\n  // Returns this node's first child, or `null` if there are no\n  // children.\n  get firstChild() { return this.content.firstChild }\n\n  // :: ?Node\n  // Returns this node's last child, or `null` if there are no\n  // children.\n  get lastChild() { return this.content.lastChild }\n\n  // :: (Node) → bool\n  // Test whether two nodes represent the same piece of document.\n  eq(other) {\n    return this == other || (this.sameMarkup(other) && this.content.eq(other.content))\n  }\n\n  // :: (Node) → bool\n  // Compare the markup (type, attributes, and marks) of this node to\n  // those of another. Returns `true` if both have the same markup.\n  sameMarkup(other) {\n    return this.hasMarkup(other.type, other.attrs, other.marks)\n  }\n\n  // :: (NodeType, ?Object, ?[Mark]) → bool\n  // Check whether this node's markup correspond to the given type,\n  // attributes, and marks.\n  hasMarkup(type, attrs, marks) {\n    return this.type == type &&\n      compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&\n      Mark.sameSet(this.marks, marks || Mark.none)\n  }\n\n  // :: (?Fragment) → Node\n  // Create a new node with the same markup as this node, containing\n  // the given content (or empty, if no content is given).\n  copy(content = null) {\n    if (content == this.content) return this\n    return new this.constructor(this.type, this.attrs, content, this.marks)\n  }\n\n  // :: ([Mark]) → Node\n  // Create a copy of this node, with the given set of marks instead\n  // of the node's own marks.\n  mark(marks) {\n    return marks == this.marks ? this : new this.constructor(this.type, this.attrs, this.content, marks)\n  }\n\n  // :: (number, ?number) → Node\n  // Create a copy of this node with only the content between the\n  // given positions. If `to` is not given, it defaults to the end of\n  // the node.\n  cut(from, to) {\n    if (from == 0 && to == this.content.size) return this\n    return this.copy(this.content.cut(from, to))\n  }\n\n  // :: (number, ?number) → Slice\n  // Cut out the part of the document between the given positions, and\n  // return it as a `Slice` object.\n  slice(from, to = this.content.size, includeParents = false) {\n    if (from == to) return Slice.empty\n\n    let $from = this.resolve(from), $to = this.resolve(to)\n    let depth = includeParents ? 0 : $from.sharedDepth(to)\n    let start = $from.start(depth), node = $from.node(depth)\n    let content = node.content.cut($from.pos - start, $to.pos - start)\n    return new Slice(content, $from.depth - depth, $to.depth - depth)\n  }\n\n  // :: (number, number, Slice) → Node\n  // Replace the part of the document between the given positions with\n  // the given slice. The slice must 'fit', meaning its open sides\n  // must be able to connect to the surrounding content, and its\n  // content nodes must be valid children for the node they are placed\n  // into. If any of this is violated, an error of type\n  // [`ReplaceError`](#model.ReplaceError) is thrown.\n  replace(from, to, slice) {\n    return replace(this.resolve(from), this.resolve(to), slice)\n  }\n\n  // :: (number) → ?Node\n  // Find the node directly after the given position.\n  nodeAt(pos) {\n    for (let node = this;;) {\n      let {index, offset} = node.content.findIndex(pos)\n      node = node.maybeChild(index)\n      if (!node) return null\n      if (offset == pos || node.isText) return node\n      pos -= offset + 1\n    }\n  }\n\n  // :: (number) → {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node after the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childAfter(pos) {\n    let {index, offset} = this.content.findIndex(pos)\n    return {node: this.content.maybeChild(index), index, offset}\n  }\n\n  // :: (number) → {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node before the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childBefore(pos) {\n    if (pos == 0) return {node: null, index: 0, offset: 0}\n    let {index, offset} = this.content.findIndex(pos)\n    if (offset < pos) return {node: this.content.child(index), index, offset}\n    let node = this.content.child(index - 1)\n    return {node, index: index - 1, offset: offset - node.nodeSize}\n  }\n\n  // :: (number) → ResolvedPos\n  // Resolve the given position in the document, returning an\n  // [object](#model.ResolvedPos) with information about its context.\n  resolve(pos) { return ResolvedPos.resolveCached(this, pos) }\n\n  resolveNoCache(pos) { return ResolvedPos.resolve(this, pos) }\n\n  // :: (number, number, union<Mark, MarkType>) → bool\n  // Test whether a given mark or mark type occurs in this document\n  // between the two given positions.\n  rangeHasMark(from, to, type) {\n    let found = false\n    if (to > from) this.nodesBetween(from, to, node => {\n      if (type.isInSet(node.marks)) found = true\n      return !found\n    })\n    return found\n  }\n\n  // :: bool\n  // True when this is a block (non-inline node)\n  get isBlock() { return this.type.isBlock }\n\n  // :: bool\n  // True when this is a textblock node, a block node with inline\n  // content.\n  get isTextblock() { return this.type.isTextblock }\n\n  // :: bool\n  // True when this node allows inline content.\n  get inlineContent() { return this.type.inlineContent }\n\n  // :: bool\n  // True when this is an inline node (a text node or a node that can\n  // appear among text).\n  get isInline() { return this.type.isInline }\n\n  // :: bool\n  // True when this is a text node.\n  get isText() { return this.type.isText }\n\n  // :: bool\n  // True when this is a leaf node.\n  get isLeaf() { return this.type.isLeaf }\n\n  // :: bool\n  // True when this is an atom, i.e. when it does not have directly\n  // editable content. This is usually the same as `isLeaf`, but can\n  // be configured with the [`atom` property](#model.NodeSpec.atom) on\n  // a node's spec (typically used when the node is displayed as an\n  // uneditable [node view](#view.NodeView)).\n  get isAtom() { return this.type.isAtom }\n\n  // :: () → string\n  // Return a string representation of this node for debugging\n  // purposes.\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    let name = this.type.name\n    if (this.content.size)\n      name += \"(\" + this.content.toStringInner() + \")\"\n    return wrapMarks(this.marks, name)\n  }\n\n  // :: (number) → ContentMatch\n  // Get the content match in this node at the given index.\n  contentMatchAt(index) {\n    let match = this.type.contentMatch.matchFragment(this.content, 0, index)\n    if (!match) throw new Error(\"Called contentMatchAt on a node with invalid content\")\n    return match\n  }\n\n  // :: (number, number, ?Fragment, ?number, ?number) → bool\n  // Test whether replacing the range between `from` and `to` (by\n  // child index) with the given replacement fragment (which defaults\n  // to the empty fragment) would leave the node's content valid. You\n  // can optionally pass `start` and `end` indices into the\n  // replacement fragment.\n  canReplace(from, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {\n    let one = this.contentMatchAt(from).matchFragment(replacement, start, end)\n    let two = one && one.matchFragment(this.content, to)\n    if (!two || !two.validEnd) return false\n    for (let i = start; i < end; i++) if (!this.type.allowsMarks(replacement.child(i).marks)) return false\n    return true\n  }\n\n  // :: (number, number, NodeType, ?[Mark]) → bool\n  // Test whether replacing the range `from` to `to` (by index) with a\n  // node of the given type would leave the node's content valid.\n  canReplaceWith(from, to, type, marks) {\n    if (marks && !this.type.allowsMarks(marks)) return false\n    let start = this.contentMatchAt(from).matchType(type)\n    let end = start && start.matchFragment(this.content, to)\n    return end ? end.validEnd : false\n  }\n\n  // :: (Node) → bool\n  // Test whether the given node's content could be appended to this\n  // node. If that node is empty, this will only return true if there\n  // is at least one node type that can appear in both nodes (to avoid\n  // merging completely incompatible nodes).\n  canAppend(other) {\n    if (other.content.size) return this.canReplace(this.childCount, this.childCount, other.content)\n    else return this.type.compatibleContent(other.type)\n  }\n\n  // :: ()\n  // Check whether this node and its descendants conform to the\n  // schema, and raise error when they do not.\n  check() {\n    if (!this.type.validContent(this.content))\n      throw new RangeError(`Invalid content for node ${this.type.name}: ${this.content.toString().slice(0, 50)}`)\n    let copy = Mark.none\n    for (let i = 0; i < this.marks.length; i++) copy = this.marks[i].addToSet(copy)\n    if (!Mark.sameSet(copy, this.marks))\n      throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map(m => m.type.name)}`)\n    this.content.forEach(node => node.check())\n  }\n\n  // :: () → Object\n  // Return a JSON-serializeable representation of this node.\n  toJSON() {\n    let obj = {type: this.type.name}\n    for (let _ in this.attrs) {\n      obj.attrs = this.attrs\n      break\n    }\n    if (this.content.size)\n      obj.content = this.content.toJSON()\n    if (this.marks.length)\n      obj.marks = this.marks.map(n => n.toJSON())\n    return obj\n  }\n\n  // :: (Schema, Object) → Node\n  // Deserialize a node from its JSON representation.\n  static fromJSON(schema, json) {\n    if (!json) throw new RangeError(\"Invalid input for Node.fromJSON\")\n    let marks = null\n    if (json.marks) {\n      if (!Array.isArray(json.marks)) throw new RangeError(\"Invalid mark data for Node.fromJSON\")\n      marks = json.marks.map(schema.markFromJSON)\n    }\n    if (json.type == \"text\") {\n      if (typeof json.text != \"string\") throw new RangeError(\"Invalid text node in JSON\")\n      return schema.text(json.text, marks)\n    }\n    let content = Fragment.fromJSON(schema, json.content)\n    return schema.nodeType(json.type).create(json.attrs, content, marks)\n  }\n}\n\nexport class TextNode extends Node {\n  constructor(type, attrs, content, marks) {\n    super(type, attrs, null, marks)\n\n    if (!content) throw new RangeError(\"Empty text nodes are not allowed\")\n\n    this.text = content\n  }\n\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    return wrapMarks(this.marks, JSON.stringify(this.text))\n  }\n\n  get textContent() { return this.text }\n\n  textBetween(from, to) { return this.text.slice(from, to) }\n\n  get nodeSize() { return this.text.length }\n\n  mark(marks) {\n    return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks)\n  }\n\n  withText(text) {\n    if (text == this.text) return this\n    return new TextNode(this.type, this.attrs, text, this.marks)\n  }\n\n  cut(from = 0, to = this.text.length) {\n    if (from == 0 && to == this.text.length) return this\n    return this.withText(this.text.slice(from, to))\n  }\n\n  eq(other) {\n    return this.sameMarkup(other) && this.text == other.text\n  }\n\n  toJSON() {\n    let base = super.toJSON()\n    base.text = this.text\n    return base\n  }\n}\n\nfunction wrapMarks(marks, str) {\n  for (let i = marks.length - 1; i >= 0; i--)\n    str = marks[i].type.name + \"(\" + str + \")\"\n  return str\n}\n","import {Fragment} from \"./fragment\"\n\n// ::- Instances of this class represent a match state of a node\n// type's [content expression](#model.NodeSpec.content), and can be\n// used to find out whether further content matches here, and whether\n// a given position is a valid end of the node.\nexport class ContentMatch {\n  constructor(validEnd) {\n    // :: bool\n    // True when this match state represents a valid end of the node.\n    this.validEnd = validEnd\n    this.next = []\n    this.wrapCache = []\n  }\n\n  static parse(string, nodeTypes) {\n    let stream = new TokenStream(string, nodeTypes)\n    if (stream.next == null) return ContentMatch.empty\n    let expr = parseExpr(stream)\n    if (stream.next) stream.err(\"Unexpected trailing text\")\n    let match = dfa(nfa(expr))\n    checkForDeadEnds(match, stream)\n    return match\n  }\n\n  // :: (NodeType) → ?ContentMatch\n  // Match a node type, returning a match after that node if\n  // successful.\n  matchType(type) {\n    for (let i = 0; i < this.next.length; i += 2)\n      if (this.next[i] == type) return this.next[i + 1]\n    return null\n  }\n\n  // :: (Fragment, ?number, ?number) → ?ContentMatch\n  // Try to match a fragment. Returns the resulting match when\n  // successful.\n  matchFragment(frag, start = 0, end = frag.childCount) {\n    let cur = this\n    for (let i = start; cur && i < end; i++)\n      cur = cur.matchType(frag.child(i).type)\n    return cur\n  }\n\n  get inlineContent() {\n    let first = this.next[0]\n    return first ? first.isInline : false\n  }\n\n  // :: ?NodeType\n  // Get the first matching node type at this match position that can\n  // be generated.\n  get defaultType() {\n    for (let i = 0; i < this.next.length; i += 2) {\n      let type = this.next[i]\n      if (!(type.isText || type.hasRequiredAttrs())) return type\n    }\n  }\n\n  compatible(other) {\n    for (let i = 0; i < this.next.length; i += 2)\n      for (let j = 0; j < other.next.length; j += 2)\n        if (this.next[i] == other.next[j]) return true\n    return false\n  }\n\n  // :: (Fragment, bool, ?number) → ?Fragment\n  // Try to match the given fragment, and if that fails, see if it can\n  // be made to match by inserting nodes in front of it. When\n  // successful, return a fragment of inserted nodes (which may be\n  // empty if nothing had to be inserted). When `toEnd` is true, only\n  // return a fragment if the resulting match goes to the end of the\n  // content expression.\n  fillBefore(after, toEnd = false, startIndex = 0) {\n    let seen = [this]\n    function search(match, types) {\n      let finished = match.matchFragment(after, startIndex)\n      if (finished && (!toEnd || finished.validEnd))\n        return Fragment.from(types.map(tp => tp.createAndFill()))\n\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i], next = match.next[i + 1]\n        if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {\n          seen.push(next)\n          let found = search(next, types.concat(type))\n          if (found) return found\n        }\n      }\n    }\n\n    return search(this, [])\n  }\n\n  // :: (NodeType) → ?[NodeType]\n  // Find a set of wrapping node types that would allow a node of the\n  // given type to appear at this position. The result may be empty\n  // (when it fits directly) and will be null when no such wrapping\n  // exists.\n  findWrapping(target) {\n    for (let i = 0; i < this.wrapCache.length; i += 2)\n      if (this.wrapCache[i] == target) return this.wrapCache[i + 1]\n    let computed = this.computeWrapping(target)\n    this.wrapCache.push(target, computed)\n    return computed\n  }\n\n  computeWrapping(target) {\n    let seen = Object.create(null), active = [{match: this, type: null, via: null}]\n    while (active.length) {\n      let current = active.shift(), match = current.match\n      if (match.matchType(target)) {\n        let result = []\n        for (let obj = current; obj.type; obj = obj.via)\n          result.push(obj.type)\n        return result.reverse()\n      }\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i]\n        if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || match.next[i + 1].validEnd)) {\n          active.push({match: type.contentMatch, type, via: current})\n          seen[type.name] = true\n        }\n      }\n    }\n  }\n\n  // :: number\n  // The number of outgoing edges this node has in the finite\n  // automaton that describes the content expression.\n  get edgeCount() {\n    return this.next.length >> 1\n  }\n\n  // :: (number) → {type: NodeType, next: ContentMatch}\n  // Get the _n_​th outgoing edge from this node in the finite\n  // automaton that describes the content expression.\n  edge(n) {\n    let i = n << 1\n    if (i >= this.next.length) throw new RangeError(`There's no ${n}th edge in this content match`)\n    return {type: this.next[i], next: this.next[i + 1]}\n  }\n\n  toString() {\n    let seen = []\n    function scan(m) {\n      seen.push(m)\n      for (let i = 1; i < m.next.length; i += 2)\n        if (seen.indexOf(m.next[i]) == -1) scan(m.next[i])\n    }\n    scan(this)\n    return seen.map((m, i) => {\n      let out = i + (m.validEnd ? \"*\" : \" \") + \" \"\n      for (let i = 0; i < m.next.length; i += 2)\n        out += (i ? \", \" : \"\") + m.next[i].name + \"->\" + seen.indexOf(m.next[i + 1])\n      return out\n    }).join(\"\\n\")\n  }\n}\n\nContentMatch.empty = new ContentMatch(true)\n\nclass TokenStream {\n  constructor(string, nodeTypes) {\n    this.string = string\n    this.nodeTypes = nodeTypes\n    this.inline = null\n    this.pos = 0\n    this.tokens = string.split(/\\s*(?=\\b|\\W|$)/)\n    if (this.tokens[this.tokens.length - 1] == \"\") this.tokens.pop()\n    if (this.tokens[0] == \"\") this.tokens.shift()\n  }\n\n  get next() { return this.tokens[this.pos] }\n\n  eat(tok) { return this.next == tok && (this.pos++ || true) }\n\n  err(str) { throw new SyntaxError(str + \" (in content expression '\" + this.string + \"')\") }\n}\n\nfunction parseExpr(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSeq(stream)) }\n  while (stream.eat(\"|\"))\n  return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n}\n\nfunction parseExprSeq(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSubscript(stream)) }\n  while (stream.next && stream.next != \")\" && stream.next != \"|\")\n  return exprs.length == 1 ? exprs[0] : {type: \"seq\", exprs}\n}\n\nfunction parseExprSubscript(stream) {\n  let expr = parseExprAtom(stream)\n  for (;;) {\n    if (stream.eat(\"+\"))\n      expr = {type: \"plus\", expr}\n    else if (stream.eat(\"*\"))\n      expr = {type: \"star\", expr}\n    else if (stream.eat(\"?\"))\n      expr = {type: \"opt\", expr}\n    else if (stream.eat(\"{\"))\n      expr = parseExprRange(stream, expr)\n    else break\n  }\n  return expr\n}\n\nfunction parseNum(stream) {\n  if (/\\D/.test(stream.next)) stream.err(\"Expected number, got '\" + stream.next + \"'\")\n  let result = Number(stream.next)\n  stream.pos++\n  return result\n}\n\nfunction parseExprRange(stream, expr) {\n  let min = parseNum(stream), max = min\n  if (stream.eat(\",\")) {\n    if (stream.next != \"}\") max = parseNum(stream)\n    else max = -1\n  }\n  if (!stream.eat(\"}\")) stream.err(\"Unclosed braced range\")\n  return {type: \"range\", min, max, expr}\n}\n\nfunction resolveName(stream, name) {\n  let types = stream.nodeTypes, type = types[name]\n  if (type) return [type]\n  let result = []\n  for (let typeName in types) {\n    let type = types[typeName]\n    if (type.groups.indexOf(name) > -1) result.push(type)\n  }\n  if (result.length == 0) stream.err(\"No node type or group '\" + name + \"' found\")\n  return result\n}\n\nfunction parseExprAtom(stream) {\n  if (stream.eat(\"(\")) {\n    let expr = parseExpr(stream)\n    if (!stream.eat(\")\")) stream.err(\"Missing closing paren\")\n    return expr\n  } else if (!/\\W/.test(stream.next)) {\n    let exprs = resolveName(stream, stream.next).map(type => {\n      if (stream.inline == null) stream.inline = type.isInline\n      else if (stream.inline != type.isInline) stream.err(\"Mixing inline and block content\")\n      return {type: \"name\", value: type}\n    })\n    stream.pos++\n    return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n  } else {\n    stream.err(\"Unexpected token '\" + stream.next + \"'\")\n  }\n}\n\n// The code below helps compile a regular-expression-like language\n// into a deterministic finite automaton. For a good introduction to\n// these concepts, see https://swtch.com/~rsc/regexp/regexp1.html\n\n// : (Object) → [[{term: ?any, to: number}]]\n// Construct an NFA from an expression as returned by the parser. The\n// NFA is represented as an array of states, which are themselves\n// arrays of edges, which are `{term, to}` objects. The first state is\n// the entry state and the last node is the success state.\n//\n// Note that unlike typical NFAs, the edge ordering in this one is\n// significant, in that it is used to contruct filler content when\n// necessary.\nfunction nfa(expr) {\n  let nfa = [[]]\n  connect(compile(expr, 0), node())\n  return nfa\n\n  function node() { return nfa.push([]) - 1 }\n  function edge(from, to, term) {\n    let edge = {term, to}\n    nfa[from].push(edge)\n    return edge\n  }\n  function connect(edges, to) { edges.forEach(edge => edge.to = to) }\n\n  function compile(expr, from) {\n    if (expr.type == \"choice\") {\n      return expr.exprs.reduce((out, expr) => out.concat(compile(expr, from)), [])\n    } else if (expr.type == \"seq\") {\n      for (let i = 0;; i++) {\n        let next = compile(expr.exprs[i], from)\n        if (i == expr.exprs.length - 1) return next\n        connect(next, from = node())\n      }\n    } else if (expr.type == \"star\") {\n      let loop = node()\n      edge(from, loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"plus\") {\n      let loop = node()\n      connect(compile(expr.expr, from), loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"opt\") {\n      return [edge(from)].concat(compile(expr.expr, from))\n    } else if (expr.type == \"range\") {\n      let cur = from\n      for (let i = 0; i < expr.min; i++) {\n        let next = node()\n        connect(compile(expr.expr, cur), next)\n        cur = next\n      }\n      if (expr.max == -1) {\n        connect(compile(expr.expr, cur), cur)\n      } else {\n        for (let i = expr.min; i < expr.max; i++) {\n          let next = node()\n          edge(cur, next)\n          connect(compile(expr.expr, cur), next)\n          cur = next\n        }\n      }\n      return [edge(cur)]\n    } else if (expr.type == \"name\") {\n      return [edge(from, null, expr.value)]\n    }\n  }\n}\n\nfunction cmp(a, b) { return b - a }\n\n// Get the set of nodes reachable by null edges from `node`. Omit\n// nodes with only a single null-out-edge, since they may lead to\n// needless duplicated nodes.\nfunction nullFrom(nfa, node) {\n  let result = []\n  scan(node)\n  return result.sort(cmp)\n\n  function scan(node) {\n    let edges = nfa[node]\n    if (edges.length == 1 && !edges[0].term) return scan(edges[0].to)\n    result.push(node)\n    for (let i = 0; i < edges.length; i++) {\n      let {term, to} = edges[i]\n      if (!term && result.indexOf(to) == -1) scan(to)\n    }\n  }\n}\n\n// : ([[{term: ?any, to: number}]]) → ContentMatch\n// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set\n// of state objects (`ContentMatch` instances) with transitions\n// between them.\nfunction dfa(nfa) {\n  let labeled = Object.create(null)\n  return explore(nullFrom(nfa, 0))\n\n  function explore(states) {\n    let out = []\n    states.forEach(node => {\n      nfa[node].forEach(({term, to}) => {\n        if (!term) return\n        let known = out.indexOf(term), set = known > -1 && out[known + 1]\n        nullFrom(nfa, to).forEach(node => {\n          if (!set) out.push(term, set = [])\n          if (set.indexOf(node) == -1) set.push(node)\n        })\n      })\n    })\n    let state = labeled[states.join(\",\")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1)\n    for (let i = 0; i < out.length; i += 2) {\n      let states = out[i + 1].sort(cmp)\n      state.next.push(out[i], labeled[states.join(\",\")] || explore(states))\n    }\n    return state\n  }\n}\n\nfunction checkForDeadEnds(match, stream) {\n  for (let i = 0, work = [match]; i < work.length; i++) {\n    let state = work[i], dead = !state.validEnd, nodes = []\n    for (let j = 0; j < state.next.length; j += 2) {\n      let node = state.next[j], next = state.next[j + 1]\n      nodes.push(node.name)\n      if (dead && !(node.isText || node.hasRequiredAttrs())) dead = false\n      if (work.indexOf(next) == -1) work.push(next)\n    }\n    if (dead) stream.err(\"Only non-generatable nodes (\" + nodes.join(\", \") + \") in a required position (see https://prosemirror.net/docs/guide/#generatable)\")\n  }\n}\n","import OrderedMap from \"orderedmap\"\n\nimport {Node, TextNode} from \"./node\"\nimport {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {ContentMatch} from \"./content\"\n\n// For node types where all attrs have a default value (or which don't\n// have any attributes), build up a single reusable default attribute\n// object, and use it for all nodes that don't specify specific\n// attributes.\nfunction defaultAttrs(attrs) {\n  let defaults = Object.create(null)\n  for (let attrName in attrs) {\n    let attr = attrs[attrName]\n    if (!attr.hasDefault) return null\n    defaults[attrName] = attr.default\n  }\n  return defaults\n}\n\nfunction computeAttrs(attrs, value) {\n  let built = Object.create(null)\n  for (let name in attrs) {\n    let given = value && value[name]\n    if (given === undefined) {\n      let attr = attrs[name]\n      if (attr.hasDefault) given = attr.default\n      else throw new RangeError(\"No value supplied for attribute \" + name)\n    }\n    built[name] = given\n  }\n  return built\n}\n\nfunction initAttrs(attrs) {\n  let result = Object.create(null)\n  if (attrs) for (let name in attrs) result[name] = new Attribute(attrs[name])\n  return result\n}\n\n// ::- Node types are objects allocated once per `Schema` and used to\n// [tag](#model.Node.type) `Node` instances. They contain information\n// about the node type, such as its name and what kind of node it\n// represents.\nexport class NodeType {\n  constructor(name, schema, spec) {\n    // :: string\n    // The name the node type has in this schema.\n    this.name = name\n\n    // :: Schema\n    // A link back to the `Schema` the node type belongs to.\n    this.schema = schema\n\n    // :: NodeSpec\n    // The spec that this type is based on\n    this.spec = spec\n\n    this.groups = spec.group ? spec.group.split(\" \") : []\n    this.attrs = initAttrs(spec.attrs)\n\n    this.defaultAttrs = defaultAttrs(this.attrs)\n\n    // :: ContentMatch\n    // The starting match of the node type's content expression.\n    this.contentMatch = null\n\n    // : ?[MarkType]\n    // The set of marks allowed in this node. `null` means all marks\n    // are allowed.\n    this.markSet = null\n\n    // :: bool\n    // True if this node type has inline content.\n    this.inlineContent = null\n\n    // :: bool\n    // True if this is a block type\n    this.isBlock = !(spec.inline || name == \"text\")\n\n    // :: bool\n    // True if this is the text node type.\n    this.isText = name == \"text\"\n  }\n\n  // :: bool\n  // True if this is an inline type.\n  get isInline() { return !this.isBlock }\n\n  // :: bool\n  // True if this is a textblock type, a block that contains inline\n  // content.\n  get isTextblock() { return this.isBlock && this.inlineContent }\n\n  // :: bool\n  // True for node types that allow no content.\n  get isLeaf() { return this.contentMatch == ContentMatch.empty }\n\n  // :: bool\n  // True when this node is an atom, i.e. when it does not have\n  // directly editable content.\n  get isAtom() { return this.isLeaf || this.spec.atom }\n\n  // :: () → bool\n  // Tells you whether this node type has any required attributes.\n  hasRequiredAttrs() {\n    for (let n in this.attrs) if (this.attrs[n].isRequired) return true\n    return false\n  }\n\n  compatibleContent(other) {\n    return this == other || this.contentMatch.compatible(other.contentMatch)\n  }\n\n  computeAttrs(attrs) {\n    if (!attrs && this.defaultAttrs) return this.defaultAttrs\n    else return computeAttrs(this.attrs, attrs)\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Create a `Node` of this type. The given attributes are\n  // checked and defaulted (you can pass `null` to use the type's\n  // defaults entirely, if no required attributes exist). `content`\n  // may be a `Fragment`, a node, an array of nodes, or\n  // `null`. Similarly `marks` may be `null` to default to the empty\n  // set of marks.\n  create(attrs, content, marks) {\n    if (this.isText) throw new Error(\"NodeType.create can't construct text nodes\")\n    return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Like [`create`](#model.NodeType.create), but check the given content\n  // against the node type's content restrictions, and throw an error\n  // if it doesn't match.\n  createChecked(attrs, content, marks) {\n    content = Fragment.from(content)\n    if (!this.validContent(content))\n      throw new RangeError(\"Invalid content for node \" + this.name)\n    return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → ?Node\n  // Like [`create`](#model.NodeType.create), but see if it is necessary to\n  // add nodes to the start or end of the given fragment to make it\n  // fit the node. If no fitting wrapping can be found, return null.\n  // Note that, due to the fact that required nodes can always be\n  // created, this will always succeed if you pass null or\n  // `Fragment.empty` as content.\n  createAndFill(attrs, content, marks) {\n    attrs = this.computeAttrs(attrs)\n    content = Fragment.from(content)\n    if (content.size) {\n      let before = this.contentMatch.fillBefore(content)\n      if (!before) return null\n      content = before.append(content)\n    }\n    let after = this.contentMatch.matchFragment(content).fillBefore(Fragment.empty, true)\n    if (!after) return null\n    return new Node(this, attrs, content.append(after), Mark.setFrom(marks))\n  }\n\n  // :: (Fragment) → bool\n  // Returns true if the given fragment is valid content for this node\n  // type with the given attributes.\n  validContent(content) {\n    let result = this.contentMatch.matchFragment(content)\n    if (!result || !result.validEnd) return false\n    for (let i = 0; i < content.childCount; i++)\n      if (!this.allowsMarks(content.child(i).marks)) return false\n    return true\n  }\n\n  // :: (MarkType) → bool\n  // Check whether the given mark type is allowed in this node.\n  allowsMarkType(markType) {\n    return this.markSet == null || this.markSet.indexOf(markType) > -1\n  }\n\n  // :: ([Mark]) → bool\n  // Test whether the given set of marks are allowed in this node.\n  allowsMarks(marks) {\n    if (this.markSet == null) return true\n    for (let i = 0; i < marks.length; i++) if (!this.allowsMarkType(marks[i].type)) return false\n    return true\n  }\n\n  // :: ([Mark]) → [Mark]\n  // Removes the marks that are not allowed in this node from the given set.\n  allowedMarks(marks) {\n    if (this.markSet == null) return marks\n    let copy\n    for (let i = 0; i < marks.length; i++) {\n      if (!this.allowsMarkType(marks[i].type)) {\n        if (!copy) copy = marks.slice(0, i)\n      } else if (copy) {\n        copy.push(marks[i])\n      }\n    }\n    return !copy ? marks : copy.length ? copy : Mark.empty\n  }\n\n  static compile(nodes, schema) {\n    let result = Object.create(null)\n    nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec))\n\n    let topType = schema.spec.topNode || \"doc\"\n    if (!result[topType]) throw new RangeError(\"Schema is missing its top node type ('\" + topType + \"')\")\n    if (!result.text) throw new RangeError(\"Every schema needs a 'text' type\")\n    for (let _ in result.text.attrs) throw new RangeError(\"The text node type should not have attributes\")\n\n    return result\n  }\n}\n\n// Attribute descriptors\n\nclass Attribute {\n  constructor(options) {\n    this.hasDefault = Object.prototype.hasOwnProperty.call(options, \"default\")\n    this.default = options.default\n  }\n\n  get isRequired() {\n    return !this.hasDefault\n  }\n}\n\n// Marks\n\n// ::- Like nodes, marks (which are associated with nodes to signify\n// things like emphasis or being part of a link) are\n// [tagged](#model.Mark.type) with type objects, which are\n// instantiated once per `Schema`.\nexport class MarkType {\n  constructor(name, rank, schema, spec) {\n    // :: string\n    // The name of the mark type.\n    this.name = name\n\n    // :: Schema\n    // The schema that this mark type instance is part of.\n    this.schema = schema\n\n    // :: MarkSpec\n    // The spec on which the type is based.\n    this.spec = spec\n\n    this.attrs = initAttrs(spec.attrs)\n\n    this.rank = rank\n    this.excluded = null\n    let defaults = defaultAttrs(this.attrs)\n    this.instance = defaults && new Mark(this, defaults)\n  }\n\n  // :: (?Object) → Mark\n  // Create a mark of this type. `attrs` may be `null` or an object\n  // containing only some of the mark's attributes. The others, if\n  // they have defaults, will be added.\n  create(attrs) {\n    if (!attrs && this.instance) return this.instance\n    return new Mark(this, computeAttrs(this.attrs, attrs))\n  }\n\n  static compile(marks, schema) {\n    let result = Object.create(null), rank = 0\n    marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec))\n    return result\n  }\n\n  // :: ([Mark]) → [Mark]\n  // When there is a mark of this type in the given set, a new set\n  // without it is returned. Otherwise, the input set is returned.\n  removeFromSet(set) {\n    for (var i = 0; i < set.length; i++) if (set[i].type == this) {\n      set = set.slice(0, i).concat(set.slice(i + 1))\n      i--\n    }\n    return set\n  }\n\n  // :: ([Mark]) → ?Mark\n  // Tests whether there is a mark of this type in the given set.\n  isInSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (set[i].type == this) return set[i]\n  }\n\n  // :: (MarkType) → bool\n  // Queries whether a given mark type is\n  // [excluded](#model.MarkSpec.excludes) by this one.\n  excludes(other) {\n    return this.excluded.indexOf(other) > -1\n  }\n}\n\n// SchemaSpec:: interface\n// An object describing a schema, as passed to the [`Schema`](#model.Schema)\n// constructor.\n//\n//   nodes:: union<Object<NodeSpec>, OrderedMap<NodeSpec>>\n//   The node types in this schema. Maps names to\n//   [`NodeSpec`](#model.NodeSpec) objects that describe the node type\n//   associated with that name. Their order is significant—it\n//   determines which [parse rules](#model.NodeSpec.parseDOM) take\n//   precedence by default, and which nodes come first in a given\n//   [group](#model.NodeSpec.group).\n//\n//   marks:: ?union<Object<MarkSpec>, OrderedMap<MarkSpec>>\n//   The mark types that exist in this schema. The order in which they\n//   are provided determines the order in which [mark\n//   sets](#model.Mark.addToSet) are sorted and in which [parse\n//   rules](#model.MarkSpec.parseDOM) are tried.\n//\n//   topNode:: ?string\n//   The name of the default top-level node for the schema. Defaults\n//   to `\"doc\"`.\n\n// NodeSpec:: interface\n//\n//   content:: ?string\n//   The content expression for this node, as described in the [schema\n//   guide](/docs/guide/#schema.content_expressions). When not given,\n//   the node does not allow any content.\n//\n//   marks:: ?string\n//   The marks that are allowed inside of this node. May be a\n//   space-separated string referring to mark names or groups, `\"_\"`\n//   to explicitly allow all marks, or `\"\"` to disallow marks. When\n//   not given, nodes with inline content default to allowing all\n//   marks, other nodes default to not allowing marks.\n//\n//   group:: ?string\n//   The group or space-separated groups to which this node belongs,\n//   which can be referred to in the content expressions for the\n//   schema.\n//\n//   inline:: ?bool\n//   Should be set to true for inline nodes. (Implied for text nodes.)\n//\n//   atom:: ?bool\n//   Can be set to true to indicate that, though this isn't a [leaf\n//   node](#model.NodeType.isLeaf), it doesn't have directly editable\n//   content and should be treated as a single unit in the view.\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that nodes of this type get.\n//\n//   selectable:: ?bool\n//   Controls whether nodes of this type can be selected as a [node\n//   selection](#state.NodeSelection). Defaults to true for non-text\n//   nodes.\n//\n//   draggable:: ?bool\n//   Determines whether nodes of this type can be dragged without\n//   being selected. Defaults to false.\n//\n//   code:: ?bool\n//   Can be used to indicate that this node contains code, which\n//   causes some commands to behave differently.\n//\n//   defining:: ?bool\n//   Determines whether this node is considered an important parent\n//   node during replace operations (such as paste). Non-defining (the\n//   default) nodes get dropped when their entire content is replaced,\n//   whereas defining nodes persist and wrap the inserted content.\n//   Likewise, in _inserted_ content the defining parents of the\n//   content are preserved when possible. Typically,\n//   non-default-paragraph textblock types, and possibly list items,\n//   are marked as defining.\n//\n//   isolating:: ?bool\n//   When enabled (default is false), the sides of nodes of this type\n//   count as boundaries that regular editing operations, like\n//   backspacing or lifting, won't cross. An example of a node that\n//   should probably have this enabled is a table cell.\n//\n//   toDOM:: ?(node: Node) → DOMOutputSpec\n//   Defines the default way a node of this type should be serialized\n//   to DOM/HTML (as used by\n//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)).\n//   Should return a DOM node or an [array\n//   structure](#model.DOMOutputSpec) that describes one, with an\n//   optional number zero (“hole”) in it to indicate where the node's\n//   content should be inserted.\n//\n//   For text nodes, the default is to create a text DOM node. Though\n//   it is possible to create a serializer where text is rendered\n//   differently, this is not supported inside the editor, so you\n//   shouldn't override that in your text node spec.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this node, which can be\n//   used by [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) to\n//   automatically derive a parser. The `node` field in the rules is\n//   implied (the name of this node will be filled in automatically).\n//   If you supply your own parser, you do not need to also specify\n//   parsing rules in your schema.\n//\n//   toDebugString:: ?(node: Node) -> string\n//   Defines the default way a node of this type should be serialized\n//   to a string representation for debugging (e.g. in error messages).\n\n// MarkSpec:: interface\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that marks of this type get.\n//\n//   inclusive:: ?bool\n//   Whether this mark should be active when the cursor is positioned\n//   at its end (or at its start when that is also the start of the\n//   parent node). Defaults to true.\n//\n//   excludes:: ?string\n//   Determines which other marks this mark can coexist with. Should\n//   be a space-separated strings naming other marks or groups of marks.\n//   When a mark is [added](#model.Mark.addToSet) to a set, all marks\n//   that it excludes are removed in the process. If the set contains\n//   any mark that excludes the new mark but is not, itself, excluded\n//   by the new mark, the mark can not be added an the set. You can\n//   use the value `\"_\"` to indicate that the mark excludes all\n//   marks in the schema.\n//\n//   Defaults to only being exclusive with marks of the same type. You\n//   can set it to an empty string (or any string not containing the\n//   mark's own name) to allow multiple marks of a given type to\n//   coexist (as long as they have different attributes).\n//\n//   group:: ?string\n//   The group or space-separated groups to which this mark belongs.\n//\n//   spanning:: ?bool\n//   Determines whether marks of this type can span multiple adjacent\n//   nodes when serialized to DOM/HTML. Defaults to true.\n//\n//   toDOM:: ?(mark: Mark, inline: bool) → DOMOutputSpec\n//   Defines the default way marks of this type should be serialized\n//   to DOM/HTML. When the resulting spec contains a hole, that is\n//   where the marked content is placed. Otherwise, it is appended to\n//   the top node.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this mark (see the\n//   corresponding [node spec field](#model.NodeSpec.parseDOM)). The\n//   `mark` field in the rules is implied.\n\n// AttributeSpec:: interface\n//\n// Used to [define](#model.NodeSpec.attrs) attributes on nodes or\n// marks.\n//\n//   default:: ?any\n//   The default value for this attribute, to use when no explicit\n//   value is provided. Attributes that have no default must be\n//   provided whenever a node or mark of a type that has them is\n//   created.\n\n// ::- A document schema. Holds [node](#model.NodeType) and [mark\n// type](#model.MarkType) objects for the nodes and marks that may\n// occur in conforming documents, and provides functionality for\n// creating and deserializing such documents.\nexport class Schema {\n  // :: (SchemaSpec)\n  // Construct a schema from a schema [specification](#model.SchemaSpec).\n  constructor(spec) {\n    // :: SchemaSpec\n    // The [spec](#model.SchemaSpec) on which the schema is based,\n    // with the added guarantee that its `nodes` and `marks`\n    // properties are\n    // [`OrderedMap`](https://github.com/marijnh/orderedmap) instances\n    // (not raw objects).\n    this.spec = {}\n    for (let prop in spec) this.spec[prop] = spec[prop]\n    this.spec.nodes = OrderedMap.from(spec.nodes)\n    this.spec.marks = OrderedMap.from(spec.marks)\n\n    // :: Object<NodeType>\n    // An object mapping the schema's node names to node type objects.\n    this.nodes = NodeType.compile(this.spec.nodes, this)\n\n    // :: Object<MarkType>\n    // A map from mark names to mark type objects.\n    this.marks = MarkType.compile(this.spec.marks, this)\n\n    let contentExprCache = Object.create(null)\n    for (let prop in this.nodes) {\n      if (prop in this.marks)\n        throw new RangeError(prop + \" can not be both a node and a mark\")\n      let type = this.nodes[prop], contentExpr = type.spec.content || \"\", markExpr = type.spec.marks\n      type.contentMatch = contentExprCache[contentExpr] ||\n        (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes))\n      type.inlineContent = type.contentMatch.inlineContent\n      type.markSet = markExpr == \"_\" ? null :\n        markExpr ? gatherMarks(this, markExpr.split(\" \")) :\n        markExpr == \"\" || !type.inlineContent ? [] : null\n    }\n    for (let prop in this.marks) {\n      let type = this.marks[prop], excl = type.spec.excludes\n      type.excluded = excl == null ? [type] : excl == \"\" ? [] : gatherMarks(this, excl.split(\" \"))\n    }\n\n    this.nodeFromJSON = this.nodeFromJSON.bind(this)\n    this.markFromJSON = this.markFromJSON.bind(this)\n\n    // :: NodeType\n    // The type of the [default top node](#model.SchemaSpec.topNode)\n    // for this schema.\n    this.topNodeType = this.nodes[this.spec.topNode || \"doc\"]\n\n    // :: Object\n    // An object for storing whatever values modules may want to\n    // compute and cache per schema. (If you want to store something\n    // in it, try to use property names unlikely to clash.)\n    this.cached = Object.create(null)\n    this.cached.wrappings = Object.create(null)\n  }\n\n  // :: (union<string, NodeType>, ?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Create a node in this schema. The `type` may be a string or a\n  // `NodeType` instance. Attributes will be extended\n  // with defaults, `content` may be a `Fragment`,\n  // `null`, a `Node`, or an array of nodes.\n  node(type, attrs, content, marks) {\n    if (typeof type == \"string\")\n      type = this.nodeType(type)\n    else if (!(type instanceof NodeType))\n      throw new RangeError(\"Invalid node type: \" + type)\n    else if (type.schema != this)\n      throw new RangeError(\"Node type from different schema used (\" + type.name + \")\")\n\n    return type.createChecked(attrs, content, marks)\n  }\n\n  // :: (string, ?[Mark]) → Node\n  // Create a text node in the schema. Empty text nodes are not\n  // allowed.\n  text(text, marks) {\n    let type = this.nodes.text\n    return new TextNode(type, type.defaultAttrs, text, Mark.setFrom(marks))\n  }\n\n  // :: (union<string, MarkType>, ?Object) → Mark\n  // Create a mark with the given type and attributes.\n  mark(type, attrs) {\n    if (typeof type == \"string\") type = this.marks[type]\n    return type.create(attrs)\n  }\n\n  // :: (Object) → Node\n  // Deserialize a node from its JSON representation. This method is\n  // bound.\n  nodeFromJSON(json) {\n    return Node.fromJSON(this, json)\n  }\n\n  // :: (Object) → Mark\n  // Deserialize a mark from its JSON representation. This method is\n  // bound.\n  markFromJSON(json) {\n    return Mark.fromJSON(this, json)\n  }\n\n  nodeType(name) {\n    let found = this.nodes[name]\n    if (!found) throw new RangeError(\"Unknown node type: \" + name)\n    return found\n  }\n}\n\nfunction gatherMarks(schema, marks) {\n  let found = []\n  for (let i = 0; i < marks.length; i++) {\n    let name = marks[i], mark = schema.marks[name], ok = mark\n    if (mark) {\n      found.push(mark)\n    } else {\n      for (let prop in schema.marks) {\n        let mark = schema.marks[prop]\n        if (name == \"_\" || (mark.spec.group && mark.spec.group.split(\" \").indexOf(name) > -1))\n          found.push(ok = mark)\n      }\n    }\n    if (!ok) throw new SyntaxError(\"Unknown mark type: '\" + marks[i] + \"'\")\n  }\n  return found\n}\n","import {Fragment} from \"./fragment\"\nimport {Slice} from \"./replace\"\nimport {Mark} from \"./mark\"\n\n// ParseOptions:: interface\n// These are the options recognized by the\n// [`parse`](#model.DOMParser.parse) and\n// [`parseSlice`](#model.DOMParser.parseSlice) methods.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   By default, whitespace is collapsed as per HTML's rules. Pass\n//   `true` to preserve whitespace, but normalize newlines to\n//   spaces, and `\"full\"` to preserve whitespace entirely.\n//\n//   findPositions:: ?[{node: dom.Node, offset: number}]\n//   When given, the parser will, beside parsing the content,\n//   record the document positions of the given DOM positions. It\n//   will do so by writing to the objects, adding a `pos` property\n//   that holds the document position. DOM positions that are not\n//   in the parsed content will not be written to.\n//\n//   from:: ?number\n//   The child node index to start parsing from.\n//\n//   to:: ?number\n//   The child node index to stop parsing at.\n//\n//   topNode:: ?Node\n//   By default, the content is parsed into the schema's default\n//   [top node type](#model.Schema.topNodeType). You can pass this\n//   option to use the type and attributes from a different node\n//   as the top container.\n//\n//   topMatch:: ?ContentMatch\n//   Provide the starting content match that content parsed into the\n//   top node is matched against.\n//\n//   context:: ?ResolvedPos\n//   A set of additional nodes to count as\n//   [context](#model.ParseRule.context) when parsing, above the\n//   given [top node](#model.ParseOptions.topNode).\n\n// ParseRule:: interface\n// A value that describes how to parse a given DOM node or inline\n// style as a ProseMirror node or mark.\n//\n//   tag:: ?string\n//   A CSS selector describing the kind of DOM elements to match. A\n//   single rule should have _either_ a `tag` or a `style` property.\n//\n//   namespace:: ?string\n//   The namespace to match. This should be used with `tag`.\n//   Nodes are only matched when the namespace matches or this property\n//   is null.\n//\n//   style:: ?string\n//   A CSS property name to match. When given, this rule matches\n//   inline styles that list that property. May also have the form\n//   `\"property=value\"`, in which case the rule only matches if the\n//   property's value exactly matches the given value. (For more\n//   complicated filters, use [`getAttrs`](#model.ParseRule.getAttrs)\n//   and return false to indicate that the match failed.) Rules\n//   matching styles may only produce [marks](#model.ParseRule.mark),\n//   not nodes.\n//\n//   priority:: ?number\n//   Can be used to change the order in which the parse rules in a\n//   schema are tried. Those with higher priority come first. Rules\n//   without a priority are counted as having priority 50. This\n//   property is only meaningful in a schema—when directly\n//   constructing a parser, the order of the rule array is used.\n//\n//   consuming:: ?boolean\n//   By default, when a rule matches an element or style, no further\n//   rules get a chance to match it. By setting this to `false`, you\n//   indicate that even when this rule matches, other rules that come\n//   after it should also run.\n//\n//   context:: ?string\n//   When given, restricts this rule to only match when the current\n//   context—the parent nodes into which the content is being\n//   parsed—matches this expression. Should contain one or more node\n//   names or node group names followed by single or double slashes.\n//   For example `\"paragraph/\"` means the rule only matches when the\n//   parent node is a paragraph, `\"blockquote/paragraph/\"` restricts\n//   it to be in a paragraph that is inside a blockquote, and\n//   `\"section//\"` matches any position inside a section—a double\n//   slash matches any sequence of ancestor nodes. To allow multiple\n//   different contexts, they can be separated by a pipe (`|`)\n//   character, as in `\"blockquote/|list_item/\"`.\n//\n//   node:: ?string\n//   The name of the node type to create when this rule matches. Only\n//   valid for rules with a `tag` property, not for style rules. Each\n//   rule should have one of a `node`, `mark`, or `ignore` property\n//   (except when it appears in a [node](#model.NodeSpec.parseDOM) or\n//   [mark spec](#model.MarkSpec.parseDOM), in which case the `node`\n//   or `mark` property will be derived from its position).\n//\n//   mark:: ?string\n//   The name of the mark type to wrap the matched content in.\n//\n//   ignore:: ?bool\n//   When true, ignore content that matches this rule.\n//\n//   closeParent:: ?bool\n//   When true, finding an element that matches this rule will close\n//   the current node.\n//\n//   skip:: ?bool\n//   When true, ignore the node that matches this rule, but do parse\n//   its content.\n//\n//   attrs:: ?Object\n//   Attributes for the node or mark created by this rule. When\n//   `getAttrs` is provided, it takes precedence.\n//\n//   getAttrs:: ?(union<dom.Node, string>) → ?union<Object, false>\n//   A function used to compute the attributes for the node or mark\n//   created by this rule. Can also be used to describe further\n//   conditions the DOM element or style must match. When it returns\n//   `false`, the rule won't match. When it returns null or undefined,\n//   that is interpreted as an empty/default set of attributes.\n//\n//   Called with a DOM Element for `tag` rules, and with a string (the\n//   style's value) for `style` rules.\n//\n//   contentElement:: ?union<string, (dom.Node) → dom.Node>\n//   For `tag` rules that produce non-leaf nodes or marks, by default\n//   the content of the DOM element is parsed as content of the mark\n//   or node. If the child nodes are in a descendent node, this may be\n//   a CSS selector string that the parser must use to find the actual\n//   content element, or a function that returns the actual content\n//   element to the parser.\n//\n//   getContent:: ?(dom.Node, schema: Schema) → Fragment\n//   Can be used to override the content of a matched node. When\n//   present, instead of parsing the node's child nodes, the result of\n//   this function is used.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   Controls whether whitespace should be preserved when parsing the\n//   content inside the matched element. `false` means whitespace may\n//   be collapsed, `true` means that whitespace should be preserved\n//   but newlines normalized to spaces, and `\"full\"` means that\n//   newlines should also be preserved.\n\n// ::- A DOM parser represents a strategy for parsing DOM content into\n// a ProseMirror document conforming to a given schema. Its behavior\n// is defined by an array of [rules](#model.ParseRule).\nexport class DOMParser {\n  // :: (Schema, [ParseRule])\n  // Create a parser that targets the given schema, using the given\n  // parsing rules.\n  constructor(schema, rules) {\n    // :: Schema\n    // The schema into which the parser parses.\n    this.schema = schema\n    // :: [ParseRule]\n    // The set of [parse rules](#model.ParseRule) that the parser\n    // uses, in order of precedence.\n    this.rules = rules\n    this.tags = []\n    this.styles = []\n\n    rules.forEach(rule => {\n      if (rule.tag) this.tags.push(rule)\n      else if (rule.style) this.styles.push(rule)\n    })\n\n    // Only normalize list elements when lists in the schema can't directly contain themselves\n    this.normalizeLists = !this.tags.some(r => {\n      if (!/^(ul|ol)\\b/.test(r.tag) || !r.node) return false\n      let node = schema.nodes[r.node]\n      return node.contentMatch.matchType(node)\n    })\n  }\n\n  // :: (dom.Node, ?ParseOptions) → Node\n  // Parse a document from the content of a DOM node.\n  parse(dom, options = {}) {\n    let context = new ParseContext(this, options, false)\n    context.addAll(dom, null, options.from, options.to)\n    return context.finish()\n  }\n\n  // :: (dom.Node, ?ParseOptions) → Slice\n  // Parses the content of the given DOM node, like\n  // [`parse`](#model.DOMParser.parse), and takes the same set of\n  // options. But unlike that method, which produces a whole node,\n  // this one returns a slice that is open at the sides, meaning that\n  // the schema constraints aren't applied to the start of nodes to\n  // the left of the input and the end of nodes at the end.\n  parseSlice(dom, options = {}) {\n    let context = new ParseContext(this, options, true)\n    context.addAll(dom, null, options.from, options.to)\n    return Slice.maxOpen(context.finish())\n  }\n\n  matchTag(dom, context, after) {\n    for (let i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {\n      let rule = this.tags[i]\n      if (matches(dom, rule.tag) &&\n          (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&\n          (!rule.context || context.matchesContext(rule.context))) {\n        if (rule.getAttrs) {\n          let result = rule.getAttrs(dom)\n          if (result === false) continue\n          rule.attrs = result\n        }\n        return rule\n      }\n    }\n  }\n\n  matchStyle(prop, value, context, after) {\n    for (let i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {\n      let rule = this.styles[i]\n      if (rule.style.indexOf(prop) != 0 ||\n          rule.context && !context.matchesContext(rule.context) ||\n          // Test that the style string either precisely matches the prop,\n          // or has an '=' sign after the prop, followed by the given\n          // value.\n          rule.style.length > prop.length &&\n          (rule.style.charCodeAt(prop.length) != 61 || rule.style.slice(prop.length + 1) != value))\n        continue\n      if (rule.getAttrs) {\n        let result = rule.getAttrs(value)\n        if (result === false) continue\n        rule.attrs = result\n      }\n      return rule\n    }\n  }\n\n  // : (Schema) → [ParseRule]\n  static schemaRules(schema) {\n    let result = []\n    function insert(rule) {\n      let priority = rule.priority == null ? 50 : rule.priority, i = 0\n      for (; i < result.length; i++) {\n        let next = result[i], nextPriority = next.priority == null ? 50 : next.priority\n        if (nextPriority < priority) break\n      }\n      result.splice(i, 0, rule)\n    }\n\n    for (let name in schema.marks) {\n      let rules = schema.marks[name].spec.parseDOM\n      if (rules) rules.forEach(rule => {\n        insert(rule = copy(rule))\n        rule.mark = name\n      })\n    }\n    for (let name in schema.nodes) {\n      let rules = schema.nodes[name].spec.parseDOM\n      if (rules) rules.forEach(rule => {\n        insert(rule = copy(rule))\n        rule.node = name\n      })\n    }\n    return result\n  }\n\n  // :: (Schema) → DOMParser\n  // Construct a DOM parser using the parsing rules listed in a\n  // schema's [node specs](#model.NodeSpec.parseDOM), reordered by\n  // [priority](#model.ParseRule.priority).\n  static fromSchema(schema) {\n    return schema.cached.domParser ||\n      (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)))\n  }\n}\n\n// : Object<bool> The block-level tags in HTML5\nconst blockTags = {\n  address: true, article: true, aside: true, blockquote: true, canvas: true,\n  dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,\n  footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,\n  h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,\n  output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true\n}\n\n// : Object<bool> The tags that we normally ignore.\nconst ignoreTags = {\n  head: true, noscript: true, object: true, script: true, style: true, title: true\n}\n\n// : Object<bool> List tags.\nconst listTags = {ol: true, ul: true}\n\n// Using a bitfield for node context options\nconst OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4\n\nfunction wsOptionsFor(preserveWhitespace) {\n  return (preserveWhitespace ? OPT_PRESERVE_WS : 0) | (preserveWhitespace === \"full\" ? OPT_PRESERVE_WS_FULL : 0)\n}\n\nclass NodeContext {\n  constructor(type, attrs, marks, pendingMarks, solid, match, options) {\n    this.type = type\n    this.attrs = attrs\n    this.solid = solid\n    this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch)\n    this.options = options\n    this.content = []\n    // Marks applied to this node itself\n    this.marks = marks\n    // Marks applied to its children\n    this.activeMarks = Mark.none\n    // Marks that can't apply here, but will be used in children if possible\n    this.pendingMarks = pendingMarks\n    // Nested Marks with same type\n    this.stashMarks = []\n  }\n\n  findWrapping(node) {\n    if (!this.match) {\n      if (!this.type) return []\n      let fill = this.type.contentMatch.fillBefore(Fragment.from(node))\n      if (fill) {\n        this.match = this.type.contentMatch.matchFragment(fill)\n      } else {\n        let start = this.type.contentMatch, wrap\n        if (wrap = start.findWrapping(node.type)) {\n          this.match = start\n          return wrap\n        } else {\n          return null\n        }\n      }\n    }\n    return this.match.findWrapping(node.type)\n  }\n\n  finish(openEnd) {\n    if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace\n      let last = this.content[this.content.length - 1], m\n      if (last && last.isText && (m = /[ \\t\\r\\n\\u000c]+$/.exec(last.text))) {\n        if (last.text.length == m[0].length) this.content.pop()\n        else this.content[this.content.length - 1] = last.withText(last.text.slice(0, last.text.length - m[0].length))\n      }\n    }\n    let content = Fragment.from(this.content)\n    if (!openEnd && this.match)\n      content = content.append(this.match.fillBefore(Fragment.empty, true))\n    return this.type ? this.type.create(this.attrs, content, this.marks) : content\n  }\n\n  popFromStashMark(mark) {\n    for (let i = this.stashMarks.length - 1; i >= 0; i--)\n      if (mark.eq(this.stashMarks[i])) return this.stashMarks.splice(i, 1)[0]\n  }\n\n  applyPending(nextType) {\n    for (let i = 0, pending = this.pendingMarks; i < pending.length; i++) {\n      let mark = pending[i]\n      if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) &&\n          !mark.isInSet(this.activeMarks)) {\n        this.activeMarks = mark.addToSet(this.activeMarks)\n        this.pendingMarks = mark.removeFromSet(this.pendingMarks)\n      }\n    }\n  }\n}\n\nclass ParseContext {\n  // : (DOMParser, Object)\n  constructor(parser, options, open) {\n    // : DOMParser The parser we are using.\n    this.parser = parser\n    // : Object The options passed to this parse.\n    this.options = options\n    this.isOpen = open\n    let topNode = options.topNode, topContext\n    let topOptions = wsOptionsFor(options.preserveWhitespace) | (open ? OPT_OPEN_LEFT : 0)\n    if (topNode)\n      topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true,\n                                   options.topMatch || topNode.type.contentMatch, topOptions)\n    else if (open)\n      topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions)\n    else\n      topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions)\n    this.nodes = [topContext]\n    // : [Mark] The current set of marks\n    this.open = 0\n    this.find = options.findPositions\n    this.needsBlock = false\n  }\n\n  get top() {\n    return this.nodes[this.open]\n  }\n\n  // : (dom.Node)\n  // Add a DOM node to the content. Text is inserted as text node,\n  // otherwise, the node is passed to `addElement` or, if it has a\n  // `style` attribute, `addElementWithStyles`.\n  addDOM(dom) {\n    if (dom.nodeType == 3) {\n      this.addTextNode(dom)\n    } else if (dom.nodeType == 1) {\n      let style = dom.getAttribute(\"style\")\n      let marks = style ? this.readStyles(parseStyles(style)) : null, top = this.top\n      if (marks != null) for (let i = 0; i < marks.length; i++) this.addPendingMark(marks[i])\n      this.addElement(dom)\n      if (marks != null) for (let i = 0; i < marks.length; i++) this.removePendingMark(marks[i], top)\n    }\n  }\n\n  addTextNode(dom) {\n    let value = dom.nodeValue\n    let top = this.top\n    if ((top.type ? top.type.inlineContent : top.content.length && top.content[0].isInline) || /[^ \\t\\r\\n\\u000c]/.test(value)) {\n      if (!(top.options & OPT_PRESERVE_WS)) {\n        value = value.replace(/[ \\t\\r\\n\\u000c]+/g, \" \")\n        // If this starts with whitespace, and there is no node before it, or\n        // a hard break, or a text node that ends with whitespace, strip the\n        // leading space.\n        if (/^[ \\t\\r\\n\\u000c]/.test(value) && this.open == this.nodes.length - 1) {\n          let nodeBefore = top.content[top.content.length - 1]\n          let domNodeBefore = dom.previousSibling\n          if (!nodeBefore ||\n              (domNodeBefore && domNodeBefore.nodeName == 'BR') ||\n              (nodeBefore.isText && /[ \\t\\r\\n\\u000c]$/.test(nodeBefore.text)))\n            value = value.slice(1)\n        }\n      } else if (!(top.options & OPT_PRESERVE_WS_FULL)) {\n        value = value.replace(/\\r?\\n|\\r/g, \" \")\n      } else {\n        value = value.replace(/\\r\\n?/g, \"\\n\")\n      }\n      if (value) this.insertNode(this.parser.schema.text(value))\n      this.findInText(dom)\n    } else {\n      this.findInside(dom)\n    }\n  }\n\n  // : (dom.Element, ?ParseRule)\n  // Try to find a handler for the given tag and use that to parse. If\n  // none is found, the element's content nodes are added directly.\n  addElement(dom, matchAfter) {\n    let name = dom.nodeName.toLowerCase(), ruleID\n    if (listTags.hasOwnProperty(name) && this.parser.normalizeLists) normalizeList(dom)\n    let rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) ||\n        (ruleID = this.parser.matchTag(dom, this, matchAfter))\n    if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {\n      this.findInside(dom)\n      this.ignoreFallback(dom)\n    } else if (!rule || rule.skip || rule.closeParent) {\n      if (rule && rule.closeParent) this.open = Math.max(0, this.open - 1)\n      else if (rule && rule.skip.nodeType) dom = rule.skip\n      let sync, top = this.top, oldNeedsBlock = this.needsBlock\n      if (blockTags.hasOwnProperty(name)) {\n        sync = true\n        if (!top.type) this.needsBlock = true\n      } else if (!dom.firstChild) {\n        this.leafFallback(dom)\n        return\n      }\n      this.addAll(dom)\n      if (sync) this.sync(top)\n      this.needsBlock = oldNeedsBlock\n    } else {\n      this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : null)\n    }\n  }\n\n  // Called for leaf DOM nodes that would otherwise be ignored\n  leafFallback(dom) {\n    if (dom.nodeName == \"BR\" && this.top.type && this.top.type.inlineContent)\n      this.addTextNode(dom.ownerDocument.createTextNode(\"\\n\"))\n  }\n\n  // Called for ignored nodes\n  ignoreFallback(dom) {\n    // Ignored BR nodes should at least create an inline context\n    if (dom.nodeName == \"BR\" && (!this.top.type || !this.top.type.inlineContent))\n      this.findPlace(this.parser.schema.text(\"-\"))\n  }\n\n  // Run any style parser associated with the node's styles. Either\n  // return an array of marks, or null to indicate some of the styles\n  // had a rule with `ignore` set.\n  readStyles(styles) {\n    let marks = Mark.none\n    style: for (let i = 0; i < styles.length; i += 2) {\n      for (let after = null;;) {\n        let rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after)\n        if (!rule) continue style\n        if (rule.ignore) return null\n        marks = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(marks)\n        if (rule.consuming === false) after = rule\n        else break\n      }\n    }\n    return marks\n  }\n\n  // : (dom.Element, ParseRule) → bool\n  // Look up a handler for the given node. If none are found, return\n  // false. Otherwise, apply it, use its return value to drive the way\n  // the node's content is wrapped, and return true.\n  addElementByRule(dom, rule, continueAfter) {\n    let sync, nodeType, markType, mark\n    if (rule.node) {\n      nodeType = this.parser.schema.nodes[rule.node]\n      if (!nodeType.isLeaf) {\n        sync = this.enter(nodeType, rule.attrs, rule.preserveWhitespace)\n      } else if (!this.insertNode(nodeType.create(rule.attrs))) {\n        this.leafFallback(dom)\n      }\n    } else {\n      markType = this.parser.schema.marks[rule.mark]\n      mark = markType.create(rule.attrs)\n      this.addPendingMark(mark)\n    }\n    let startIn = this.top\n\n    if (nodeType && nodeType.isLeaf) {\n      this.findInside(dom)\n    } else if (continueAfter) {\n      this.addElement(dom, continueAfter)\n    } else if (rule.getContent) {\n      this.findInside(dom)\n      rule.getContent(dom, this.parser.schema).forEach(node => this.insertNode(node))\n    } else {\n      let contentDOM = rule.contentElement\n      if (typeof contentDOM == \"string\") contentDOM = dom.querySelector(contentDOM)\n      else if (typeof contentDOM == \"function\") contentDOM = contentDOM(dom)\n      if (!contentDOM) contentDOM = dom\n      this.findAround(dom, contentDOM, true)\n      this.addAll(contentDOM, sync)\n    }\n    if (sync) { this.sync(startIn); this.open-- }\n    if (mark) this.removePendingMark(mark, startIn)\n  }\n\n  // : (dom.Node, ?NodeBuilder, ?number, ?number)\n  // Add all child nodes between `startIndex` and `endIndex` (or the\n  // whole node, if not given). If `sync` is passed, use it to\n  // synchronize after every block element.\n  addAll(parent, sync, startIndex, endIndex) {\n    let index = startIndex || 0\n    for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild,\n             end = endIndex == null ? null : parent.childNodes[endIndex];\n         dom != end; dom = dom.nextSibling, ++index) {\n      this.findAtPoint(parent, index)\n      this.addDOM(dom)\n      if (sync && blockTags.hasOwnProperty(dom.nodeName.toLowerCase()))\n        this.sync(sync)\n    }\n    this.findAtPoint(parent, index)\n  }\n\n  // Try to find a way to fit the given node type into the current\n  // context. May add intermediate wrappers and/or leave non-solid\n  // nodes that we're in.\n  findPlace(node) {\n    let route, sync\n    for (let depth = this.open; depth >= 0; depth--) {\n      let cx = this.nodes[depth]\n      let found = cx.findWrapping(node)\n      if (found && (!route || route.length > found.length)) {\n        route = found\n        sync = cx\n        if (!found.length) break\n      }\n      if (cx.solid) break\n    }\n    if (!route) return false\n    this.sync(sync)\n    for (let i = 0; i < route.length; i++)\n      this.enterInner(route[i], null, false)\n    return true\n  }\n\n  // : (Node) → ?Node\n  // Try to insert the given node, adjusting the context when needed.\n  insertNode(node) {\n    if (node.isInline && this.needsBlock && !this.top.type) {\n      let block = this.textblockFromContext()\n      if (block) this.enterInner(block)\n    }\n    if (this.findPlace(node)) {\n      this.closeExtra()\n      let top = this.top\n      top.applyPending(node.type)\n      if (top.match) top.match = top.match.matchType(node.type)\n      let marks = top.activeMarks\n      for (let i = 0; i < node.marks.length; i++)\n        if (!top.type || top.type.allowsMarkType(node.marks[i].type))\n          marks = node.marks[i].addToSet(marks)\n      top.content.push(node.mark(marks))\n      return true\n    }\n    return false\n  }\n\n  // : (NodeType, ?Object) → bool\n  // Try to start a node of the given type, adjusting the context when\n  // necessary.\n  enter(type, attrs, preserveWS) {\n    let ok = this.findPlace(type.create(attrs))\n    if (ok) this.enterInner(type, attrs, true, preserveWS)\n    return ok\n  }\n\n  // Open a node of the given type\n  enterInner(type, attrs, solid, preserveWS) {\n    this.closeExtra()\n    let top = this.top\n    top.applyPending(type)\n    top.match = top.match && top.match.matchType(type, attrs)\n    let options = preserveWS == null ? top.options & ~OPT_OPEN_LEFT : wsOptionsFor(preserveWS)\n    if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0) options |= OPT_OPEN_LEFT\n    this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options))\n    this.open++\n  }\n\n  // Make sure all nodes above this.open are finished and added to\n  // their parents\n  closeExtra(openEnd) {\n    let i = this.nodes.length - 1\n    if (i > this.open) {\n      for (; i > this.open; i--) this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd))\n      this.nodes.length = this.open + 1\n    }\n  }\n\n  finish() {\n    this.open = 0\n    this.closeExtra(this.isOpen)\n    return this.nodes[0].finish(this.isOpen || this.options.topOpen)\n  }\n\n  sync(to) {\n    for (let i = this.open; i >= 0; i--) if (this.nodes[i] == to) {\n      this.open = i\n      return\n    }\n  }\n\n  get currentPos() {\n    this.closeExtra()\n    let pos = 0\n    for (let i = this.open; i >= 0; i--) {\n      let content = this.nodes[i].content\n      for (let j = content.length - 1; j >= 0; j--)\n        pos += content[j].nodeSize\n      if (i) pos++\n    }\n    return pos\n  }\n\n  findAtPoint(parent, offset) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].node == parent && this.find[i].offset == offset)\n        this.find[i].pos = this.currentPos\n    }\n  }\n\n  findInside(parent) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))\n        this.find[i].pos = this.currentPos\n    }\n  }\n\n  findAround(parent, content, before) {\n    if (parent != content && this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {\n        let pos = content.compareDocumentPosition(this.find[i].node)\n        if (pos & (before ? 2 : 4))\n          this.find[i].pos = this.currentPos\n      }\n    }\n  }\n\n  findInText(textNode) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].node == textNode)\n        this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset)\n    }\n  }\n\n  // : (string) → bool\n  // Determines whether the given [context\n  // string](#ParseRule.context) matches this context.\n  matchesContext(context) {\n    if (context.indexOf(\"|\") > -1)\n      return context.split(/\\s*\\|\\s*/).some(this.matchesContext, this)\n\n    let parts = context.split(\"/\")\n    let option = this.options.context\n    let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type)\n    let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1)\n    let match = (i, depth) => {\n      for (; i >= 0; i--) {\n        let part = parts[i]\n        if (part == \"\") {\n          if (i == parts.length - 1 || i == 0) continue\n          for (; depth >= minDepth; depth--)\n            if (match(i - 1, depth)) return true\n          return false\n        } else {\n          let next = depth > 0 || (depth == 0 && useRoot) ? this.nodes[depth].type\n              : option && depth >= minDepth ? option.node(depth - minDepth).type\n              : null\n          if (!next || (next.name != part && next.groups.indexOf(part) == -1))\n            return false\n          depth--\n        }\n      }\n      return true\n    }\n    return match(parts.length - 1, this.open)\n  }\n\n  textblockFromContext() {\n    let $context = this.options.context\n    if ($context) for (let d = $context.depth; d >= 0; d--) {\n      let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType\n      if (deflt && deflt.isTextblock && deflt.defaultAttrs) return deflt\n    }\n    for (let name in this.parser.schema.nodes) {\n      let type = this.parser.schema.nodes[name]\n      if (type.isTextblock && type.defaultAttrs) return type\n    }\n  }\n\n  addPendingMark(mark) {\n    let found = findSameMarkInSet(mark, this.top.pendingMarks)\n    if (found) this.top.stashMarks.push(found)\n    this.top.pendingMarks = mark.addToSet(this.top.pendingMarks)\n  }\n\n  removePendingMark(mark, upto) {\n    for (let depth = this.open; depth >= 0; depth--) {\n      let level = this.nodes[depth]\n      let found = level.pendingMarks.lastIndexOf(mark)\n      if (found > -1) {\n        level.pendingMarks = mark.removeFromSet(level.pendingMarks)\n      } else {\n        level.activeMarks = mark.removeFromSet(level.activeMarks)\n        let stashMark = level.popFromStashMark(mark)\n        if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))\n          level.activeMarks = stashMark.addToSet(level.activeMarks)\n      }\n      if (level == upto) break\n    }\n  }\n}\n\n// Kludge to work around directly nested list nodes produced by some\n// tools and allowed by browsers to mean that the nested list is\n// actually part of the list item above it.\nfunction normalizeList(dom) {\n  for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {\n    let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null\n    if (name && listTags.hasOwnProperty(name) && prevItem) {\n      prevItem.appendChild(child)\n      child = prevItem\n    } else if (name == \"li\") {\n      prevItem = child\n    } else if (name) {\n      prevItem = null\n    }\n  }\n}\n\n// Apply a CSS selector.\nfunction matches(dom, selector) {\n  return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector)\n}\n\n// : (string) → [string]\n// Tokenize a style attribute into property/value pairs.\nfunction parseStyles(style) {\n  let re = /\\s*([\\w-]+)\\s*:\\s*([^;]+)/g, m, result = []\n  while (m = re.exec(style)) result.push(m[1], m[2].trim())\n  return result\n}\n\nfunction copy(obj) {\n  let copy = {}\n  for (let prop in obj) copy[prop] = obj[prop]\n  return copy\n}\n\n// Used when finding a mark at the top level of a fragment parse.\n// Checks whether it would be reasonable to apply a given mark type to\n// a given node, by looking at the way the mark occurs in the schema.\nfunction markMayApply(markType, nodeType) {\n  let nodes = nodeType.schema.nodes\n  for (let name in nodes) {\n    let parent = nodes[name]\n    if (!parent.allowsMarkType(markType)) continue\n    let seen = [], scan = match => {\n      seen.push(match)\n      for (let i = 0; i < match.edgeCount; i++) {\n        let {type, next} = match.edge(i)\n        if (type == nodeType) return true\n        if (seen.indexOf(next) < 0 && scan(next)) return true\n      }\n    }\n    if (scan(parent.contentMatch)) return true\n  }\n}\n\nfunction findSameMarkInSet(mark, set) {\n  for (let i = 0; i < set.length; i++) {\n    if (mark.eq(set[i])) return set[i]\n  }\n}\n","// DOMOutputSpec:: interface\n// A description of a DOM structure. Can be either a string, which is\n// interpreted as a text node, a DOM node, which is interpreted as\n// itself, a `{dom: Node, contentDOM: ?Node}` object, or an array.\n//\n// An array describes a DOM element. The first value in the array\n// should be a string—the name of the DOM element, optionally prefixed\n// by a namespace URL and a space. If the second element is plain\n// object, it is interpreted as a set of attributes for the element.\n// Any elements after that (including the 2nd if it's not an attribute\n// object) are interpreted as children of the DOM elements, and must\n// either be valid `DOMOutputSpec` values, or the number zero.\n//\n// The number zero (pronounced “hole”) is used to indicate the place\n// where a node's child nodes should be inserted. If it occurs in an\n// output spec, it should be the only child element in its parent\n// node.\n\n// ::- A DOM serializer knows how to convert ProseMirror nodes and\n// marks of various types to DOM nodes.\nexport class DOMSerializer {\n  // :: (Object<(node: Node) → DOMOutputSpec>, Object<?(mark: Mark, inline: bool) → DOMOutputSpec>)\n  // Create a serializer. `nodes` should map node names to functions\n  // that take a node and return a description of the corresponding\n  // DOM. `marks` does the same for mark names, but also gets an\n  // argument that tells it whether the mark's content is block or\n  // inline content (for typical use, it'll always be inline). A mark\n  // serializer may be `null` to indicate that marks of that type\n  // should not be serialized.\n  constructor(nodes, marks) {\n    // :: Object<(node: Node) → DOMOutputSpec>\n    // The node serialization functions.\n    this.nodes = nodes || {}\n    // :: Object<?(mark: Mark, inline: bool) → DOMOutputSpec>\n    // The mark serialization functions.\n    this.marks = marks || {}\n  }\n\n  // :: (Fragment, ?Object) → dom.DocumentFragment\n  // Serialize the content of this fragment to a DOM fragment. When\n  // not in the browser, the `document` option, containing a DOM\n  // document, should be passed so that the serializer can create\n  // nodes.\n  serializeFragment(fragment, options = {}, target) {\n    if (!target) target = doc(options).createDocumentFragment()\n\n    let top = target, active = null\n    fragment.forEach(node => {\n      if (active || node.marks.length) {\n        if (!active) active = []\n        let keep = 0, rendered = 0\n        while (keep < active.length && rendered < node.marks.length) {\n          let next = node.marks[rendered]\n          if (!this.marks[next.type.name]) { rendered++; continue }\n          if (!next.eq(active[keep]) || next.type.spec.spanning === false) break\n          keep += 2; rendered++\n        }\n        while (keep < active.length) {\n          top = active.pop()\n          active.pop()\n        }\n        while (rendered < node.marks.length) {\n          let add = node.marks[rendered++]\n          let markDOM = this.serializeMark(add, node.isInline, options)\n          if (markDOM) {\n            active.push(add, top)\n            top.appendChild(markDOM.dom)\n            top = markDOM.contentDOM || markDOM.dom\n          }\n        }\n      }\n      top.appendChild(this.serializeNode(node, options))\n    })\n\n    return target\n  }\n\n  // :: (Node, ?Object) → dom.Node\n  // Serialize this node to a DOM node. This can be useful when you\n  // need to serialize a part of a document, as opposed to the whole\n  // document. To serialize a whole document, use\n  // [`serializeFragment`](#model.DOMSerializer.serializeFragment) on\n  // its [content](#model.Node.content).\n  serializeNode(node, options = {}) {\n    let {dom, contentDOM} =\n        DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node))\n    if (contentDOM) {\n      if (node.isLeaf)\n        throw new RangeError(\"Content hole not allowed in a leaf node spec\")\n      if (options.onContent)\n        options.onContent(node, contentDOM, options)\n      else\n        this.serializeFragment(node.content, options, contentDOM)\n    }\n    return dom\n  }\n\n  serializeNodeAndMarks(node, options = {}) {\n    let dom = this.serializeNode(node, options)\n    for (let i = node.marks.length - 1; i >= 0; i--) {\n      let wrap = this.serializeMark(node.marks[i], node.isInline, options)\n      if (wrap) {\n        ;(wrap.contentDOM || wrap.dom).appendChild(dom)\n        dom = wrap.dom\n      }\n    }\n    return dom\n  }\n\n  serializeMark(mark, inline, options = {}) {\n    let toDOM = this.marks[mark.type.name]\n    return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline))\n  }\n\n  // :: (dom.Document, DOMOutputSpec) → {dom: dom.Node, contentDOM: ?dom.Node}\n  // Render an [output spec](#model.DOMOutputSpec) to a DOM node. If\n  // the spec has a hole (zero) in it, `contentDOM` will point at the\n  // node with the hole.\n  static renderSpec(doc, structure, xmlNS = null) {\n    if (typeof structure == \"string\")\n      return {dom: doc.createTextNode(structure)}\n    if (structure.nodeType != null)\n      return {dom: structure}\n    if (structure.dom && structure.dom.nodeType != null)\n      return structure\n    let tagName = structure[0], space = tagName.indexOf(\" \")\n    if (space > 0) {\n      xmlNS = tagName.slice(0, space)\n      tagName = tagName.slice(space + 1)\n    }\n    let contentDOM = null, dom = xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName)\n    let attrs = structure[1], start = 1\n    if (attrs && typeof attrs == \"object\" && attrs.nodeType == null && !Array.isArray(attrs)) {\n      start = 2\n      for (let name in attrs) if (attrs[name] != null) {\n        let space = name.indexOf(\" \")\n        if (space > 0) dom.setAttributeNS(name.slice(0, space), name.slice(space + 1), attrs[name])\n        else dom.setAttribute(name, attrs[name])\n      }\n    }\n    for (let i = start; i < structure.length; i++) {\n      let child = structure[i]\n      if (child === 0) {\n        if (i < structure.length - 1 || i > start)\n          throw new RangeError(\"Content hole must be the only child of its parent node\")\n        return {dom, contentDOM: dom}\n      } else {\n        let {dom: inner, contentDOM: innerContent} = DOMSerializer.renderSpec(doc, child, xmlNS)\n        dom.appendChild(inner)\n        if (innerContent) {\n          if (contentDOM) throw new RangeError(\"Multiple content holes\")\n          contentDOM = innerContent\n        }\n      }\n    }\n    return {dom, contentDOM}\n  }\n\n  // :: (Schema) → DOMSerializer\n  // Build a serializer using the [`toDOM`](#model.NodeSpec.toDOM)\n  // properties in a schema's node and mark specs.\n  static fromSchema(schema) {\n    return schema.cached.domSerializer ||\n      (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)))\n  }\n\n  // : (Schema) → Object<(node: Node) → DOMOutputSpec>\n  // Gather the serializers in a schema's node specs into an object.\n  // This can be useful as a base to build a custom serializer from.\n  static nodesFromSchema(schema) {\n    let result = gatherToDOM(schema.nodes)\n    if (!result.text) result.text = node => node.text\n    return result\n  }\n\n  // : (Schema) → Object<(mark: Mark) → DOMOutputSpec>\n  // Gather the serializers in a schema's mark specs into an object.\n  static marksFromSchema(schema) {\n    return gatherToDOM(schema.marks)\n  }\n}\n\nfunction gatherToDOM(obj) {\n  let result = {}\n  for (let name in obj) {\n    let toDOM = obj[name].spec.toDOM\n    if (toDOM) result[name] = toDOM\n  }\n  return result\n}\n\nfunction doc(options) {\n  // declare global: window\n  return options.document || window.document\n}\n","// Mappable:: interface\n// There are several things that positions can be mapped through.\n// Such objects conform to this interface.\n//\n//   map:: (pos: number, assoc: ?number) → number\n//   Map a position through this object. When given, `assoc` (should\n//   be -1 or 1, defaults to 1) determines with which side the\n//   position is associated, which determines in which direction to\n//   move when a chunk of content is inserted at the mapped position.\n//\n//   mapResult:: (pos: number, assoc: ?number) → MapResult\n//   Map a position, and return an object containing additional\n//   information about the mapping. The result's `deleted` field tells\n//   you whether the position was deleted (completely enclosed in a\n//   replaced range) during the mapping. When content on only one side\n//   is deleted, the position itself is only considered deleted when\n//   `assoc` points in the direction of the deleted content.\n\n// Recovery values encode a range index and an offset. They are\n// represented as numbers, because tons of them will be created when\n// mapping, for example, a large number of decorations. The number's\n// lower 16 bits provide the index, the remaining bits the offset.\n//\n// Note: We intentionally don't use bit shift operators to en- and\n// decode these, since those clip to 32 bits, which we might in rare\n// cases want to overflow. A 64-bit float can represent 48-bit\n// integers precisely.\n\nconst lower16 = 0xffff\nconst factor16 = Math.pow(2, 16)\n\nfunction makeRecover(index, offset) { return index + offset * factor16 }\nfunction recoverIndex(value) { return value & lower16 }\nfunction recoverOffset(value) { return (value - (value & lower16)) / factor16 }\n\n// ::- An object representing a mapped position with extra\n// information.\nexport class MapResult {\n  constructor(pos, deleted = false, recover = null) {\n    // :: number The mapped version of the position.\n    this.pos = pos\n    // :: bool Tells you whether the position was deleted, that is,\n    // whether the step removed its surroundings from the document.\n    this.deleted = deleted\n    this.recover = recover\n  }\n}\n\n// :: class extends Mappable\n// A map describing the deletions and insertions made by a step, which\n// can be used to find the correspondence between positions in the\n// pre-step version of a document and the same position in the\n// post-step version.\nexport class StepMap {\n  // :: ([number])\n  // Create a position map. The modifications to the document are\n  // represented as an array of numbers, in which each group of three\n  // represents a modified chunk as `[start, oldSize, newSize]`.\n  constructor(ranges, inverted = false) {\n    this.ranges = ranges\n    this.inverted = inverted\n  }\n\n  recover(value) {\n    let diff = 0, index = recoverIndex(value)\n    if (!this.inverted) for (let i = 0; i < index; i++)\n      diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1]\n    return this.ranges[index * 3] + diff + recoverOffset(value)\n  }\n\n  // : (number, ?number) → MapResult\n  mapResult(pos, assoc = 1) { return this._map(pos, assoc, false) }\n\n  // : (number, ?number) → number\n  map(pos, assoc = 1) { return this._map(pos, assoc, true) }\n\n  _map(pos, assoc, simple) {\n    let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i] - (this.inverted ? diff : 0)\n      if (start > pos) break\n      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize\n      if (pos <= end) {\n        let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc\n        let result = start + diff + (side < 0 ? 0 : newSize)\n        if (simple) return result\n        let recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start)\n        return new MapResult(result, assoc < 0 ? pos != start : pos != end, recover)\n      }\n      diff += newSize - oldSize\n    }\n    return simple ? pos + diff : new MapResult(pos + diff)\n  }\n\n  touches(pos, recover) {\n    let diff = 0, index = recoverIndex(recover)\n    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i] - (this.inverted ? diff : 0)\n      if (start > pos) break\n      let oldSize = this.ranges[i + oldIndex], end = start + oldSize\n      if (pos <= end && i == index * 3) return true\n      diff += this.ranges[i + newIndex] - oldSize\n    }\n    return false\n  }\n\n  // :: ((oldStart: number, oldEnd: number, newStart: number, newEnd: number))\n  // Calls the given function on each of the changed ranges included in\n  // this map.\n  forEach(f) {\n    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff)\n      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex]\n      f(oldStart, oldStart + oldSize, newStart, newStart + newSize)\n      diff += newSize - oldSize\n    }\n  }\n\n  // :: () → StepMap\n  // Create an inverted version of this map. The result can be used to\n  // map positions in the post-step document to the pre-step document.\n  invert() {\n    return new StepMap(this.ranges, !this.inverted)\n  }\n\n  toString() {\n    return (this.inverted ? \"-\" : \"\") + JSON.stringify(this.ranges)\n  }\n\n  // :: (n: number) → StepMap\n  // Create a map that moves all positions by offset `n` (which may be\n  // negative). This can be useful when applying steps meant for a\n  // sub-document to a larger document, or vice-versa.\n  static offset(n) {\n    return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n])\n  }\n}\n\nStepMap.empty = new StepMap([])\n\n// :: class extends Mappable\n// A mapping represents a pipeline of zero or more [step\n// maps](#transform.StepMap). It has special provisions for losslessly\n// handling mapping positions through a series of steps in which some\n// steps are inverted versions of earlier steps. (This comes up when\n// ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for\n// collaboration or history management.)\nexport class Mapping {\n  // :: (?[StepMap])\n  // Create a new mapping with the given position maps.\n  constructor(maps, mirror, from, to) {\n    // :: [StepMap]\n    // The step maps in this mapping.\n    this.maps = maps || []\n    // :: number\n    // The starting position in the `maps` array, used when `map` or\n    // `mapResult` is called.\n    this.from = from || 0\n    // :: number\n    // The end position in the `maps` array.\n    this.to = to == null ? this.maps.length : to\n    this.mirror = mirror\n  }\n\n  // :: (?number, ?number) → Mapping\n  // Create a mapping that maps only through a part of this one.\n  slice(from = 0, to = this.maps.length) {\n    return new Mapping(this.maps, this.mirror, from, to)\n  }\n\n  copy() {\n    return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to)\n  }\n\n  // :: (StepMap, ?number)\n  // Add a step map to the end of this mapping. If `mirrors` is\n  // given, it should be the index of the step map that is the mirror\n  // image of this one.\n  appendMap(map, mirrors) {\n    this.to = this.maps.push(map)\n    if (mirrors != null) this.setMirror(this.maps.length - 1, mirrors)\n  }\n\n  // :: (Mapping)\n  // Add all the step maps in a given mapping to this one (preserving\n  // mirroring information).\n  appendMapping(mapping) {\n    for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {\n      let mirr = mapping.getMirror(i)\n      this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : null)\n    }\n  }\n\n  // :: (number) → ?number\n  // Finds the offset of the step map that mirrors the map at the\n  // given offset, in this mapping (as per the second argument to\n  // `appendMap`).\n  getMirror(n) {\n    if (this.mirror) for (let i = 0; i < this.mirror.length; i++)\n      if (this.mirror[i] == n) return this.mirror[i + (i % 2 ? -1 : 1)]\n  }\n\n  setMirror(n, m) {\n    if (!this.mirror) this.mirror = []\n    this.mirror.push(n, m)\n  }\n\n  // :: (Mapping)\n  // Append the inverse of the given mapping to this one.\n  appendMappingInverted(mapping) {\n    for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {\n      let mirr = mapping.getMirror(i)\n      this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : null)\n    }\n  }\n\n  // :: () → Mapping\n  // Create an inverted version of this mapping.\n  invert() {\n    let inverse = new Mapping\n    inverse.appendMappingInverted(this)\n    return inverse\n  }\n\n  // : (number, ?number) → number\n  // Map a position through this mapping.\n  map(pos, assoc = 1) {\n    if (this.mirror) return this._map(pos, assoc, true)\n    for (let i = this.from; i < this.to; i++)\n      pos = this.maps[i].map(pos, assoc)\n    return pos\n  }\n\n  // : (number, ?number) → MapResult\n  // Map a position through this mapping, returning a mapping\n  // result.\n  mapResult(pos, assoc = 1) { return this._map(pos, assoc, false) }\n\n  _map(pos, assoc, simple) {\n    let deleted = false\n\n    for (let i = this.from; i < this.to; i++) {\n      let map = this.maps[i], result = map.mapResult(pos, assoc)\n      if (result.recover != null) {\n        let corr = this.getMirror(i)\n        if (corr != null && corr > i && corr < this.to) {\n          i = corr\n          pos = this.maps[corr].recover(result.recover)\n          continue\n        }\n      }\n\n      if (result.deleted) deleted = true\n      pos = result.pos\n    }\n\n    return simple ? pos : new MapResult(pos, deleted)\n  }\n}\n","import {Mapping} from \"./map\"\n\nexport function TransformError(message) {\n  let err = Error.call(this, message)\n  err.__proto__ = TransformError.prototype\n  return err\n}\n\nTransformError.prototype = Object.create(Error.prototype)\nTransformError.prototype.constructor = TransformError\nTransformError.prototype.name = \"TransformError\"\n\n// ::- Abstraction to build up and track an array of\n// [steps](#transform.Step) representing a document transformation.\n//\n// Most transforming methods return the `Transform` object itself, so\n// that they can be chained.\nexport class Transform {\n  // :: (Node)\n  // Create a transform that starts with the given document.\n  constructor(doc) {\n    // :: Node\n    // The current document (the result of applying the steps in the\n    // transform).\n    this.doc = doc\n    // :: [Step]\n    // The steps in this transform.\n    this.steps = []\n    // :: [Node]\n    // The documents before each of the steps.\n    this.docs = []\n    // :: Mapping\n    // A mapping with the maps for each of the steps in this transform.\n    this.mapping = new Mapping\n  }\n\n  // :: Node The starting document.\n  get before() { return this.docs.length ? this.docs[0] : this.doc }\n\n  // :: (step: Step) → this\n  // Apply a new step in this transform, saving the result. Throws an\n  // error when the step fails.\n  step(object) {\n    let result = this.maybeStep(object)\n    if (result.failed) throw new TransformError(result.failed)\n    return this\n  }\n\n  // :: (Step) → StepResult\n  // Try to apply a step in this transformation, ignoring it if it\n  // fails. Returns the step result.\n  maybeStep(step) {\n    let result = step.apply(this.doc)\n    if (!result.failed) this.addStep(step, result.doc)\n    return result\n  }\n\n  // :: bool\n  // True when the document has been changed (when there are any\n  // steps).\n  get docChanged() {\n    return this.steps.length > 0\n  }\n\n  addStep(step, doc) {\n    this.docs.push(this.doc)\n    this.steps.push(step)\n    this.mapping.appendMap(step.getMap())\n    this.doc = doc\n  }\n}\n","import {ReplaceError} from \"prosemirror-model\"\n\nimport {StepMap} from \"./map\"\n\nfunction mustOverride() { throw new Error(\"Override me\") }\n\nconst stepsByID = Object.create(null)\n\n// ::- A step object represents an atomic change. It generally applies\n// only to the document it was created for, since the positions\n// stored in it will only make sense for that document.\n//\n// New steps are defined by creating classes that extend `Step`,\n// overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`\n// methods, and registering your class with a unique\n// JSON-serialization identifier using\n// [`Step.jsonID`](#transform.Step^jsonID).\nexport class Step {\n  // :: (doc: Node) → StepResult\n  // Applies this step to the given document, returning a result\n  // object that either indicates failure, if the step can not be\n  // applied to this document, or indicates success by containing a\n  // transformed document.\n  apply(_doc) { return mustOverride() }\n\n  // :: () → StepMap\n  // Get the step map that represents the changes made by this step,\n  // and which can be used to transform between positions in the old\n  // and the new document.\n  getMap() { return StepMap.empty }\n\n  // :: (doc: Node) → Step\n  // Create an inverted version of this step. Needs the document as it\n  // was before the step as argument.\n  invert(_doc) { return mustOverride() }\n\n  // :: (mapping: Mappable) → ?Step\n  // Map this step through a mappable thing, returning either a\n  // version of that step with its positions adjusted, or `null` if\n  // the step was entirely deleted by the mapping.\n  map(_mapping) { return mustOverride() }\n\n  // :: (other: Step) → ?Step\n  // Try to merge this step with another one, to be applied directly\n  // after it. Returns the merged step when possible, null if the\n  // steps can't be merged.\n  merge(_other) { return null }\n\n  // :: () → Object\n  // Create a JSON-serializeable representation of this step. When\n  // defining this for a custom subclass, make sure the result object\n  // includes the step type's [JSON id](#transform.Step^jsonID) under\n  // the `stepType` property.\n  toJSON() { return mustOverride() }\n\n  // :: (Schema, Object) → Step\n  // Deserialize a step from its JSON representation. Will call\n  // through to the step class' own implementation of this method.\n  static fromJSON(schema, json) {\n    if (!json || !json.stepType) throw new RangeError(\"Invalid input for Step.fromJSON\")\n    let type = stepsByID[json.stepType]\n    if (!type) throw new RangeError(`No step type ${json.stepType} defined`)\n    return type.fromJSON(schema, json)\n  }\n\n  // :: (string, constructor<Step>)\n  // To be able to serialize steps to JSON, each step needs a string\n  // ID to attach to its JSON representation. Use this method to\n  // register an ID for your step classes. Try to pick something\n  // that's unlikely to clash with steps from other modules.\n  static jsonID(id, stepClass) {\n    if (id in stepsByID) throw new RangeError(\"Duplicate use of step JSON ID \" + id)\n    stepsByID[id] = stepClass\n    stepClass.prototype.jsonID = id\n    return stepClass\n  }\n}\n\n// ::- The result of [applying](#transform.Step.apply) a step. Contains either a\n// new document or a failure value.\nexport class StepResult {\n  // : (?Node, ?string)\n  constructor(doc, failed) {\n    // :: ?Node The transformed document.\n    this.doc = doc\n    // :: ?string Text providing information about a failed step.\n    this.failed = failed\n  }\n\n  // :: (Node) → StepResult\n  // Create a successful step result.\n  static ok(doc) { return new StepResult(doc, null) }\n\n  // :: (string) → StepResult\n  // Create a failed step result.\n  static fail(message) { return new StepResult(null, message) }\n\n  // :: (Node, number, number, Slice) → StepResult\n  // Call [`Node.replace`](#model.Node.replace) with the given\n  // arguments. Create a successful result if it succeeds, and a\n  // failed one if it throws a `ReplaceError`.\n  static fromReplace(doc, from, to, slice) {\n    try {\n      return StepResult.ok(doc.replace(from, to, slice))\n    } catch (e) {\n      if (e instanceof ReplaceError) return StepResult.fail(e.message)\n      throw e\n    }\n  }\n}\n","import {Slice} from \"prosemirror-model\"\n\nimport {Step, StepResult} from \"./step\"\nimport {StepMap} from \"./map\"\n\n// ::- Replace a part of the document with a slice of new content.\nexport class ReplaceStep extends Step {\n  // :: (number, number, Slice, ?bool)\n  // The given `slice` should fit the 'gap' between `from` and\n  // `to`—the depths must line up, and the surrounding nodes must be\n  // able to be joined with the open sides of the slice. When\n  // `structure` is true, the step will fail if the content between\n  // from and to is not just a sequence of closing and then opening\n  // tokens (this is to guard against rebased replace steps\n  // overwriting something they weren't supposed to).\n  constructor(from, to, slice, structure) {\n    super()\n    // :: number\n    // The start position of the replaced range.\n    this.from = from\n    // :: number\n    // The end position of the replaced range.\n    this.to = to\n    // :: Slice\n    // The slice to insert.\n    this.slice = slice\n    this.structure = !!structure\n  }\n\n  apply(doc) {\n    if (this.structure && contentBetween(doc, this.from, this.to))\n      return StepResult.fail(\"Structure replace would overwrite content\")\n    return StepResult.fromReplace(doc, this.from, this.to, this.slice)\n  }\n\n  getMap() {\n    return new StepMap([this.from, this.to - this.from, this.slice.size])\n  }\n\n  invert(doc) {\n    return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to))\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted) return null\n    return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice)\n  }\n\n  merge(other) {\n    if (!(other instanceof ReplaceStep) || other.structure || this.structure) return null\n\n    if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {\n      let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd)\n      return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure)\n    } else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {\n      let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd)\n      return new ReplaceStep(other.from, this.to, slice, this.structure)\n    } else {\n      return null\n    }\n  }\n\n  toJSON() {\n    let json = {stepType: \"replace\", from: this.from, to: this.to}\n    if (this.slice.size) json.slice = this.slice.toJSON()\n    if (this.structure) json.structure = true\n    return json\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for ReplaceStep.fromJSON\")\n    return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure)\n  }\n}\n\nStep.jsonID(\"replace\", ReplaceStep)\n\n// ::- Replace a part of the document with a slice of content, but\n// preserve a range of the replaced content by moving it into the\n// slice.\nexport class ReplaceAroundStep extends Step {\n  // :: (number, number, number, number, Slice, number, ?bool)\n  // Create a replace-around step with the given range and gap.\n  // `insert` should be the point in the slice into which the content\n  // of the gap should be moved. `structure` has the same meaning as\n  // it has in the [`ReplaceStep`](#transform.ReplaceStep) class.\n  constructor(from, to, gapFrom, gapTo, slice, insert, structure) {\n    super()\n    // :: number\n    // The start position of the replaced range.\n    this.from = from\n    // :: number\n    // The end position of the replaced range.\n    this.to = to\n    // :: number\n    // The start of preserved range.\n    this.gapFrom = gapFrom\n    // :: number\n    // The end of preserved range.\n    this.gapTo = gapTo\n    // :: Slice\n    // The slice to insert.\n    this.slice = slice\n    // :: number\n    // The position in the slice where the preserved range should be\n    // inserted.\n    this.insert = insert\n    this.structure = !!structure\n  }\n\n  apply(doc) {\n    if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||\n                           contentBetween(doc, this.gapTo, this.to)))\n      return StepResult.fail(\"Structure gap-replace would overwrite content\")\n\n    let gap = doc.slice(this.gapFrom, this.gapTo)\n    if (gap.openStart || gap.openEnd)\n      return StepResult.fail(\"Gap is not a flat range\")\n    let inserted = this.slice.insertAt(this.insert, gap.content)\n    if (!inserted) return StepResult.fail(\"Content does not fit in gap\")\n    return StepResult.fromReplace(doc, this.from, this.to, inserted)\n  }\n\n  getMap() {\n    return new StepMap([this.from, this.gapFrom - this.from, this.insert,\n                        this.gapTo, this.to - this.gapTo, this.slice.size - this.insert])\n  }\n\n  invert(doc) {\n    let gap = this.gapTo - this.gapFrom\n    return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap,\n                                 this.from + this.insert, this.from + this.insert + gap,\n                                 doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from),\n                                 this.gapFrom - this.from, this.structure)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1)\n    if ((from.deleted && to.deleted) || gapFrom < from.pos || gapTo > to.pos) return null\n    return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure)\n  }\n\n  toJSON() {\n    let json = {stepType: \"replaceAround\", from: this.from, to: this.to,\n                gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert}\n    if (this.slice.size) json.slice = this.slice.toJSON()\n    if (this.structure) json.structure = true\n    return json\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\" ||\n        typeof json.gapFrom != \"number\" || typeof json.gapTo != \"number\" || typeof json.insert != \"number\")\n      throw new RangeError(\"Invalid input for ReplaceAroundStep.fromJSON\")\n    return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo,\n                                 Slice.fromJSON(schema, json.slice), json.insert, !!json.structure)\n  }\n}\n\nStep.jsonID(\"replaceAround\", ReplaceAroundStep)\n\nfunction contentBetween(doc, from, to) {\n  let $from = doc.resolve(from), dist = to - from, depth = $from.depth\n  while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {\n    depth--\n    dist--\n  }\n  if (dist > 0) {\n    let next = $from.node(depth).maybeChild($from.indexAfter(depth))\n    while (dist > 0) {\n      if (!next || next.isLeaf) return true\n      next = next.firstChild\n      dist--\n    }\n  }\n  return false\n}\n","import {Slice, Fragment} from \"prosemirror-model\"\n\nimport {Transform} from \"./transform\"\nimport {ReplaceStep, ReplaceAroundStep} from \"./replace_step\"\n\nfunction canCut(node, start, end) {\n  return (start == 0 || node.canReplace(start, node.childCount)) &&\n    (end == node.childCount || node.canReplace(0, end))\n}\n\n// :: (NodeRange) → ?number\n// Try to find a target depth to which the content in the given range\n// can be lifted. Will not go across\n// [isolating](#model.NodeSpec.isolating) parent nodes.\nexport function liftTarget(range) {\n  let parent = range.parent\n  let content = parent.content.cutByIndex(range.startIndex, range.endIndex)\n  for (let depth = range.depth;; --depth) {\n    let node = range.$from.node(depth)\n    let index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth)\n    if (depth < range.depth && node.canReplace(index, endIndex, content))\n      return depth\n    if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex)) break\n  }\n}\n\n// :: (NodeRange, number) → this\n// Split the content in the given range off from its parent, if there\n// is sibling content before or after it, and move it up the tree to\n// the depth specified by `target`. You'll probably want to use\n// [`liftTarget`](#transform.liftTarget) to compute `target`, to make\n// sure the lift is valid.\nTransform.prototype.lift = function(range, target) {\n  let {$from, $to, depth} = range\n\n  let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1)\n  let start = gapStart, end = gapEnd\n\n  let before = Fragment.empty, openStart = 0\n  for (let d = depth, splitting = false; d > target; d--)\n    if (splitting || $from.index(d) > 0) {\n      splitting = true\n      before = Fragment.from($from.node(d).copy(before))\n      openStart++\n    } else {\n      start--\n    }\n  let after = Fragment.empty, openEnd = 0\n  for (let d = depth, splitting = false; d > target; d--)\n    if (splitting || $to.after(d + 1) < $to.end(d)) {\n      splitting = true\n      after = Fragment.from($to.node(d).copy(after))\n      openEnd++\n    } else {\n      end++\n    }\n\n  return this.step(new ReplaceAroundStep(start, end, gapStart, gapEnd,\n                                         new Slice(before.append(after), openStart, openEnd),\n                                         before.size - openStart, true))\n}\n\n// :: (NodeRange, NodeType, ?Object, ?NodeRange) → ?[{type: NodeType, attrs: ?Object}]\n// Try to find a valid way to wrap the content in the given range in a\n// node of the given type. May introduce extra nodes around and inside\n// the wrapper node, if necessary. Returns null if no valid wrapping\n// could be found. When `innerRange` is given, that range's content is\n// used as the content to fit into the wrapping, instead of the\n// content of `range`.\nexport function findWrapping(range, nodeType, attrs, innerRange = range) {\n  let around = findWrappingOutside(range, nodeType)\n  let inner = around && findWrappingInside(innerRange, nodeType)\n  if (!inner) return null\n  return around.map(withAttrs).concat({type: nodeType, attrs}).concat(inner.map(withAttrs))\n}\n\nfunction withAttrs(type) { return {type, attrs: null} }\n\nfunction findWrappingOutside(range, type) {\n  let {parent, startIndex, endIndex} = range\n  let around = parent.contentMatchAt(startIndex).findWrapping(type)\n  if (!around) return null\n  let outer = around.length ? around[0] : type\n  return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null\n}\n\nfunction findWrappingInside(range, type) {\n  let {parent, startIndex, endIndex} = range\n  let inner = parent.child(startIndex)\n  let inside = type.contentMatch.findWrapping(inner.type)\n  if (!inside) return null\n  let lastType = inside.length ? inside[inside.length - 1] : type\n  let innerMatch = lastType.contentMatch\n  for (let i = startIndex; innerMatch && i < endIndex; i++)\n    innerMatch = innerMatch.matchType(parent.child(i).type)\n  if (!innerMatch || !innerMatch.validEnd) return null\n  return inside\n}\n\n// :: (NodeRange, [{type: NodeType, attrs: ?Object}]) → this\n// Wrap the given [range](#model.NodeRange) in the given set of wrappers.\n// The wrappers are assumed to be valid in this position, and should\n// probably be computed with [`findWrapping`](#transform.findWrapping).\nTransform.prototype.wrap = function(range, wrappers) {\n  let content = Fragment.empty\n  for (let i = wrappers.length - 1; i >= 0; i--)\n    content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content))\n\n  let start = range.start, end = range.end\n  return this.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true))\n}\n\n// :: (number, ?number, NodeType, ?Object) → this\n// Set the type of all textblocks (partly) between `from` and `to` to\n// the given node type with the given attributes.\nTransform.prototype.setBlockType = function(from, to = from, type, attrs) {\n  if (!type.isTextblock) throw new RangeError(\"Type given to setBlockType should be a textblock\")\n  let mapFrom = this.steps.length\n  this.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(this.doc, this.mapping.slice(mapFrom).map(pos), type)) {\n      // Ensure all markup that isn't allowed in the new node type is cleared\n      this.clearIncompatible(this.mapping.slice(mapFrom).map(pos, 1), type)\n      let mapping = this.mapping.slice(mapFrom)\n      let startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1)\n      this.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1,\n                                      new Slice(Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true))\n      return false\n    }\n  })\n  return this\n}\n\nfunction canChangeType(doc, pos, type) {\n  let $pos = doc.resolve(pos), index = $pos.index()\n  return $pos.parent.canReplaceWith(index, index + 1, type)\n}\n\n// :: (number, ?NodeType, ?Object, ?[Mark]) → this\n// Change the type, attributes, and/or marks of the node at `pos`.\n// When `type` isn't given, the existing node type is preserved,\nTransform.prototype.setNodeMarkup = function(pos, type, attrs, marks) {\n  let node = this.doc.nodeAt(pos)\n  if (!node) throw new RangeError(\"No node at given position\")\n  if (!type) type = node.type\n  let newNode = type.create(attrs, null, marks || node.marks)\n  if (node.isLeaf)\n    return this.replaceWith(pos, pos + node.nodeSize, newNode)\n\n  if (!type.validContent(node.content))\n    throw new RangeError(\"Invalid content for node type \" + type.name)\n\n  return this.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1,\n                                         new Slice(Fragment.from(newNode), 0, 0), 1, true))\n}\n\n// :: (Node, number, number, ?[?{type: NodeType, attrs: ?Object}]) → bool\n// Check whether splitting at the given position is allowed.\nexport function canSplit(doc, pos, depth = 1, typesAfter) {\n  let $pos = doc.resolve(pos), base = $pos.depth - depth\n  let innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent\n  if (base < 0 || $pos.parent.type.spec.isolating ||\n      !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||\n      !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))\n    return false\n  for (let d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {\n    let node = $pos.node(d), index = $pos.index(d)\n    if (node.type.spec.isolating) return false\n    let rest = node.content.cutByIndex(index, node.childCount)\n    let after = (typesAfter && typesAfter[i]) || node\n    if (after != node) rest = rest.replaceChild(0, after.type.create(after.attrs))\n    if (!node.canReplace(index + 1, node.childCount) || !after.type.validContent(rest))\n      return false\n  }\n  let index = $pos.indexAfter(base)\n  let baseType = typesAfter && typesAfter[0]\n  return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type)\n}\n\n// :: (number, ?number, ?[?{type: NodeType, attrs: ?Object}]) → this\n// Split the node at the given position, and optionally, if `depth` is\n// greater than one, any number of nodes above that. By default, the\n// parts split off will inherit the node type of the original node.\n// This can be changed by passing an array of types and attributes to\n// use after the split.\nTransform.prototype.split = function(pos, depth = 1, typesAfter) {\n  let $pos = this.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty\n  for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {\n    before = Fragment.from($pos.node(d).copy(before))\n    let typeAfter = typesAfter && typesAfter[i]\n    after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after))\n  }\n  return this.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth), true))\n}\n\n// :: (Node, number) → bool\n// Test whether the blocks before and after a given position can be\n// joined.\nexport function canJoin(doc, pos) {\n  let $pos = doc.resolve(pos), index = $pos.index()\n  return joinable($pos.nodeBefore, $pos.nodeAfter) &&\n    $pos.parent.canReplace(index, index + 1)\n}\n\nfunction joinable(a, b) {\n  return a && b && !a.isLeaf && a.canAppend(b)\n}\n\n// :: (Node, number, ?number) → ?number\n// Find an ancestor of the given position that can be joined to the\n// block before (or after if `dir` is positive). Returns the joinable\n// point, if any.\nexport function joinPoint(doc, pos, dir = -1) {\n  let $pos = doc.resolve(pos)\n  for (let d = $pos.depth;; d--) {\n    let before, after, index = $pos.index(d)\n    if (d == $pos.depth) {\n      before = $pos.nodeBefore\n      after = $pos.nodeAfter\n    } else if (dir > 0) {\n      before = $pos.node(d + 1)\n      index++\n      after = $pos.node(d).maybeChild(index)\n    } else {\n      before = $pos.node(d).maybeChild(index - 1)\n      after = $pos.node(d + 1)\n    }\n    if (before && !before.isTextblock && joinable(before, after) &&\n        $pos.node(d).canReplace(index, index + 1)) return pos\n    if (d == 0) break\n    pos = dir < 0 ? $pos.before(d) : $pos.after(d)\n  }\n}\n\n// :: (number, ?number) → this\n// Join the blocks around the given position. If depth is 2, their\n// last and first siblings are also joined, and so on.\nTransform.prototype.join = function(pos, depth = 1) {\n  let step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true)\n  return this.step(step)\n}\n\n// :: (Node, number, NodeType) → ?number\n// Try to find a point where a node of the given type can be inserted\n// near `pos`, by searching up the node hierarchy when `pos` itself\n// isn't a valid place but is at the start or end of a node. Return\n// null if no position was found.\nexport function insertPoint(doc, pos, nodeType) {\n  let $pos = doc.resolve(pos)\n  if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType)) return pos\n\n  if ($pos.parentOffset == 0)\n    for (let d = $pos.depth - 1; d >= 0; d--) {\n      let index = $pos.index(d)\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) return $pos.before(d + 1)\n      if (index > 0) return null\n    }\n  if ($pos.parentOffset == $pos.parent.content.size)\n    for (let d = $pos.depth - 1; d >= 0; d--) {\n      let index = $pos.indexAfter(d)\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) return $pos.after(d + 1)\n      if (index < $pos.node(d).childCount) return null\n    }\n}\n\n// :: (Node, number, Slice) → ?number\n// Finds a position at or around the given position where the given\n// slice can be inserted. Will look at parent nodes' nearest boundary\n// and try there, even if the original position wasn't directly at the\n// start or end of that node. Returns null when no position was found.\nexport function dropPoint(doc, pos, slice) {\n  let $pos = doc.resolve(pos)\n  if (!slice.content.size) return pos\n  let content = slice.content\n  for (let i = 0; i < slice.openStart; i++) content = content.firstChild.content\n  for (let pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {\n    for (let d = $pos.depth; d >= 0; d--) {\n      let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1\n      let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0)\n      let parent = $pos.node(d), fits = false\n      if (pass == 1) {\n        fits = parent.canReplace(insertPos, insertPos, content)\n      } else {\n        let wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type)\n        fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0])\n      }\n      if (fits)\n        return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1)\n    }\n  }\n  return null\n}\n","import {Fragment, Slice} from \"prosemirror-model\"\nimport {Step, StepResult} from \"./step\"\n\nfunction mapFragment(fragment, f, parent) {\n  let mapped = []\n  for (let i = 0; i < fragment.childCount; i++) {\n    let child = fragment.child(i)\n    if (child.content.size) child = child.copy(mapFragment(child.content, f, child))\n    if (child.isInline) child = f(child, parent, i)\n    mapped.push(child)\n  }\n  return Fragment.fromArray(mapped)\n}\n\n// ::- Add a mark to all inline content between two positions.\nexport class AddMarkStep extends Step {\n  // :: (number, number, Mark)\n  constructor(from, to, mark) {\n    super()\n    // :: number\n    // The start of the marked range.\n    this.from = from\n    // :: number\n    // The end of the marked range.\n    this.to = to\n    // :: Mark\n    // The mark to add.\n    this.mark = mark\n  }\n\n  apply(doc) {\n    let oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from)\n    let parent = $from.node($from.sharedDepth(this.to))\n    let slice = new Slice(mapFragment(oldSlice.content, (node, parent) => {\n      if (!node.isAtom || !parent.type.allowsMarkType(this.mark.type)) return node\n      return node.mark(this.mark.addToSet(node.marks))\n    }, parent), oldSlice.openStart, oldSlice.openEnd)\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  }\n\n  invert() {\n    return new RemoveMarkStep(this.from, this.to, this.mark)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted || from.pos >= to.pos) return null\n    return new AddMarkStep(from.pos, to.pos, this.mark)\n  }\n\n  merge(other) {\n    if (other instanceof AddMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      return new AddMarkStep(Math.min(this.from, other.from),\n                             Math.max(this.to, other.to), this.mark)\n  }\n\n  toJSON() {\n    return {stepType: \"addMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for AddMarkStep.fromJSON\")\n    return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  }\n}\n\nStep.jsonID(\"addMark\", AddMarkStep)\n\n// ::- Remove a mark from all inline content between two positions.\nexport class RemoveMarkStep extends Step {\n  // :: (number, number, Mark)\n  constructor(from, to, mark) {\n    super()\n    // :: number\n    // The start of the unmarked range.\n    this.from = from\n    // :: number\n    // The end of the unmarked range.\n    this.to = to\n    // :: Mark\n    // The mark to remove.\n    this.mark = mark\n  }\n\n  apply(doc) {\n    let oldSlice = doc.slice(this.from, this.to)\n    let slice = new Slice(mapFragment(oldSlice.content, node => {\n      return node.mark(this.mark.removeFromSet(node.marks))\n    }), oldSlice.openStart, oldSlice.openEnd)\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  }\n\n  invert() {\n    return new AddMarkStep(this.from, this.to, this.mark)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted || from.pos >= to.pos) return null\n    return new RemoveMarkStep(from.pos, to.pos, this.mark)\n  }\n\n  merge(other) {\n    if (other instanceof RemoveMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      return new RemoveMarkStep(Math.min(this.from, other.from),\n                                Math.max(this.to, other.to), this.mark)\n  }\n\n  toJSON() {\n    return {stepType: \"removeMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for RemoveMarkStep.fromJSON\")\n    return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  }\n}\n\nStep.jsonID(\"removeMark\", RemoveMarkStep)\n","import {Fragment, Slice} from \"prosemirror-model\"\n\nimport {ReplaceStep, ReplaceAroundStep} from \"./replace_step\"\nimport {Transform} from \"./transform\"\nimport {insertPoint} from \"./structure\"\n\n// :: (Node, number, ?number, ?Slice) → ?Step\n// ‘Fit’ a slice into a given position in the document, producing a\n// [step](#transform.Step) that inserts it. Will return null if\n// there's no meaningful way to insert the slice here, or inserting it\n// would be a no-op (an empty slice over an empty range).\nexport function replaceStep(doc, from, to = from, slice = Slice.empty) {\n  if (from == to && !slice.size) return null\n\n  let $from = doc.resolve(from), $to = doc.resolve(to)\n  // Optimization -- avoid work if it's obvious that it's not needed.\n  if (fitsTrivially($from, $to, slice)) return new ReplaceStep(from, to, slice)\n  return new Fitter($from, $to, slice).fit()\n}\n\n// :: (number, ?number, ?Slice) → this\n// Replace the part of the document between `from` and `to` with the\n// given `slice`.\nTransform.prototype.replace = function(from, to = from, slice = Slice.empty) {\n  let step = replaceStep(this.doc, from, to, slice)\n  if (step) this.step(step)\n  return this\n}\n\n// :: (number, number, union<Fragment, Node, [Node]>) → this\n// Replace the given range with the given content, which may be a\n// fragment, node, or array of nodes.\nTransform.prototype.replaceWith = function(from, to, content) {\n  return this.replace(from, to, new Slice(Fragment.from(content), 0, 0))\n}\n\n// :: (number, number) → this\n// Delete the content between the given positions.\nTransform.prototype.delete = function(from, to) {\n  return this.replace(from, to, Slice.empty)\n}\n\n// :: (number, union<Fragment, Node, [Node]>) → this\n// Insert the given content at the given position.\nTransform.prototype.insert = function(pos, content) {\n  return this.replaceWith(pos, pos, content)\n}\n\nfunction fitsTrivially($from, $to, slice) {\n  return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&\n    $from.parent.canReplace($from.index(), $to.index(), slice.content)\n}\n\n// Algorithm for 'placing' the elements of a slice into a gap:\n//\n// We consider the content of each node that is open to the left to be\n// independently placeable. I.e. in <p(\"foo\"), p(\"bar\")>, when the\n// paragraph on the left is open, \"foo\" can be placed (somewhere on\n// the left side of the replacement gap) independently from p(\"bar\").\n//\n// This class tracks the state of the placement progress in the\n// following properties:\n//\n//  - `frontier` holds a stack of `{type, match}` objects that\n//    represent the open side of the replacement. It starts at\n//    `$from`, then moves forward as content is placed, and is finally\n//    reconciled with `$to`.\n//\n//  - `unplaced` is a slice that represents the content that hasn't\n//    been placed yet.\n//\n//  - `placed` is a fragment of placed content. Its open-start value\n//    is implicit in `$from`, and its open-end value in `frontier`.\nclass Fitter {\n  constructor($from, $to, slice) {\n    this.$to = $to\n    this.$from = $from\n    this.unplaced = slice\n\n    this.frontier = []\n    for (let i = 0; i <= $from.depth; i++) {\n      let node = $from.node(i)\n      this.frontier.push({\n        type: node.type,\n        match: node.contentMatchAt($from.indexAfter(i))\n      })\n    }\n\n    this.placed = Fragment.empty\n    for (let i = $from.depth; i > 0; i--)\n      this.placed = Fragment.from($from.node(i).copy(this.placed))\n  }\n\n  get depth() { return this.frontier.length - 1 }\n\n  fit() {\n    // As long as there's unplaced content, try to place some of it.\n    // If that fails, either increase the open score of the unplaced\n    // slice, or drop nodes from it, and then try again.\n    while (this.unplaced.size) {\n      let fit = this.findFittable()\n      if (fit) this.placeNodes(fit)\n      else this.openMore() || this.dropNode()\n    }\n    // When there's inline content directly after the frontier _and_\n    // directly after `this.$to`, we must generate a `ReplaceAround`\n    // step that pulls that content into the node after the frontier.\n    // That means the fitting must be done to the end of the textblock\n    // node after `this.$to`, not `this.$to` itself.\n    let moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth\n    let $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline))\n    if (!$to) return null\n\n    // If closing to `$to` succeeded, create a step\n    let content = this.placed, openStart = $from.depth, openEnd = $to.depth\n    while (openStart && openEnd && content.childCount == 1) { // Normalize by dropping open parent nodes\n      content = content.firstChild.content\n      openStart--; openEnd--\n    }\n    let slice = new Slice(content, openStart, openEnd)\n    if (moveInline > -1)\n      return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice, placedSize)\n    if (slice.size || $from.pos != this.$to.pos) // Don't generate no-op steps\n      return new ReplaceStep($from.pos, $to.pos, slice)\n  }\n\n  // Find a position on the start spine of `this.unplaced` that has\n  // content that can be moved somewhere on the frontier. Returns two\n  // depths, one for the slice and one for the frontier.\n  findFittable() {\n    // Only try wrapping nodes (pass 2) after finding a place without\n    // wrapping failed.\n    for (let pass = 1; pass <= 2; pass++) {\n      for (let sliceDepth = this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {\n        let fragment, parent\n        if (sliceDepth) {\n          parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild\n          fragment = parent.content\n        } else {\n          fragment = this.unplaced.content\n        }\n        let first = fragment.firstChild\n        for (let frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {\n          let {type, match} = this.frontier[frontierDepth], wrap, inject\n          // In pass 1, if the next node matches, or there is no next\n          // node but the parents look compatible, we've found a\n          // place.\n          if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(Fragment.from(first), false))\n                            : type.compatibleContent(parent.type)))\n            return {sliceDepth, frontierDepth, parent, inject}\n          // In pass 2, look for a set of wrapping nodes that make\n          // `first` fit here.\n          else if (pass == 2 && first && (wrap = match.findWrapping(first.type)))\n            return {sliceDepth, frontierDepth, parent, wrap}\n          // Don't continue looking further up if the parent node\n          // would fit here.\n          if (parent && match.matchType(parent.type)) break\n        }\n      }\n    }\n  }\n\n  openMore() {\n    let {content, openStart, openEnd} = this.unplaced\n    let inner = contentAt(content, openStart)\n    if (!inner.childCount || inner.firstChild.isLeaf) return false\n    this.unplaced = new Slice(content, openStart + 1,\n                              Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0))\n    return true\n  }\n\n  dropNode() {\n    let {content, openStart, openEnd} = this.unplaced\n    let inner = contentAt(content, openStart)\n    if (inner.childCount <= 1 && openStart > 0) {\n      let openAtEnd = content.size - openStart <= openStart + inner.size\n      this.unplaced = new Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1,\n                                openAtEnd ? openStart - 1 : openEnd)\n    } else {\n      this.unplaced = new Slice(dropFromFragment(content, openStart, 1), openStart, openEnd)\n    }\n  }\n\n  // : ({sliceDepth: number, frontierDepth: number, parent: ?Node, wrap: ?[NodeType], inject: ?Fragment})\n  // Move content from the unplaced slice at `sliceDepth` to the\n  // frontier node at `frontierDepth`. Close that frontier node when\n  // applicable.\n  placeNodes({sliceDepth, frontierDepth, parent, inject, wrap}) {\n    while (this.depth > frontierDepth) this.closeFrontierNode()\n    if (wrap) for (let i = 0; i < wrap.length; i++) this.openFrontierNode(wrap[i])\n\n    let slice = this.unplaced, fragment = parent ? parent.content : slice.content\n    let openStart = slice.openStart - sliceDepth\n    let taken = 0, add = []\n    let {match, type} = this.frontier[frontierDepth]\n    if (inject) {\n      for (let i = 0; i < inject.childCount; i++) add.push(inject.child(i))\n      match = match.matchFragment(inject)\n    }\n    // Computes the amount of (end) open nodes at the end of the\n    // fragment. When 0, the parent is open, but no more. When\n    // negative, nothing is open.\n    let openEndCount = (fragment.size + sliceDepth) - (slice.content.size - slice.openEnd)\n    // Scan over the fragment, fitting as many child nodes as\n    // possible.\n    while (taken < fragment.childCount) {\n      let next = fragment.child(taken), matches = match.matchType(next.type)\n      if (!matches) break\n      taken++\n      if (taken > 1 || openStart == 0 || next.content.size) { // Drop empty open nodes\n        match = matches\n        add.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0,\n                                taken == fragment.childCount ? openEndCount : -1))\n      }\n    }\n    let toEnd = taken == fragment.childCount\n    if (!toEnd) openEndCount = -1\n\n    this.placed = addToFragment(this.placed, frontierDepth, Fragment.from(add))\n    this.frontier[frontierDepth].match = match\n\n    // If the parent types match, and the entire node was moved, and\n    // it's not open, close this frontier node right away.\n    if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)\n      this.closeFrontierNode()\n\n    // Add new frontier nodes for any open nodes at the end.\n    for (let i = 0, cur = fragment; i < openEndCount; i++) {\n      let node = cur.lastChild\n      this.frontier.push({type: node.type, match: node.contentMatchAt(node.childCount)})\n      cur = node.content\n    }\n\n    // Update `this.unplaced`. Drop the entire node from which we\n    // placed it we got to its end, otherwise just drop the placed\n    // nodes.\n    this.unplaced = !toEnd ? new Slice(dropFromFragment(slice.content, sliceDepth, taken), slice.openStart, slice.openEnd)\n      : sliceDepth == 0 ? Slice.empty\n      : new Slice(dropFromFragment(slice.content, sliceDepth - 1, 1),\n                  sliceDepth - 1, openEndCount < 0 ? slice.openEnd : sliceDepth - 1)\n  }\n\n  mustMoveInline() {\n    if (!this.$to.parent.isTextblock || this.$to.end() == this.$to.pos) return -1\n    let top = this.frontier[this.depth], level\n    if (!top.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top.type, top.match, false) ||\n        (this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth)) return -1\n\n    let {depth} = this.$to, after = this.$to.after(depth)\n    while (depth > 1 && after == this.$to.end(--depth)) ++after\n    return after\n  }\n\n  findCloseLevel($to) {\n    scan: for (let i = Math.min(this.depth, $to.depth); i >= 0; i--) {\n      let {match, type} = this.frontier[i]\n      let dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1))\n      let fit = contentAfterFits($to, i, type, match, dropInner)\n      if (!fit) continue\n      for (let d = i - 1; d >= 0; d--) {\n        let {match, type} = this.frontier[d]\n        let matches = contentAfterFits($to, d, type, match, true)\n        if (!matches || matches.childCount) continue scan\n      }\n      return {depth: i, fit, move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to}\n    }\n  }\n\n  close($to) {\n    let close = this.findCloseLevel($to)\n    if (!close) return null\n\n    while (this.depth > close.depth) this.closeFrontierNode()\n    if (close.fit.childCount) this.placed = addToFragment(this.placed, close.depth, close.fit)\n    $to = close.move\n    for (let d = close.depth + 1; d <= $to.depth; d++) {\n      let node = $to.node(d), add = node.type.contentMatch.fillBefore(node.content, true, $to.index(d))\n      this.openFrontierNode(node.type, node.attrs, add)\n    }\n    return $to\n  }\n\n  openFrontierNode(type, attrs, content) {\n    let top = this.frontier[this.depth]\n    top.match = top.match.matchType(type)\n    this.placed = addToFragment(this.placed, this.depth, Fragment.from(type.create(attrs, content)))\n    this.frontier.push({type, match: type.contentMatch})\n  }\n\n  closeFrontierNode() {\n    let open = this.frontier.pop()\n    let add = open.match.fillBefore(Fragment.empty, true)\n    if (add.childCount) this.placed = addToFragment(this.placed, this.frontier.length, add)\n  }\n}\n\nfunction dropFromFragment(fragment, depth, count) {\n  if (depth == 0) return fragment.cutByIndex(count)\n  return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)))\n}\n\nfunction addToFragment(fragment, depth, content) {\n  if (depth == 0) return fragment.append(content)\n  return fragment.replaceChild(fragment.childCount - 1,\n                               fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)))\n}\n\nfunction contentAt(fragment, depth) {\n  for (let i = 0; i < depth; i++) fragment = fragment.firstChild.content\n  return fragment\n}\n\nfunction closeNodeStart(node, openStart, openEnd) {\n  if (openStart <= 0) return node\n  let frag = node.content\n  if (openStart > 1)\n    frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0))\n  if (openStart > 0) {\n    frag = node.type.contentMatch.fillBefore(frag).append(frag)\n    if (openEnd <= 0) frag = frag.append(node.type.contentMatch.matchFragment(frag).fillBefore(Fragment.empty, true))\n  }\n  return node.copy(frag)\n}\n\nfunction contentAfterFits($to, depth, type, match, open) {\n  let node = $to.node(depth), index = open ? $to.indexAfter(depth) : $to.index(depth)\n  if (index == node.childCount && !type.compatibleContent(node.type)) return null\n  let fit = match.fillBefore(node.content, true, index)\n  return fit && !invalidMarks(type, node.content, index) ? fit : null\n}\n\nfunction invalidMarks(type, fragment, start) {\n  for (let i = start; i < fragment.childCount; i++)\n    if (!type.allowsMarks(fragment.child(i).marks)) return true\n  return false\n}\n\n// :: (number, number, Slice) → this\n// Replace a range of the document with a given slice, using `from`,\n// `to`, and the slice's [`openStart`](#model.Slice.openStart) property\n// as hints, rather than fixed start and end points. This method may\n// grow the replaced area or close open nodes in the slice in order to\n// get a fit that is more in line with WYSIWYG expectations, by\n// dropping fully covered parent nodes of the replaced region when\n// they are marked [non-defining](#model.NodeSpec.defining), or\n// including an open parent node from the slice that _is_ marked as\n// [defining](#model.NodeSpec.defining).\n//\n// This is the method, for example, to handle paste. The similar\n// [`replace`](#transform.Transform.replace) method is a more\n// primitive tool which will _not_ move the start and end of its given\n// range, and is useful in situations where you need more precise\n// control over what happens.\nTransform.prototype.replaceRange = function(from, to, slice) {\n  if (!slice.size) return this.deleteRange(from, to)\n\n  let $from = this.doc.resolve(from), $to = this.doc.resolve(to)\n  if (fitsTrivially($from, $to, slice))\n    return this.step(new ReplaceStep(from, to, slice))\n\n  let targetDepths = coveredDepths($from, this.doc.resolve(to))\n  // Can't replace the whole document, so remove 0 if it's present\n  if (targetDepths[targetDepths.length - 1] == 0) targetDepths.pop()\n  // Negative numbers represent not expansion over the whole node at\n  // that depth, but replacing from $from.before(-D) to $to.pos.\n  let preferredTarget = -($from.depth + 1)\n  targetDepths.unshift(preferredTarget)\n  // This loop picks a preferred target depth, if one of the covering\n  // depths is not outside of a defining node, and adds negative\n  // depths for any depth that has $from at its start and does not\n  // cross a defining node.\n  for (let d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {\n    let spec = $from.node(d).type.spec\n    if (spec.defining || spec.isolating) break\n    if (targetDepths.indexOf(d) > -1) preferredTarget = d\n    else if ($from.before(d) == pos) targetDepths.splice(1, 0, -d)\n  }\n  // Try to fit each possible depth of the slice into each possible\n  // target depth, starting with the preferred depths.\n  let preferredTargetIndex = targetDepths.indexOf(preferredTarget)\n\n  let leftNodes = [], preferredDepth = slice.openStart\n  for (let content = slice.content, i = 0;; i++) {\n    let node = content.firstChild\n    leftNodes.push(node)\n    if (i == slice.openStart) break\n    content = node.content\n  }\n  // Back up if the node directly above openStart, or the node above\n  // that separated only by a non-defining textblock node, is defining.\n  if (preferredDepth > 0 && leftNodes[preferredDepth - 1].type.spec.defining &&\n      $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 1].type)\n    preferredDepth -= 1\n  else if (preferredDepth >= 2 && leftNodes[preferredDepth - 1].isTextblock && leftNodes[preferredDepth - 2].type.spec.defining &&\n           $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 2].type)\n    preferredDepth -= 2\n\n  for (let j = slice.openStart; j >= 0; j--) {\n    let openDepth = (j + preferredDepth + 1) % (slice.openStart + 1)\n    let insert = leftNodes[openDepth]\n    if (!insert) continue\n    for (let i = 0; i < targetDepths.length; i++) {\n      // Loop over possible expansion levels, starting with the\n      // preferred one\n      let targetDepth = targetDepths[(i + preferredTargetIndex) % targetDepths.length], expand = true\n      if (targetDepth < 0) { expand = false; targetDepth = -targetDepth }\n      let parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1)\n      if (parent.canReplaceWith(index, index, insert.type, insert.marks))\n        return this.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to,\n                            new Slice(closeFragment(slice.content, 0, slice.openStart, openDepth),\n                                      openDepth, slice.openEnd))\n    }\n  }\n\n  let startSteps = this.steps.length\n  for (let i = targetDepths.length - 1; i >= 0; i--) {\n    this.replace(from, to, slice)\n    if (this.steps.length > startSteps) break\n    let depth = targetDepths[i]\n    if (depth < 0) continue\n    from = $from.before(depth); to = $to.after(depth)\n  }\n  return this\n}\n\nfunction closeFragment(fragment, depth, oldOpen, newOpen, parent) {\n  if (depth < oldOpen) {\n    let first = fragment.firstChild\n    fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)))\n  }\n  if (depth > newOpen) {\n    let match = parent.contentMatchAt(0)\n    let start = match.fillBefore(fragment).append(fragment)\n    fragment = start.append(match.matchFragment(start).fillBefore(Fragment.empty, true))\n  }\n  return fragment\n}\n\n// :: (number, number, Node) → this\n// Replace the given range with a node, but use `from` and `to` as\n// hints, rather than precise positions. When from and to are the same\n// and are at the start or end of a parent node in which the given\n// node doesn't fit, this method may _move_ them out towards a parent\n// that does allow the given node to be placed. When the given range\n// completely covers a parent node, this method may completely replace\n// that parent node.\nTransform.prototype.replaceRangeWith = function(from, to, node) {\n  if (!node.isInline && from == to && this.doc.resolve(from).parent.content.size) {\n    let point = insertPoint(this.doc, from, node.type)\n    if (point != null) from = to = point\n  }\n  return this.replaceRange(from, to, new Slice(Fragment.from(node), 0, 0))\n}\n\n// :: (number, number) → this\n// Delete the given range, expanding it to cover fully covered\n// parent nodes until a valid replace is found.\nTransform.prototype.deleteRange = function(from, to) {\n  let $from = this.doc.resolve(from), $to = this.doc.resolve(to)\n  let covered = coveredDepths($from, $to)\n  for (let i = 0; i < covered.length; i++) {\n    let depth = covered[i], last = i == covered.length - 1\n    if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd)\n      return this.delete($from.start(depth), $to.end(depth))\n    if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))\n      return this.delete($from.before(depth), $to.after(depth))\n  }\n  for (let d = 1; d <= $from.depth && d <= $to.depth; d++) {\n    if (from - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d)\n      return this.delete($from.before(d), to)\n  }\n  return this.delete(from, to)\n}\n\n// : (ResolvedPos, ResolvedPos) → [number]\n// Returns an array of all depths for which $from - $to spans the\n// whole content of the nodes at that depth.\nfunction coveredDepths($from, $to) {\n  let result = [], minDepth = Math.min($from.depth, $to.depth)\n  for (let d = minDepth; d >= 0; d--) {\n    let start = $from.start(d)\n    if (start < $from.pos - ($from.depth - d) ||\n        $to.end(d) > $to.pos + ($to.depth - d) ||\n        $from.node(d).type.spec.isolating ||\n        $to.node(d).type.spec.isolating) break\n    if (start == $to.start(d)) result.push(d)\n  }\n  return result\n}\n","import {MarkType, Slice, Fragment} from \"prosemirror-model\"\n\nimport {Transform} from \"./transform\"\nimport {AddMarkStep, RemoveMarkStep} from \"./mark_step\"\nimport {ReplaceStep} from \"./replace_step\"\n\n// :: (number, number, Mark) → this\n// Add the given mark to the inline content between `from` and `to`.\nTransform.prototype.addMark = function(from, to, mark) {\n  let removed = [], added = [], removing = null, adding = null\n  this.doc.nodesBetween(from, to, (node, pos, parent) => {\n    if (!node.isInline) return\n    let marks = node.marks\n    if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {\n      let start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to)\n      let newSet = mark.addToSet(marks)\n\n      for (let i = 0; i < marks.length; i++) {\n        if (!marks[i].isInSet(newSet)) {\n          if (removing && removing.to == start && removing.mark.eq(marks[i]))\n            removing.to = end\n          else\n            removed.push(removing = new RemoveMarkStep(start, end, marks[i]))\n        }\n      }\n\n      if (adding && adding.to == start)\n        adding.to = end\n      else\n        added.push(adding = new AddMarkStep(start, end, mark))\n    }\n  })\n\n  removed.forEach(s => this.step(s))\n  added.forEach(s => this.step(s))\n  return this\n}\n\n// :: (number, number, ?union<Mark, MarkType>) → this\n// Remove marks from inline nodes between `from` and `to`. When `mark`\n// is a single mark, remove precisely that mark. When it is a mark type,\n// remove all marks of that type. When it is null, remove all marks of\n// any type.\nTransform.prototype.removeMark = function(from, to, mark = null) {\n  let matched = [], step = 0\n  this.doc.nodesBetween(from, to, (node, pos) => {\n    if (!node.isInline) return\n    step++\n    let toRemove = null\n    if (mark instanceof MarkType) {\n      let set = node.marks, found\n      while (found = mark.isInSet(set)) {\n        ;(toRemove || (toRemove = [])).push(found)\n        set = found.removeFromSet(set)\n      }\n    } else if (mark) {\n      if (mark.isInSet(node.marks)) toRemove = [mark]\n    } else {\n      toRemove = node.marks\n    }\n    if (toRemove && toRemove.length) {\n      let end = Math.min(pos + node.nodeSize, to)\n      for (let i = 0; i < toRemove.length; i++) {\n        let style = toRemove[i], found\n        for (let j = 0; j < matched.length; j++) {\n          let m = matched[j]\n          if (m.step == step - 1 && style.eq(matched[j].style)) found = m\n        }\n        if (found) {\n          found.to = end\n          found.step = step\n        } else {\n          matched.push({style, from: Math.max(pos, from), to: end, step})\n        }\n      }\n    }\n  })\n  matched.forEach(m => this.step(new RemoveMarkStep(m.from, m.to, m.style)))\n  return this\n}\n\n// :: (number, NodeType, ?ContentMatch) → this\n// Removes all marks and nodes from the content of the node at `pos`\n// that don't match the given new parent node type. Accepts an\n// optional starting [content match](#model.ContentMatch) as third\n// argument.\nTransform.prototype.clearIncompatible = function(pos, parentType, match = parentType.contentMatch) {\n  let node = this.doc.nodeAt(pos)\n  let delSteps = [], cur = pos + 1\n  for (let i = 0; i < node.childCount; i++) {\n    let child = node.child(i), end = cur + child.nodeSize\n    let allowed = match.matchType(child.type, child.attrs)\n    if (!allowed) {\n      delSteps.push(new ReplaceStep(cur, end, Slice.empty))\n    } else {\n      match = allowed\n      for (let j = 0; j < child.marks.length; j++) if (!parentType.allowsMarkType(child.marks[j].type))\n        this.step(new RemoveMarkStep(cur, end, child.marks[j]))\n    }\n    cur = end\n  }\n  if (!match.validEnd) {\n    let fill = match.fillBefore(Fragment.empty, true)\n    this.replace(cur, cur, new Slice(fill, 0, 0))\n  }\n  for (let i = delSteps.length - 1; i >= 0; i--) this.step(delSteps[i])\n  return this\n}\n","import {Slice, Fragment} from \"prosemirror-model\"\nimport {ReplaceStep, ReplaceAroundStep} from \"prosemirror-transform\"\n\nconst classesById = Object.create(null)\n\n// ::- Superclass for editor selections. Every selection type should\n// extend this. Should not be instantiated directly.\nexport class Selection {\n  // :: (ResolvedPos, ResolvedPos, ?[SelectionRange])\n  // Initialize a selection with the head and anchor and ranges. If no\n  // ranges are given, constructs a single range across `$anchor` and\n  // `$head`.\n  constructor($anchor, $head, ranges) {\n    // :: [SelectionRange]\n    // The ranges covered by the selection.\n    this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))]\n    // :: ResolvedPos\n    // The resolved anchor of the selection (the side that stays in\n    // place when the selection is modified).\n    this.$anchor = $anchor\n    // :: ResolvedPos\n    // The resolved head of the selection (the side that moves when\n    // the selection is modified).\n    this.$head = $head\n  }\n\n  // :: number\n  // The selection's anchor, as an unresolved position.\n  get anchor() { return this.$anchor.pos }\n\n  // :: number\n  // The selection's head.\n  get head() { return this.$head.pos }\n\n  // :: number\n  // The lower bound of the selection's main range.\n  get from() { return this.$from.pos }\n\n  // :: number\n  // The upper bound of the selection's main range.\n  get to() { return this.$to.pos }\n\n  // :: ResolvedPos\n  // The resolved lower  bound of the selection's main range.\n  get $from() {\n    return this.ranges[0].$from\n  }\n\n  // :: ResolvedPos\n  // The resolved upper bound of the selection's main range.\n  get $to() {\n    return this.ranges[0].$to\n  }\n\n  // :: bool\n  // Indicates whether the selection contains any content.\n  get empty() {\n    let ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++)\n      if (ranges[i].$from.pos != ranges[i].$to.pos) return false\n    return true\n  }\n\n  // eq:: (Selection) → bool\n  // Test whether the selection is the same as another selection.\n\n  // map:: (doc: Node, mapping: Mappable) → Selection\n  // Map this selection through a [mappable](#transform.Mappable) thing. `doc`\n  // should be the new document to which we are mapping.\n\n  // :: () → Slice\n  // Get the content of this selection as a slice.\n  content() {\n    return this.$from.node(0).slice(this.from, this.to, true)\n  }\n\n  // :: (Transaction, ?Slice)\n  // Replace the selection with a slice or, if no slice is given,\n  // delete the selection. Will append to the given transaction.\n  replace(tr, content = Slice.empty) {\n    // Put the new selection at the position after the inserted\n    // content. When that ended in an inline node, search backwards,\n    // to get the position after that node. If not, search forward.\n    let lastNode = content.content.lastChild, lastParent = null\n    for (let i = 0; i < content.openEnd; i++) {\n      lastParent = lastNode\n      lastNode = lastNode.lastChild\n    }\n\n    let mapFrom = tr.steps.length, ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++) {\n      let {$from, $to} = ranges[i], mapping = tr.mapping.slice(mapFrom)\n      tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i ? Slice.empty : content)\n      if (i == 0)\n        selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1)\n    }\n  }\n\n  // :: (Transaction, Node)\n  // Replace the selection with the given node, appending the changes\n  // to the given transaction.\n  replaceWith(tr, node) {\n    let mapFrom = tr.steps.length, ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++) {\n      let {$from, $to} = ranges[i], mapping = tr.mapping.slice(mapFrom)\n      let from = mapping.map($from.pos), to = mapping.map($to.pos)\n      if (i) {\n        tr.deleteRange(from, to)\n      } else {\n        tr.replaceRangeWith(from, to, node)\n        selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1)\n      }\n    }\n  }\n\n  // toJSON:: () → Object\n  // Convert the selection to a JSON representation. When implementing\n  // this for a custom selection class, make sure to give the object a\n  // `type` property whose value matches the ID under which you\n  // [registered](#state.Selection^jsonID) your class.\n\n  // :: (ResolvedPos, number, ?bool) → ?Selection\n  // Find a valid cursor or leaf node selection starting at the given\n  // position and searching back if `dir` is negative, and forward if\n  // positive. When `textOnly` is true, only consider cursor\n  // selections. Will return null when no valid selection position is\n  // found.\n  static findFrom($pos, dir, textOnly) {\n    let inner = $pos.parent.inlineContent ? new TextSelection($pos)\n        : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly)\n    if (inner) return inner\n\n    for (let depth = $pos.depth - 1; depth >= 0; depth--) {\n      let found = dir < 0\n          ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly)\n          : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly)\n      if (found) return found\n    }\n  }\n\n  // :: (ResolvedPos, ?number) → Selection\n  // Find a valid cursor or leaf node selection near the given\n  // position. Searches forward first by default, but if `bias` is\n  // negative, it will search backwards first.\n  static near($pos, bias = 1) {\n    return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0))\n  }\n\n  // :: (Node) → Selection\n  // Find the cursor or leaf node selection closest to the start of\n  // the given document. Will return an\n  // [`AllSelection`](#state.AllSelection) if no valid position\n  // exists.\n  static atStart(doc) {\n    return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc)\n  }\n\n  // :: (Node) → Selection\n  // Find the cursor or leaf node selection closest to the end of the\n  // given document.\n  static atEnd(doc) {\n    return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc)\n  }\n\n  // :: (Node, Object) → Selection\n  // Deserialize the JSON representation of a selection. Must be\n  // implemented for custom classes (as a static class method).\n  static fromJSON(doc, json) {\n    if (!json || !json.type) throw new RangeError(\"Invalid input for Selection.fromJSON\")\n    let cls = classesById[json.type]\n    if (!cls) throw new RangeError(`No selection type ${json.type} defined`)\n    return cls.fromJSON(doc, json)\n  }\n\n  // :: (string, constructor<Selection>)\n  // To be able to deserialize selections from JSON, custom selection\n  // classes must register themselves with an ID string, so that they\n  // can be disambiguated. Try to pick something that's unlikely to\n  // clash with classes from other modules.\n  static jsonID(id, selectionClass) {\n    if (id in classesById) throw new RangeError(\"Duplicate use of selection JSON ID \" + id)\n    classesById[id] = selectionClass\n    selectionClass.prototype.jsonID = id\n    return selectionClass\n  }\n\n  // :: () → SelectionBookmark\n  // Get a [bookmark](#state.SelectionBookmark) for this selection,\n  // which is a value that can be mapped without having access to a\n  // current document, and later resolved to a real selection for a\n  // given document again. (This is used mostly by the history to\n  // track and restore old selections.) The default implementation of\n  // this method just converts the selection to a text selection and\n  // returns the bookmark for that.\n  getBookmark() {\n    return TextSelection.between(this.$anchor, this.$head).getBookmark()\n  }\n}\n\n// :: bool\n// Controls whether, when a selection of this type is active in the\n// browser, the selected range should be visible to the user. Defaults\n// to `true`.\nSelection.prototype.visible = true\n\n// SelectionBookmark:: interface\n// A lightweight, document-independent representation of a selection.\n// You can define a custom bookmark type for a custom selection class\n// to make the history handle it well.\n//\n//   map:: (mapping: Mapping) → SelectionBookmark\n//   Map the bookmark through a set of changes.\n//\n//   resolve:: (doc: Node) → Selection\n//   Resolve the bookmark to a real selection again. This may need to\n//   do some error checking and may fall back to a default (usually\n//   [`TextSelection.between`](#state.TextSelection^between)) if\n//   mapping made the bookmark invalid.\n\n// ::- Represents a selected range in a document.\nexport class SelectionRange {\n  // :: (ResolvedPos, ResolvedPos)\n  constructor($from, $to) {\n    // :: ResolvedPos\n    // The lower bound of the range.\n    this.$from = $from\n    // :: ResolvedPos\n    // The upper bound of the range.\n    this.$to = $to\n  }\n}\n\n// ::- A text selection represents a classical editor selection, with\n// a head (the moving side) and anchor (immobile side), both of which\n// point into textblock nodes. It can be empty (a regular cursor\n// position).\nexport class TextSelection extends Selection {\n  // :: (ResolvedPos, ?ResolvedPos)\n  // Construct a text selection between the given points.\n  constructor($anchor, $head = $anchor) {\n    super($anchor, $head)\n  }\n\n  // :: ?ResolvedPos\n  // Returns a resolved position if this is a cursor selection (an\n  // empty text selection), and null otherwise.\n  get $cursor() { return this.$anchor.pos == this.$head.pos ? this.$head : null }\n\n  map(doc, mapping) {\n    let $head = doc.resolve(mapping.map(this.head))\n    if (!$head.parent.inlineContent) return Selection.near($head)\n    let $anchor = doc.resolve(mapping.map(this.anchor))\n    return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head)\n  }\n\n  replace(tr, content = Slice.empty) {\n    super.replace(tr, content)\n    if (content == Slice.empty) {\n      let marks = this.$from.marksAcross(this.$to)\n      if (marks) tr.ensureMarks(marks)\n    }\n  }\n\n  eq(other) {\n    return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head\n  }\n\n  getBookmark() {\n    return new TextBookmark(this.anchor, this.head)\n  }\n\n  toJSON() {\n    return {type: \"text\", anchor: this.anchor, head: this.head}\n  }\n\n  static fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\" || typeof json.head != \"number\")\n      throw new RangeError(\"Invalid input for TextSelection.fromJSON\")\n    return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head))\n  }\n\n  // :: (Node, number, ?number) → TextSelection\n  // Create a text selection from non-resolved positions.\n  static create(doc, anchor, head = anchor) {\n    let $anchor = doc.resolve(anchor)\n    return new this($anchor, head == anchor ? $anchor : doc.resolve(head))\n  }\n\n  // :: (ResolvedPos, ResolvedPos, ?number) → Selection\n  // Return a text selection that spans the given positions or, if\n  // they aren't text positions, find a text selection near them.\n  // `bias` determines whether the method searches forward (default)\n  // or backwards (negative number) first. Will fall back to calling\n  // [`Selection.near`](#state.Selection^near) when the document\n  // doesn't contain a valid text position.\n  static between($anchor, $head, bias) {\n    let dPos = $anchor.pos - $head.pos\n    if (!bias || dPos) bias = dPos >= 0 ? 1 : -1\n    if (!$head.parent.inlineContent) {\n      let found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true)\n      if (found) $head = found.$head\n      else return Selection.near($head, bias)\n    }\n    if (!$anchor.parent.inlineContent) {\n      if (dPos == 0) {\n        $anchor = $head\n      } else {\n        $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor\n        if (($anchor.pos < $head.pos) != (dPos < 0)) $anchor = $head\n      }\n    }\n    return new TextSelection($anchor, $head)\n  }\n}\n\nSelection.jsonID(\"text\", TextSelection)\n\nclass TextBookmark {\n  constructor(anchor, head) {\n    this.anchor = anchor\n    this.head = head\n  }\n  map(mapping) {\n    return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head))\n  }\n  resolve(doc) {\n    return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head))\n  }\n}\n\n// ::- A node selection is a selection that points at a single node.\n// All nodes marked [selectable](#model.NodeSpec.selectable) can be\n// the target of a node selection. In such a selection, `from` and\n// `to` point directly before and after the selected node, `anchor`\n// equals `from`, and `head` equals `to`..\nexport class NodeSelection extends Selection {\n  // :: (ResolvedPos)\n  // Create a node selection. Does not verify the validity of its\n  // argument.\n  constructor($pos) {\n    let node = $pos.nodeAfter\n    let $end = $pos.node(0).resolve($pos.pos + node.nodeSize)\n    super($pos, $end)\n    // :: Node The selected node.\n    this.node = node\n  }\n\n  map(doc, mapping) {\n    let {deleted, pos} = mapping.mapResult(this.anchor)\n    let $pos = doc.resolve(pos)\n    if (deleted) return Selection.near($pos)\n    return new NodeSelection($pos)\n  }\n\n  content() {\n    return new Slice(Fragment.from(this.node), 0, 0)\n  }\n\n  eq(other) {\n    return other instanceof NodeSelection && other.anchor == this.anchor\n  }\n\n  toJSON() {\n    return {type: \"node\", anchor: this.anchor}\n  }\n\n  getBookmark() { return new NodeBookmark(this.anchor) }\n\n  static fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\")\n      throw new RangeError(\"Invalid input for NodeSelection.fromJSON\")\n    return new NodeSelection(doc.resolve(json.anchor))\n  }\n\n  // :: (Node, number) → NodeSelection\n  // Create a node selection from non-resolved positions.\n  static create(doc, from) {\n    return new this(doc.resolve(from))\n  }\n\n  // :: (Node) → bool\n  // Determines whether the given node may be selected as a node\n  // selection.\n  static isSelectable(node) {\n    return !node.isText && node.type.spec.selectable !== false\n  }\n}\n\nNodeSelection.prototype.visible = false\n\nSelection.jsonID(\"node\", NodeSelection)\n\nclass NodeBookmark {\n  constructor(anchor) {\n    this.anchor = anchor\n  }\n  map(mapping) {\n    let {deleted, pos} = mapping.mapResult(this.anchor)\n    return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos)\n  }\n  resolve(doc) {\n    let $pos = doc.resolve(this.anchor), node = $pos.nodeAfter\n    if (node && NodeSelection.isSelectable(node)) return new NodeSelection($pos)\n    return Selection.near($pos)\n  }\n}\n\n// ::- A selection type that represents selecting the whole document\n// (which can not necessarily be expressed with a text selection, when\n// there are for example leaf block nodes at the start or end of the\n// document).\nexport class AllSelection extends Selection {\n  // :: (Node)\n  // Create an all-selection over the given document.\n  constructor(doc) {\n    super(doc.resolve(0), doc.resolve(doc.content.size))\n  }\n\n  replace(tr, content = Slice.empty) {\n    if (content == Slice.empty) {\n      tr.delete(0, tr.doc.content.size)\n      let sel = Selection.atStart(tr.doc)\n      if (!sel.eq(tr.selection)) tr.setSelection(sel)\n    } else {\n      super.replace(tr, content)\n    }\n  }\n\n  toJSON() { return {type: \"all\"} }\n\n  static fromJSON(doc) { return new AllSelection(doc) }\n\n  map(doc) { return new AllSelection(doc) }\n\n  eq(other) { return other instanceof AllSelection }\n\n  getBookmark() { return AllBookmark }\n}\n\nSelection.jsonID(\"all\", AllSelection)\n\nconst AllBookmark = {\n  map() { return this },\n  resolve(doc) { return new AllSelection(doc) }\n}\n\n// FIXME we'll need some awareness of text direction when scanning for selections\n\n// Try to find a selection inside the given node. `pos` points at the\n// position where the search starts. When `text` is true, only return\n// text selections.\nfunction findSelectionIn(doc, node, pos, index, dir, text) {\n  if (node.inlineContent) return TextSelection.create(doc, pos)\n  for (let i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {\n    let child = node.child(i)\n    if (!child.isAtom) {\n      let inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text)\n      if (inner) return inner\n    } else if (!text && NodeSelection.isSelectable(child)) {\n      return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0))\n    }\n    pos += child.nodeSize * dir\n  }\n}\n\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n  let last = tr.steps.length - 1\n  if (last < startLen) return\n  let step = tr.steps[last]\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) return\n  let map = tr.mapping.maps[last], end\n  map.forEach((_from, _to, _newFrom, newTo) => { if (end == null) end = newTo })\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias))\n}\n","import {Transform} from \"prosemirror-transform\"\nimport {Mark} from \"prosemirror-model\"\nimport {Selection} from \"./selection\"\n\nconst UPDATED_SEL = 1, UPDATED_MARKS = 2, UPDATED_SCROLL = 4\n\n// ::- An editor state transaction, which can be applied to a state to\n// create an updated state. Use\n// [`EditorState.tr`](#state.EditorState.tr) to create an instance.\n//\n// Transactions track changes to the document (they are a subclass of\n// [`Transform`](#transform.Transform)), but also other state changes,\n// like selection updates and adjustments of the set of [stored\n// marks](#state.EditorState.storedMarks). In addition, you can store\n// metadata properties in a transaction, which are extra pieces of\n// information that client code or plugins can use to describe what a\n// transacion represents, so that they can update their [own\n// state](#state.StateField) accordingly.\n//\n// The [editor view](#view.EditorView) uses a few metadata properties:\n// it will attach a property `\"pointer\"` with the value `true` to\n// selection transactions directly caused by mouse or touch input, and\n// a `\"uiEvent\"` property of that may be `\"paste\"`, `\"cut\"`, or `\"drop\"`.\nexport class Transaction extends Transform {\n  constructor(state) {\n    super(state.doc)\n    // :: number\n    // The timestamp associated with this transaction, in the same\n    // format as `Date.now()`.\n    this.time = Date.now()\n    this.curSelection = state.selection\n    // The step count for which the current selection is valid.\n    this.curSelectionFor = 0\n    // :: ?[Mark]\n    // The stored marks set by this transaction, if any.\n    this.storedMarks = state.storedMarks\n    // Bitfield to track which aspects of the state were updated by\n    // this transaction.\n    this.updated = 0\n    // Object used to store metadata properties for the transaction.\n    this.meta = Object.create(null)\n  }\n\n  // :: Selection\n  // The transaction's current selection. This defaults to the editor\n  // selection [mapped](#state.Selection.map) through the steps in the\n  // transaction, but can be overwritten with\n  // [`setSelection`](#state.Transaction.setSelection).\n  get selection() {\n    if (this.curSelectionFor < this.steps.length) {\n      this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor))\n      this.curSelectionFor = this.steps.length\n    }\n    return this.curSelection\n  }\n\n  // :: (Selection) → Transaction\n  // Update the transaction's current selection. Will determine the\n  // selection that the editor gets when the transaction is applied.\n  setSelection(selection) {\n    if (selection.$from.doc != this.doc)\n      throw new RangeError(\"Selection passed to setSelection must point at the current document\")\n    this.curSelection = selection\n    this.curSelectionFor = this.steps.length\n    this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS\n    this.storedMarks = null\n    return this\n  }\n\n  // :: bool\n  // Whether the selection was explicitly updated by this transaction.\n  get selectionSet() {\n    return (this.updated & UPDATED_SEL) > 0\n  }\n\n  // :: (?[Mark]) → Transaction\n  // Set the current stored marks.\n  setStoredMarks(marks) {\n    this.storedMarks = marks\n    this.updated |= UPDATED_MARKS\n    return this\n  }\n\n  // :: ([Mark]) → Transaction\n  // Make sure the current stored marks or, if that is null, the marks\n  // at the selection, match the given set of marks. Does nothing if\n  // this is already the case.\n  ensureMarks(marks) {\n    if (!Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks))\n      this.setStoredMarks(marks)\n    return this\n  }\n\n  // :: (Mark) → Transaction\n  // Add a mark to the set of stored marks.\n  addStoredMark(mark) {\n    return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()))\n  }\n\n  // :: (union<Mark, MarkType>) → Transaction\n  // Remove a mark or mark type from the set of stored marks.\n  removeStoredMark(mark) {\n    return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()))\n  }\n\n  // :: bool\n  // Whether the stored marks were explicitly set for this transaction.\n  get storedMarksSet() {\n    return (this.updated & UPDATED_MARKS) > 0\n  }\n\n  addStep(step, doc) {\n    super.addStep(step, doc)\n    this.updated = this.updated & ~UPDATED_MARKS\n    this.storedMarks = null\n  }\n\n  // :: (number) → Transaction\n  // Update the timestamp for the transaction.\n  setTime(time) {\n    this.time = time\n    return this\n  }\n\n  // :: (Slice) → Transaction\n  // Replace the current selection with the given slice.\n  replaceSelection(slice) {\n    this.selection.replace(this, slice)\n    return this\n  }\n\n  // :: (Node, ?bool) → Transaction\n  // Replace the selection with the given node. When `inheritMarks` is\n  // true and the content is inline, it inherits the marks from the\n  // place where it is inserted.\n  replaceSelectionWith(node, inheritMarks) {\n    let selection = this.selection\n    if (inheritMarks !== false)\n      node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : (selection.$from.marksAcross(selection.$to) || Mark.none)))\n    selection.replaceWith(this, node)\n    return this\n  }\n\n  // :: () → Transaction\n  // Delete the selection.\n  deleteSelection() {\n    this.selection.replace(this)\n    return this\n  }\n\n  // :: (string, from: ?number, to: ?number) → Transaction\n  // Replace the given range, or the selection if no range is given,\n  // with a text node containing the given string.\n  insertText(text, from, to = from) {\n    let schema = this.doc.type.schema\n    if (from == null) {\n      if (!text) return this.deleteSelection()\n      return this.replaceSelectionWith(schema.text(text), true)\n    } else {\n      if (!text) return this.deleteRange(from, to)\n      let marks = this.storedMarks\n      if (!marks) {\n        let $from = this.doc.resolve(from)\n        marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to))\n      }\n      this.replaceRangeWith(from, to, schema.text(text, marks))\n      if (!this.selection.empty) this.setSelection(Selection.near(this.selection.$to))\n      return this\n    }\n  }\n\n  // :: (union<string, Plugin, PluginKey>, any) → Transaction\n  // Store a metadata property in this transaction, keyed either by\n  // name or by plugin.\n  setMeta(key, value) {\n    this.meta[typeof key == \"string\" ? key : key.key] = value\n    return this\n  }\n\n  // :: (union<string, Plugin, PluginKey>) → any\n  // Retrieve a metadata property for a given name or plugin.\n  getMeta(key) {\n    return this.meta[typeof key == \"string\" ? key : key.key]\n  }\n\n  // :: bool\n  // Returns true if this transaction doesn't contain any metadata,\n  // and can thus safely be extended.\n  get isGeneric() {\n    for (let _ in this.meta) return false\n    return true\n  }\n\n  // :: () → Transaction\n  // Indicate that the editor should scroll the selection into view\n  // when updated to the state produced by this transaction.\n  scrollIntoView() {\n    this.updated |= UPDATED_SCROLL\n    return this\n  }\n\n  get scrolledIntoView() {\n    return (this.updated & UPDATED_SCROLL) > 0\n  }\n}\n","import {Node} from \"prosemirror-model\"\n\nimport {Selection} from \"./selection\"\nimport {Transaction} from \"./transaction\"\n\nfunction bind(f, self) {\n  return !self || !f ? f : f.bind(self)\n}\n\nclass FieldDesc {\n  constructor(name, desc, self) {\n    this.name = name\n    this.init = bind(desc.init, self)\n    this.apply = bind(desc.apply, self)\n  }\n}\n\nconst baseFields = [\n  new FieldDesc(\"doc\", {\n    init(config) { return config.doc || config.schema.topNodeType.createAndFill() },\n    apply(tr) { return tr.doc }\n  }),\n\n  new FieldDesc(\"selection\", {\n    init(config, instance) { return config.selection || Selection.atStart(instance.doc) },\n    apply(tr) { return tr.selection }\n  }),\n\n  new FieldDesc(\"storedMarks\", {\n    init(config) { return config.storedMarks || null },\n    apply(tr, _marks, _old, state) { return state.selection.$cursor ? tr.storedMarks : null }\n  }),\n\n  new FieldDesc(\"scrollToSelection\", {\n    init() { return 0 },\n    apply(tr, prev) { return tr.scrolledIntoView ? prev + 1 : prev }\n  })\n]\n\n// Object wrapping the part of a state object that stays the same\n// across transactions. Stored in the state's `config` property.\nclass Configuration {\n  constructor(schema, plugins) {\n    this.schema = schema\n    this.fields = baseFields.concat()\n    this.plugins = []\n    this.pluginsByKey = Object.create(null)\n    if (plugins) plugins.forEach(plugin => {\n      if (this.pluginsByKey[plugin.key])\n        throw new RangeError(\"Adding different instances of a keyed plugin (\" + plugin.key + \")\")\n      this.plugins.push(plugin)\n      this.pluginsByKey[plugin.key] = plugin\n      if (plugin.spec.state)\n        this.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin))\n    })\n  }\n}\n\n// ::- The state of a ProseMirror editor is represented by an object\n// of this type. A state is a persistent data structure—it isn't\n// updated, but rather a new state value is computed from an old one\n// using the [`apply`](#state.EditorState.apply) method.\n//\n// A state holds a number of built-in fields, and plugins can\n// [define](#state.PluginSpec.state) additional fields.\nexport class EditorState {\n  constructor(config) {\n    this.config = config\n  }\n\n  // doc:: Node\n  // The current document.\n\n  // selection:: Selection\n  // The selection.\n\n  // storedMarks:: ?[Mark]\n  // A set of marks to apply to the next input. Will be null when\n  // no explicit marks have been set.\n\n  // :: Schema\n  // The schema of the state's document.\n  get schema() {\n    return this.config.schema\n  }\n\n  // :: [Plugin]\n  // The plugins that are active in this state.\n  get plugins() {\n    return this.config.plugins\n  }\n\n  // :: (Transaction) → EditorState\n  // Apply the given transaction to produce a new state.\n  apply(tr) {\n    return this.applyTransaction(tr).state\n  }\n\n  // : (Transaction) → bool\n  filterTransaction(tr, ignore = -1) {\n    for (let i = 0; i < this.config.plugins.length; i++) if (i != ignore) {\n      let plugin = this.config.plugins[i]\n      if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this))\n        return false\n    }\n    return true\n  }\n\n  // :: (Transaction) → {state: EditorState, transactions: [Transaction]}\n  // Verbose variant of [`apply`](#state.EditorState.apply) that\n  // returns the precise transactions that were applied (which might\n  // be influenced by the [transaction\n  // hooks](#state.PluginSpec.filterTransaction) of\n  // plugins) along with the new state.\n  applyTransaction(rootTr) {\n    if (!this.filterTransaction(rootTr)) return {state: this, transactions: []}\n\n    let trs = [rootTr], newState = this.applyInner(rootTr), seen = null\n    // This loop repeatedly gives plugins a chance to respond to\n    // transactions as new transactions are added, making sure to only\n    // pass the transactions the plugin did not see before.\n    outer: for (;;) {\n      let haveNew = false\n      for (let i = 0; i < this.config.plugins.length; i++) {\n        let plugin = this.config.plugins[i]\n        if (plugin.spec.appendTransaction) {\n          let n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this\n          let tr = n < trs.length &&\n              plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState)\n          if (tr && newState.filterTransaction(tr, i)) {\n            tr.setMeta(\"appendedTransaction\", rootTr)\n            if (!seen) {\n              seen = []\n              for (let j = 0; j < this.config.plugins.length; j++)\n                seen.push(j < i ? {state: newState, n: trs.length} : {state: this, n: 0})\n            }\n            trs.push(tr)\n            newState = newState.applyInner(tr)\n            haveNew = true\n          }\n          if (seen) seen[i] = {state: newState, n: trs.length}\n        }\n      }\n      if (!haveNew) return {state: newState, transactions: trs}\n    }\n  }\n\n  // : (Transaction) → EditorState\n  applyInner(tr) {\n    if (!tr.before.eq(this.doc)) throw new RangeError(\"Applying a mismatched transaction\")\n    let newInstance = new EditorState(this.config), fields = this.config.fields\n    for (let i = 0; i < fields.length; i++) {\n      let field = fields[i]\n      newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance)\n    }\n    for (let i = 0; i < applyListeners.length; i++) applyListeners[i](this, tr, newInstance)\n    return newInstance\n  }\n\n  // :: Transaction\n  // Start a [transaction](#state.Transaction) from this state.\n  get tr() { return new Transaction(this) }\n\n  // :: (Object) → EditorState\n  // Create a new state.\n  //\n  //   config::- Configuration options. Must contain `schema` or `doc` (or both).\n  //\n  //      schema:: ?Schema\n  //      The schema to use (only relevant if no `doc` is specified).\n  //\n  //      doc:: ?Node\n  //      The starting document.\n  //\n  //      selection:: ?Selection\n  //      A valid selection in the document.\n  //\n  //      storedMarks:: ?[Mark]\n  //      The initial set of [stored marks](#state.EditorState.storedMarks).\n  //\n  //      plugins:: ?[Plugin]\n  //      The plugins that should be active in this state.\n  static create(config) {\n    let $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins)\n    let instance = new EditorState($config)\n    for (let i = 0; i < $config.fields.length; i++)\n      instance[$config.fields[i].name] = $config.fields[i].init(config, instance)\n    return instance\n  }\n\n  // :: (Object) → EditorState\n  // Create a new state based on this one, but with an adjusted set of\n  // active plugins. State fields that exist in both sets of plugins\n  // are kept unchanged. Those that no longer exist are dropped, and\n  // those that are new are initialized using their\n  // [`init`](#state.StateField.init) method, passing in the new\n  // configuration object..\n  //\n  //   config::- configuration options\n  //\n  //     plugins:: [Plugin]\n  //     New set of active plugins.\n  reconfigure(config) {\n    let $config = new Configuration(this.schema, config.plugins)\n    let fields = $config.fields, instance = new EditorState($config)\n    for (let i = 0; i < fields.length; i++) {\n      let name = fields[i].name\n      instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance)\n    }\n    return instance\n  }\n\n  // :: (?union<Object<Plugin>, string, number>) → Object\n  // Serialize this state to JSON. If you want to serialize the state\n  // of plugins, pass an object mapping property names to use in the\n  // resulting JSON object to plugin objects. The argument may also be\n  // a string or number, in which case it is ignored, to support the\n  // way `JSON.stringify` calls `toString` methods.\n  toJSON(pluginFields) {\n    let result = {doc: this.doc.toJSON(), selection: this.selection.toJSON()}\n    if (this.storedMarks) result.storedMarks = this.storedMarks.map(m => m.toJSON())\n    if (pluginFields && typeof pluginFields == 'object') for (let prop in pluginFields) {\n      if (prop == \"doc\" || prop == \"selection\")\n        throw new RangeError(\"The JSON fields `doc` and `selection` are reserved\")\n      let plugin = pluginFields[prop], state = plugin.spec.state\n      if (state && state.toJSON) result[prop] = state.toJSON.call(plugin, this[plugin.key])\n    }\n    return result\n  }\n\n  // :: (Object, Object, ?Object<Plugin>) → EditorState\n  // Deserialize a JSON representation of a state. `config` should\n  // have at least a `schema` field, and should contain array of\n  // plugins to initialize the state with. `pluginFields` can be used\n  // to deserialize the state of plugins, by associating plugin\n  // instances with the property names they use in the JSON object.\n  //\n  //   config::- configuration options\n  //\n  //     schema:: Schema\n  //     The schema to use.\n  //\n  //     plugins:: ?[Plugin]\n  //     The set of active plugins.\n  static fromJSON(config, json, pluginFields) {\n    if (!json) throw new RangeError(\"Invalid input for EditorState.fromJSON\")\n    if (!config.schema) throw new RangeError(\"Required config field 'schema' missing\")\n    let $config = new Configuration(config.schema, config.plugins)\n    let instance = new EditorState($config)\n    $config.fields.forEach(field => {\n      if (field.name == \"doc\") {\n        instance.doc = Node.fromJSON(config.schema, json.doc)\n      } else if (field.name == \"selection\") {\n        instance.selection = Selection.fromJSON(instance.doc, json.selection)\n      } else if (field.name == \"storedMarks\") {\n        if (json.storedMarks) instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON)\n      } else {\n        if (pluginFields) for (let prop in pluginFields) {\n          let plugin = pluginFields[prop], state = plugin.spec.state\n          if (plugin.key == field.name && state && state.fromJSON &&\n              Object.prototype.hasOwnProperty.call(json, prop)) {\n            // This field belongs to a plugin mapped to a JSON field, read it from there.\n            instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance)\n            return\n          }\n        }\n        instance[field.name] = field.init(config, instance)\n      }\n    })\n    return instance\n  }\n\n  // Kludge to allow the view to track mappings between different\n  // instances of a state.\n  //\n  // FIXME this is no longer needed as of prosemirror-view 1.9.0,\n  // though due to backwards-compat we should probably keep it around\n  // for a while (if only as a no-op)\n  static addApplyListener(f) {\n    applyListeners.push(f)\n  }\n  static removeApplyListener(f) {\n    let found = applyListeners.indexOf(f)\n    if (found > -1) applyListeners.splice(found, 1)\n  }\n}\n\nconst applyListeners = []\n","import {joinPoint, canJoin, findWrapping, liftTarget, canSplit, ReplaceAroundStep} from \"prosemirror-transform\"\nimport {Slice, Fragment} from \"prosemirror-model\"\nimport {Selection, TextSelection, NodeSelection, AllSelection} from \"prosemirror-state\"\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Delete the selection, if there is one.\nexport function deleteSelection(state, dispatch) {\n  if (state.selection.empty) return false\n  if (dispatch) dispatch(state.tr.deleteSelection().scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) → bool\n// If the selection is empty and at the start of a textblock, try to\n// reduce the distance between that block and the one before it—if\n// there's a block directly before it that can be joined, join them.\n// If not, try to move the selected block closer to the next one in\n// the document structure by lifting it out of its parent or moving it\n// into a parent of the previous block. Will use the view for accurate\n// (bidi-aware) start-of-textblock detection if given.\nexport function joinBackward(state, dispatch, view) {\n  let {$cursor} = state.selection\n  if (!$cursor || (view ? !view.endOfTextblock(\"backward\", state)\n                        : $cursor.parentOffset > 0))\n    return false\n\n  let $cut = findCutBefore($cursor)\n\n  // If there is no node before this, try to lift\n  if (!$cut) {\n    let range = $cursor.blockRange(), target = range && liftTarget(range)\n    if (target == null) return false\n    if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n    return true\n  }\n\n  let before = $cut.nodeBefore\n  // Apply the joining algorithm\n  if (!before.type.spec.isolating && deleteBarrier(state, $cut, dispatch))\n    return true\n\n  // If the node below has no content and the node above is\n  // selectable, delete the node below and select the one above.\n  if ($cursor.parent.content.size == 0 &&\n      (textblockAt(before, \"end\") || NodeSelection.isSelectable(before))) {\n    if (dispatch) {\n      let tr = state.tr.deleteRange($cursor.before(), $cursor.after())\n      tr.setSelection(textblockAt(before, \"end\") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos, -1)), -1)\n                      : NodeSelection.create(tr.doc, $cut.pos - before.nodeSize))\n      dispatch(tr.scrollIntoView())\n    }\n    return true\n  }\n\n  // If the node before is an atom, delete it\n  if (before.isAtom && $cut.depth == $cursor.depth - 1) {\n    if (dispatch) dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView())\n    return true\n  }\n\n  return false\n}\n\nfunction textblockAt(node, side) {\n  for (; node; node = (side == \"start\" ? node.firstChild : node.lastChild))\n    if (node.isTextblock) return true\n  return false\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) → bool\n// When the selection is empty and at the start of a textblock, select\n// the node before that textblock, if possible. This is intended to be\n// bound to keys like backspace, after\n// [`joinBackward`](#commands.joinBackward) or other deleting\n// commands, as a fall-back behavior when the schema doesn't allow\n// deletion at the selected point.\nexport function selectNodeBackward(state, dispatch, view) {\n  let {$head, empty} = state.selection, $cut = $head\n  if (!empty) return false\n\n  if ($head.parent.isTextblock) {\n    if (view ? !view.endOfTextblock(\"backward\", state) : $head.parentOffset > 0) return false\n    $cut = findCutBefore($head)\n  }\n  let node = $cut && $cut.nodeBefore\n  if (!node || !NodeSelection.isSelectable(node)) return false\n  if (dispatch)\n    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos - node.nodeSize)).scrollIntoView())\n  return true\n}\n\nfunction findCutBefore($pos) {\n  if (!$pos.parent.type.spec.isolating) for (let i = $pos.depth - 1; i >= 0; i--) {\n    if ($pos.index(i) > 0) return $pos.doc.resolve($pos.before(i + 1))\n    if ($pos.node(i).type.spec.isolating) break\n  }\n  return null\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) → bool\n// If the selection is empty and the cursor is at the end of a\n// textblock, try to reduce or remove the boundary between that block\n// and the one after it, either by joining them or by moving the other\n// block closer to this one in the tree structure. Will use the view\n// for accurate start-of-textblock detection if given.\nexport function joinForward(state, dispatch, view) {\n  let {$cursor} = state.selection\n  if (!$cursor || (view ? !view.endOfTextblock(\"forward\", state)\n                        : $cursor.parentOffset < $cursor.parent.content.size))\n    return false\n\n  let $cut = findCutAfter($cursor)\n\n  // If there is no node after this, there's nothing to do\n  if (!$cut) return false\n\n  let after = $cut.nodeAfter\n  // Try the joining algorithm\n  if (deleteBarrier(state, $cut, dispatch)) return true\n\n  // If the node above has no content and the node below is\n  // selectable, delete the node above and select the one below.\n  if ($cursor.parent.content.size == 0 &&\n      (textblockAt(after, \"start\") || NodeSelection.isSelectable(after))) {\n    if (dispatch) {\n      let tr = state.tr.deleteRange($cursor.before(), $cursor.after())\n      tr.setSelection(textblockAt(after, \"start\") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1)\n                      : NodeSelection.create(tr.doc, tr.mapping.map($cut.pos)))\n      dispatch(tr.scrollIntoView())\n    }\n    return true\n  }\n\n  // If the next node is an atom, delete it\n  if (after.isAtom && $cut.depth == $cursor.depth - 1) {\n    if (dispatch) dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView())\n    return true\n  }\n\n  return false\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) → bool\n// When the selection is empty and at the end of a textblock, select\n// the node coming after that textblock, if possible. This is intended\n// to be bound to keys like delete, after\n// [`joinForward`](#commands.joinForward) and similar deleting\n// commands, to provide a fall-back behavior when the schema doesn't\n// allow deletion at the selected point.\nexport function selectNodeForward(state, dispatch, view) {\n  let {$head, empty} = state.selection, $cut = $head\n  if (!empty) return false\n  if ($head.parent.isTextblock) {\n    if (view ? !view.endOfTextblock(\"forward\", state) : $head.parentOffset < $head.parent.content.size)\n      return false\n    $cut = findCutAfter($head)\n  }\n  let node = $cut && $cut.nodeAfter\n  if (!node || !NodeSelection.isSelectable(node)) return false\n  if (dispatch)\n    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos)).scrollIntoView())\n  return true\n}\n\nfunction findCutAfter($pos) {\n  if (!$pos.parent.type.spec.isolating) for (let i = $pos.depth - 1; i >= 0; i--) {\n    let parent = $pos.node(i)\n    if ($pos.index(i) + 1 < parent.childCount) return $pos.doc.resolve($pos.after(i + 1))\n    if (parent.type.spec.isolating) break\n  }\n  return null\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Join the selected block or, if there is a text selection, the\n// closest ancestor block of the selection that can be joined, with\n// the sibling above it.\nexport function joinUp(state, dispatch) {\n  let sel = state.selection, nodeSel = sel instanceof NodeSelection, point\n  if (nodeSel) {\n    if (sel.node.isTextblock || !canJoin(state.doc, sel.from)) return false\n    point = sel.from\n  } else {\n    point = joinPoint(state.doc, sel.from, -1)\n    if (point == null) return false\n  }\n  if (dispatch) {\n    let tr = state.tr.join(point)\n    if (nodeSel) tr.setSelection(NodeSelection.create(tr.doc, point - state.doc.resolve(point).nodeBefore.nodeSize))\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Join the selected block, or the closest ancestor of the selection\n// that can be joined, with the sibling after it.\nexport function joinDown(state, dispatch) {\n  let sel = state.selection, point\n  if (sel instanceof NodeSelection) {\n    if (sel.node.isTextblock || !canJoin(state.doc, sel.to)) return false\n    point = sel.to\n  } else {\n    point = joinPoint(state.doc, sel.to, 1)\n    if (point == null) return false\n  }\n  if (dispatch)\n    dispatch(state.tr.join(point).scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Lift the selected block, or the closest ancestor block of the\n// selection that can be lifted, out of its parent node.\nexport function lift(state, dispatch) {\n  let {$from, $to} = state.selection\n  let range = $from.blockRange($to), target = range && liftTarget(range)\n  if (target == null) return false\n  if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// If the selection is in a node whose type has a truthy\n// [`code`](#model.NodeSpec.code) property in its spec, replace the\n// selection with a newline character.\nexport function newlineInCode(state, dispatch) {\n  let {$head, $anchor} = state.selection\n  if (!$head.parent.type.spec.code || !$head.sameParent($anchor)) return false\n  if (dispatch) dispatch(state.tr.insertText(\"\\n\").scrollIntoView())\n  return true\n}\n\nfunction defaultBlockAt(match) {\n  for (let i = 0; i < match.edgeCount; i++) {\n    let {type} = match.edge(i)\n    if (type.isTextblock && !type.hasRequiredAttrs()) return type\n  }\n  return null\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// When the selection is in a node with a truthy\n// [`code`](#model.NodeSpec.code) property in its spec, create a\n// default block after the code block, and move the cursor there.\nexport function exitCode(state, dispatch) {\n  let {$head, $anchor} = state.selection\n  if (!$head.parent.type.spec.code || !$head.sameParent($anchor)) return false\n  let above = $head.node(-1), after = $head.indexAfter(-1), type = defaultBlockAt(above.contentMatchAt(after))\n  if (!above.canReplaceWith(after, after, type)) return false\n  if (dispatch) {\n    let pos = $head.after(), tr = state.tr.replaceWith(pos, pos, type.createAndFill())\n    tr.setSelection(Selection.near(tr.doc.resolve(pos), 1))\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// If a block node is selected, create an empty paragraph before (if\n// it is its parent's first child) or after it.\nexport function createParagraphNear(state, dispatch) {\n  let sel = state.selection, {$from, $to} = sel\n  if (sel instanceof AllSelection || $from.parent.inlineContent || $to.parent.inlineContent) return false\n  let type = defaultBlockAt($to.parent.contentMatchAt($to.indexAfter()))\n  if (!type || !type.isTextblock) return false\n  if (dispatch) {\n    let side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos\n    let tr = state.tr.insert(side, type.createAndFill())\n    tr.setSelection(TextSelection.create(tr.doc, side + 1))\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// If the cursor is in an empty textblock that can be lifted, lift the\n// block.\nexport function liftEmptyBlock(state, dispatch) {\n  let {$cursor} = state.selection\n  if (!$cursor || $cursor.parent.content.size) return false\n  if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {\n    let before = $cursor.before()\n    if (canSplit(state.doc, before)) {\n      if (dispatch) dispatch(state.tr.split(before).scrollIntoView())\n      return true\n    }\n  }\n  let range = $cursor.blockRange(), target = range && liftTarget(range)\n  if (target == null) return false\n  if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Split the parent block of the selection. If the selection is a text\n// selection, also delete its content.\nexport function splitBlock(state, dispatch) {\n  let {$from, $to} = state.selection\n  if (state.selection instanceof NodeSelection && state.selection.node.isBlock) {\n    if (!$from.parentOffset || !canSplit(state.doc, $from.pos)) return false\n    if (dispatch) dispatch(state.tr.split($from.pos).scrollIntoView())\n    return true\n  }\n\n  if (!$from.parent.isBlock) return false\n\n  if (dispatch) {\n    let atEnd = $to.parentOffset == $to.parent.content.size\n    let tr = state.tr\n    if (state.selection instanceof TextSelection || state.selection instanceof AllSelection) tr.deleteSelection()\n    let deflt = $from.depth == 0 ? null : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)))\n    let types = atEnd && deflt ? [{type: deflt}] : null\n    let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types)\n    if (!types && !can && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt && [{type: deflt}])) {\n      types = [{type: deflt}]\n      can = true\n    }\n    if (can) {\n      tr.split(tr.mapping.map($from.pos), 1, types)\n      if (!atEnd && !$from.parentOffset && $from.parent.type != deflt &&\n          $from.node(-1).canReplace($from.index(-1), $from.indexAfter(-1), Fragment.from([deflt.create(), $from.parent])))\n        tr.setNodeMarkup(tr.mapping.map($from.before()), deflt)\n    }\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Acts like [`splitBlock`](#commands.splitBlock), but without\n// resetting the set of active marks at the cursor.\nexport function splitBlockKeepMarks(state, dispatch) {\n  return splitBlock(state, dispatch && (tr => {\n    let marks = state.storedMarks || (state.selection.$to.parentOffset && state.selection.$from.marks())\n    if (marks) tr.ensureMarks(marks)\n    dispatch(tr)\n  }))\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Move the selection to the node wrapping the current selection, if\n// any. (Will not select the document node.)\nexport function selectParentNode(state, dispatch) {\n  let {$from, to} = state.selection, pos\n  let same = $from.sharedDepth(to)\n  if (same == 0) return false\n  pos = $from.before(same)\n  if (dispatch) dispatch(state.tr.setSelection(NodeSelection.create(state.doc, pos)))\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Select the whole document.\nexport function selectAll(state, dispatch) {\n  if (dispatch) dispatch(state.tr.setSelection(new AllSelection(state.doc)))\n  return true\n}\n\nfunction joinMaybeClear(state, $pos, dispatch) {\n  let before = $pos.nodeBefore, after = $pos.nodeAfter, index = $pos.index()\n  if (!before || !after || !before.type.compatibleContent(after.type)) return false\n  if (!before.content.size && $pos.parent.canReplace(index - 1, index)) {\n    if (dispatch) dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView())\n    return true\n  }\n  if (!$pos.parent.canReplace(index, index + 1) || !(after.isTextblock || canJoin(state.doc, $pos.pos)))\n    return false\n  if (dispatch)\n    dispatch(state.tr\n             .clearIncompatible($pos.pos, before.type, before.contentMatchAt(before.childCount))\n             .join($pos.pos)\n             .scrollIntoView())\n  return true\n}\n\nfunction deleteBarrier(state, $cut, dispatch) {\n  let before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match\n  if (before.type.spec.isolating || after.type.spec.isolating) return false\n  if (joinMaybeClear(state, $cut, dispatch)) return true\n\n  let canDelAfter = $cut.parent.canReplace($cut.index(), $cut.index() + 1)\n  if (canDelAfter &&\n      (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(after.type)) &&\n      match.matchType(conn[0] || after.type).validEnd) {\n    if (dispatch) {\n      let end = $cut.pos + after.nodeSize, wrap = Fragment.empty\n      for (let i = conn.length - 1; i >= 0; i--)\n        wrap = Fragment.from(conn[i].create(null, wrap))\n      wrap = Fragment.from(before.copy(wrap))\n      let tr = state.tr.step(new ReplaceAroundStep($cut.pos - 1, end, $cut.pos, end, new Slice(wrap, 1, 0), conn.length, true))\n      let joinAt = end + 2 * conn.length\n      if (canJoin(tr.doc, joinAt)) tr.join(joinAt)\n      dispatch(tr.scrollIntoView())\n    }\n    return true\n  }\n\n  let selAfter = Selection.findFrom($cut, 1)\n  let range = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range && liftTarget(range)\n  if (target != null && target >= $cut.depth) {\n    if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n    return true\n  }\n\n  if (canDelAfter && after.isTextblock && textblockAt(before, \"end\")) {\n    let at = before, wrap = []\n    for (;;) {\n      wrap.push(at)\n      if (at.isTextblock) break\n      at = at.lastChild\n    }\n    if (at.canReplace(at.childCount, at.childCount, after.content)) {\n      if (dispatch) {\n        let end = Fragment.empty\n        for (let i = wrap.length - 1; i >= 0; i--) end = Fragment.from(wrap[i].copy(end))\n        let tr = state.tr.step(new ReplaceAroundStep($cut.pos - wrap.length, $cut.pos + after.nodeSize,\n                                                     $cut.pos + 1, $cut.pos + after.nodeSize - 1,\n                                                     new Slice(end, wrap.length, 0), 0, true))\n        dispatch(tr.scrollIntoView())\n      }\n      return true\n    }\n  }\n\n  return false\n}\n\n// Parameterized commands\n\n// :: (NodeType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Wrap the selection in a node of the given type with the given\n// attributes.\nexport function wrapIn(nodeType, attrs) {\n  return function(state, dispatch) {\n    let {$from, $to} = state.selection\n    let range = $from.blockRange($to), wrapping = range && findWrapping(range, nodeType, attrs)\n    if (!wrapping) return false\n    if (dispatch) dispatch(state.tr.wrap(range, wrapping).scrollIntoView())\n    return true\n  }\n}\n\n// :: (NodeType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Returns a command that tries to set the selected textblocks to the\n// given node type with the given attributes.\nexport function setBlockType(nodeType, attrs) {\n  return function(state, dispatch) {\n    let {from, to} = state.selection\n    let applicable = false\n    state.doc.nodesBetween(from, to, (node, pos) => {\n      if (applicable) return false\n      if (!node.isTextblock || node.hasMarkup(nodeType, attrs)) return\n      if (node.type == nodeType) {\n        applicable = true\n      } else {\n        let $pos = state.doc.resolve(pos), index = $pos.index()\n        applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType)\n      }\n    })\n    if (!applicable) return false\n    if (dispatch) dispatch(state.tr.setBlockType(from, to, nodeType, attrs).scrollIntoView())\n    return true\n  }\n}\n\nfunction markApplies(doc, ranges, type) {\n  for (let i = 0; i < ranges.length; i++) {\n    let {$from, $to} = ranges[i]\n    let can = $from.depth == 0 ? doc.type.allowsMarkType(type) : false\n    doc.nodesBetween($from.pos, $to.pos, node => {\n      if (can) return false\n      can = node.inlineContent && node.type.allowsMarkType(type)\n    })\n    if (can) return true\n  }\n  return false\n}\n\n// :: (MarkType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Create a command function that toggles the given mark with the\n// given attributes. Will return `false` when the current selection\n// doesn't support that mark. This will remove the mark if any marks\n// of that type exist in the selection, or add it otherwise. If the\n// selection is empty, this applies to the [stored\n// marks](#state.EditorState.storedMarks) instead of a range of the\n// document.\nexport function toggleMark(markType, attrs) {\n  return function(state, dispatch) {\n    let {empty, $cursor, ranges} = state.selection\n    if ((empty && !$cursor) || !markApplies(state.doc, ranges, markType)) return false\n    if (dispatch) {\n      if ($cursor) {\n        if (markType.isInSet(state.storedMarks || $cursor.marks()))\n          dispatch(state.tr.removeStoredMark(markType))\n        else\n          dispatch(state.tr.addStoredMark(markType.create(attrs)))\n      } else {\n        let has = false, tr = state.tr\n        for (let i = 0; !has && i < ranges.length; i++) {\n          let {$from, $to} = ranges[i]\n          has = state.doc.rangeHasMark($from.pos, $to.pos, markType)\n        }\n        for (let i = 0; i < ranges.length; i++) {\n          let {$from, $to} = ranges[i]\n          if (has) {\n            tr.removeMark($from.pos, $to.pos, markType)\n          } else {\n            let from = $from.pos, to = $to.pos, start = $from.nodeAfter, end = $to.nodeBefore\n            let spaceStart = start && start.isText ? /^\\s*/.exec(start.text)[0].length : 0\n            let spaceEnd = end && end.isText ? /\\s*$/.exec(end.text)[0].length : 0\n            if (from + spaceStart < to) { from += spaceStart; to -= spaceEnd }\n            tr.addMark(from, to, markType.create(attrs))\n          }\n        }\n        dispatch(tr.scrollIntoView())\n      }\n    }\n    return true\n  }\n}\n\nfunction wrapDispatchForJoin(dispatch, isJoinable) {\n  return tr => {\n    if (!tr.isGeneric) return dispatch(tr)\n\n    let ranges = []\n    for (let i = 0; i < tr.mapping.maps.length; i++) {\n      let map = tr.mapping.maps[i]\n      for (let j = 0; j < ranges.length; j++)\n        ranges[j] = map.map(ranges[j])\n      map.forEach((_s, _e, from, to) => ranges.push(from, to))\n    }\n\n    // Figure out which joinable points exist inside those ranges,\n    // by checking all node boundaries in their parent nodes.\n    let joinable = []\n    for (let i = 0; i < ranges.length; i += 2) {\n      let from = ranges[i], to = ranges[i + 1]\n      let $from = tr.doc.resolve(from), depth = $from.sharedDepth(to), parent = $from.node(depth)\n      for (let index = $from.indexAfter(depth), pos = $from.after(depth + 1); pos <= to; ++index) {\n        let after = parent.maybeChild(index)\n        if (!after) break\n        if (index && joinable.indexOf(pos) == -1) {\n          let before = parent.child(index - 1)\n          if (before.type == after.type && isJoinable(before, after))\n            joinable.push(pos)\n        }\n        pos += after.nodeSize\n      }\n    }\n    // Join the joinable points\n    joinable.sort((a, b) => a - b)\n    for (let i = joinable.length - 1; i >= 0; i--) {\n      if (canJoin(tr.doc, joinable[i])) tr.join(joinable[i])\n    }\n    dispatch(tr)\n  }\n}\n\n// :: ((state: EditorState, ?(tr: Transaction)) → bool, union<(before: Node, after: Node) → bool, [string]>) → (state: EditorState, ?(tr: Transaction)) → bool\n// Wrap a command so that, when it produces a transform that causes\n// two joinable nodes to end up next to each other, those are joined.\n// Nodes are considered joinable when they are of the same type and\n// when the `isJoinable` predicate returns true for them or, if an\n// array of strings was passed, if their node type name is in that\n// array.\nexport function autoJoin(command, isJoinable) {\n  if (Array.isArray(isJoinable)) {\n    let types = isJoinable\n    isJoinable = node => types.indexOf(node.type.name) > -1\n  }\n  return (state, dispatch) => command(state, dispatch && wrapDispatchForJoin(dispatch, isJoinable))\n}\n\n// :: (...[(EditorState, ?(tr: Transaction), ?EditorView) → bool]) → (EditorState, ?(tr: Transaction), ?EditorView) → bool\n// Combine a number of command functions into a single function (which\n// calls them one by one until one returns true).\nexport function chainCommands(...commands) {\n  return function(state, dispatch, view) {\n    for (let i = 0; i < commands.length; i++)\n      if (commands[i](state, dispatch, view)) return true\n    return false\n  }\n}\n\nlet backspace = chainCommands(deleteSelection, joinBackward, selectNodeBackward)\nlet del = chainCommands(deleteSelection, joinForward, selectNodeForward)\n\n// :: Object\n// A basic keymap containing bindings not specific to any schema.\n// Binds the following keys (when multiple commands are listed, they\n// are chained with [`chainCommands`](#commands.chainCommands)):\n//\n// * **Enter** to `newlineInCode`, `createParagraphNear`, `liftEmptyBlock`, `splitBlock`\n// * **Mod-Enter** to `exitCode`\n// * **Backspace** and **Mod-Backspace** to `deleteSelection`, `joinBackward`, `selectNodeBackward`\n// * **Delete** and **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\n// * **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\n// * **Mod-a** to `selectAll`\nexport let pcBaseKeymap = {\n  \"Enter\": chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock),\n  \"Mod-Enter\": exitCode,\n  \"Backspace\": backspace,\n  \"Mod-Backspace\": backspace,\n  \"Delete\": del,\n  \"Mod-Delete\": del,\n  \"Mod-a\": selectAll\n}\n\n// :: Object\n// A copy of `pcBaseKeymap` that also binds **Ctrl-h** like Backspace,\n// **Ctrl-d** like Delete, **Alt-Backspace** like Ctrl-Backspace, and\n// **Ctrl-Alt-Backspace**, **Alt-Delete**, and **Alt-d** like\n// Ctrl-Delete.\nexport let macBaseKeymap = {\n  \"Ctrl-h\": pcBaseKeymap[\"Backspace\"],\n  \"Alt-Backspace\": pcBaseKeymap[\"Mod-Backspace\"],\n  \"Ctrl-d\": pcBaseKeymap[\"Delete\"],\n  \"Ctrl-Alt-Backspace\": pcBaseKeymap[\"Mod-Delete\"],\n  \"Alt-Delete\": pcBaseKeymap[\"Mod-Delete\"],\n  \"Alt-d\": pcBaseKeymap[\"Mod-Delete\"]\n}\nfor (let key in pcBaseKeymap) macBaseKeymap[key] = pcBaseKeymap[key]\n\n// declare global: os, navigator\nconst mac = typeof navigator != \"undefined\" ? /Mac/.test(navigator.platform)\n          : typeof os != \"undefined\" ? os.platform() == \"darwin\" : false\n\n// :: Object\n// Depending on the detected platform, this will hold\n// [`pcBasekeymap`](#commands.pcBaseKeymap) or\n// [`macBaseKeymap`](#commands.macBaseKeymap).\nexport let baseKeymap = mac ? macBaseKeymap : pcBaseKeymap\n","import { Command, Node, mergeAttributes } from '@tiptap/core'\nimport { exitCode } from 'prosemirror-commands'\n\nexport interface HardBreakOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    hardBreak: {\n      /**\n       * Add a hard break\n       */\n      setHardBreak: () => Command,\n    }\n  }\n}\n\nexport const HardBreak = Node.create<HardBreakOptions>({\n  name: 'hardBreak',\n\n  defaultOptions: {\n    HTMLAttributes: {},\n  },\n\n  inline: true,\n\n  group: 'inline',\n\n  selectable: false,\n\n  parseHTML() {\n    return [\n      { tag: 'br' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['br', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)]\n  },\n\n  addCommands() {\n    return {\n      setHardBreak: () => ({ commands, state, dispatch }) => {\n        return commands.first([\n          () => exitCode(state, dispatch),\n          () => {\n            if (dispatch) {\n              state.tr.replaceSelectionWith(this.type.create()).scrollIntoView()\n            }\n\n            return true\n          },\n        ])\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Enter': () => this.editor.commands.setHardBreak(),\n      'Shift-Enter': () => this.editor.commands.setHardBreak(),\n    }\n  },\n})\n"],"names":["findDiffStart","a","b","pos","let","i","childCount","childA","child","childB","sameMarkup","isText","text","j","content","size","inner","nodeSize","findDiffEnd","posA","posB","iA","iB","same","minSize","Math","min","length","Fragment","this","nodesBetween","from","to","f","nodeStart","parent","end","start","max","descendants","textBetween","blockSeparator","leafText","separated","node","slice","isLeaf","isBlock","append","other","last","lastChild","first","firstChild","withText","push","cut","result","cutByIndex","empty","replaceChild","index","current","copy","addToStart","concat","addToEnd","eq","found","RangeError","maybeChild","forEach","p","otherPos","findIndex","round","retIndex","curPos","toString","toStringInner","join","toJSON","map","n","fromJSON","schema","value","Array","isArray","nodeFromJSON","fromArray","array","joined","nodes","attrs","const","offset","compareDeep","Mark","type","ReplaceError","message","err","Error","call","__proto__","prototype","addToSet","set","placed","excludes","rank","removeFromSet","isInSet","obj","name","_","json","marks","create","sameSet","setFrom","none","sort","Object","constructor","Slice","openStart","openEnd","removeRange","offsetTo","indexTo","insertInto","dist","insert","canReplace","replace","$from","$to","depth","replaceOuter","$along","extra","resolveNoCache","prepareSliceForReplace","close","replaceThreeWay","parentOffset","replaceTwoWay","checkJoin","main","sub","compatibleContent","joinable","$before","$after","addNode","target","addRange","$start","$end","startIndex","endIndex","textOffset","nodeAfter","nodeBefore","validContent","insertAt","fragment","removeBetween","maxOpen","openIsolating","spec","isolating","ResolvedPos","path","resolveDepth","val","doc","indexAfter","before","after","dOff","posAtIndex","tmp","inclusive","marksAcross","isInline","next","sharedDepth","blockRange","pred","d","inlineContent","NodeRange","sameParent","str","resolve","rem","resolveCached","resolveCache","cached","resolveCachePos","resolveCacheSize","emptyAttrs","Node","startPos","textContent","hasMarkup","defaultAttrs","mark","includeParents","nodeAt","childAfter","childBefore","rangeHasMark","isTextblock","isAtom","toDebugString","wrapMarks","contentMatchAt","match","contentMatch","matchFragment","replacement","one","two","validEnd","allowsMarks","canReplaceWith","matchType","canAppend","check","m","markFromJSON","nodeType","ContentMatch","wrapCache","parse","string","nodeTypes","stream","TokenStream","expr","parseExpr","nfa","labeled","explore","nullFrom","states","out","term","known","indexOf","state","cmp","dfa","connect","compile","edge","edges","exprs","reduce","loop","cur","work","dead","hasRequiredAttrs","checkForDeadEnds","frag","prototypeAccessors","defaultType","compatible","fillBefore","toEnd","seen","search","types","finished","tp","createAndFill","findWrapping","computed","computeWrapping","active","via","shift","reverse","edgeCount","scan","inline","tokens","split","pop","parseExprSeq","eat","parseExprSubscript","test","typeName","groups","resolveName","parseExprAtom","parseExprRange","parseNum","Number","defaults","attrName","attr","hasDefault","default","computeAttrs","built","given","undefined","initAttrs","Attribute","tok","SyntaxError","NodeType","group","markSet","atom","isRequired","createChecked","allowsMarkType","markType","allowedMarks","topType","topNode","options","hasOwnProperty","prototypeAccessors$1","MarkType","excluded","instance","DOMParser","rules","tags","styles","rule","tag","style","normalizeLists","some","r","dom","context","ParseContext","addAll","finish","parseSlice","matchTag","matches","namespace","namespaceURI","matchesContext","getAttrs","matchStyle","prop","charCodeAt","schemaRules","priority","splice","parseDOM","fromSchema","domParser","blockTags","address","article","aside","blockquote","canvas","dd","div","dl","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","hr","li","noscript","ol","output","pre","section","table","tfoot","ul","ignoreTags","head","object","script","title","listTags","wsOptionsFor","preserveWhitespace","NodeContext","pendingMarks","solid","activeMarks","stashMarks","fill","wrap","exec","popFromStashMark","applyPending","nextType","pending","markMayApply","parser","open","isOpen","topContext","topOptions","topMatch","topNodeType","find","findPositions","needsBlock","selector","msMatchesSelector","webkitMatchesSelector","mozMatchesSelector","top","addDOM","addTextNode","getAttribute","readStyles","re","trim","parseStyles","addPendingMark","addElement","removePendingMark","nodeValue","domNodeBefore","previousSibling","nodeName","insertNode","findInText","findInside","matchAfter","ruleID","toLowerCase","prevItem","nextSibling","appendChild","normalizeList","ruleFromNode","ignore","ignoreFallback","skip","closeParent","sync","oldNeedsBlock","leafFallback","addElementByRule","consuming","ownerDocument","createTextNode","findPlace","continueAfter","enter","startIn","getContent","contentDOM","contentElement","querySelector","findAround","childNodes","findAtPoint","route","cx","enterInner","block","textblockFromContext","closeExtra","preserveWS","ok","topOpen","currentPos","contains","compareDocumentPosition","textNode","parts","option","useRoot","minDepth","part","$context","deflt","findSameMarkInSet","upto","level","lastIndexOf","stashMark","DOMSerializer","gatherToDOM","toDOM","document","window","serializeFragment","createDocumentFragment","keep","rendered","spanning","add","markDOM","serializeMark","serializeNode","renderSpec","onContent","serializeNodeAndMarks","structure","xmlNS","tagName","space","createElementNS","createElement","setAttributeNS","setAttribute","innerContent","domSerializer","nodesFromSchema","marksFromSchema","factor16","pow","recoverIndex","MapResult","deleted","recover","StepMap","ranges","inverted","diff","recoverOffset","mapResult","assoc","_map","simple","oldIndex","newIndex","oldSize","newSize","touches","oldStart","newStart","invert","JSON","stringify","Mapping","maps","mirror","TransformError","appendMap","mirrors","setMirror","appendMapping","mapping","startSize","mirr","getMirror","appendMappingInverted","totalSize","inverse","corr","Transform","steps","docs","mustOverride","step","maybeStep","failed","apply","addStep","docChanged","getMap","stepsByID","Step","_doc","_mapping","merge","_other","stepType","jsonID","id","stepClass","StepResult","fail","fromReplace","e","ReplaceStep","super","contentBetween","ReplaceAroundStep","gapFrom","gapTo","gap","inserted","canCut","liftTarget","range","canSplit","typesAfter","$pos","base","innerType","rest","baseType","canJoin","mapFragment","mapped","lift","gapStart","gapEnd","splitting","wrappers","setBlockType","mapFrom","canChangeType","clearIncompatible","startM","endM","setNodeMarkup","newNode","replaceWith","typeAfter","AddMarkStep","oldSlice","RemoveMarkStep","fitsTrivially","addMark","removed","added","removing","adding","newSet","s","removeMark","matched","toRemove","parentType","delSteps","allowed","Fitter","fit","replaceStep","delete","unplaced","frontier","dropFromFragment","count","addToFragment","contentAt","closeNodeStart","contentAfterFits","invalidMarks","closeFragment","oldOpen","newOpen","coveredDepths","findFittable","placeNodes","openMore","dropNode","moveInline","mustMoveInline","placedSize","pass","sliceDepth","frontierDepth","inject","openAtEnd","closeFrontierNode","openFrontierNode","taken","openEndCount","findCloseLevel","dropInner","move","replaceRange","deleteRange","targetDepths","preferredTarget","unshift","defining","preferredTargetIndex","leftNodes","preferredDepth","openDepth","targetDepth","expand","startSteps","replaceRangeWith","point","insertPoint","covered","classesById","Selection","$anchor","$head","SelectionRange","anchor","tr","lastNode","lastParent","selectionToInsertionEnd","findFrom","dir","textOnly","TextSelection","findSelectionIn","near","bias","AllSelection","atStart","atEnd","cls","selectionClass","getBookmark","between","visible","$cursor","ensureMarks","TextBookmark","dPos","NodeSelection","NodeBookmark","isSelectable","selectable","sel","selection","setSelection","AllBookmark","startLen","_from","_to","_newFrom","newTo","Transaction","time","Date","now","curSelection","curSelectionFor","storedMarks","updated","meta","selectionSet","setStoredMarks","addStoredMark","removeStoredMark","storedMarksSet","setTime","replaceSelection","replaceSelectionWith","inheritMarks","deleteSelection","insertText","setMeta","key","getMeta","isGeneric","scrollIntoView","scrolledIntoView","bind","self","FieldDesc","desc","init","baseFields","config","_marks","_old","prev","Configuration","plugins","fields","pluginsByKey","plugin","EditorState","applyTransaction","filterTransaction","rootTr","transactions","trs","newState","applyInner","haveNew","appendTransaction","oldState","newInstance","field","applyListeners","$config","reconfigure","pluginFields","addApplyListener","removeApplyListener","dispatch","textblockAt","side","findCutBefore","findCutAfter","defaultBlockAt","exitCode","code","above","deleteBarrier","$cut","conn","joinMaybeClear","canDelAfter","joinAt","selAfter","at","chainCommands","view","commands","endOfTextblock","can","navigator","platform","os","HardBreak","defaultOptions","HTMLAttributes","parseHTML","[object Object]","mergeAttributes","setHardBreak","Mod-Enter","editor","Shift-Enter"],"mappings":"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"}