{"version":3,"file":"tiptap-extension-italic.bundle.umd.min.js","sources":["../src/italic.ts"],"sourcesContent":["import {\n  Command,\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface ItalicOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    italic: {\n      /**\n       * Set an italic mark\n       */\n      setItalic: () => Command,\n      /**\n       * Toggle an italic mark\n       */\n      toggleItalic: () => Command,\n      /**\n       * Unset an italic mark\n       */\n      unsetItalic: () => Command,\n    }\n  }\n}\n\nexport const starInputRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))$/gm\nexport const starPasteRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))/gm\nexport const underscoreInputRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))$/gm\nexport const underscorePasteRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))/gm\n\nexport const Italic = Mark.create<ItalicOptions>({\n  name: 'italic',\n\n  defaultOptions: {\n    HTMLAttributes: {},\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'em',\n      },\n      {\n        tag: 'i',\n        getAttrs: node => (node as HTMLElement).style.fontStyle !== 'normal' && null,\n      },\n      {\n        style: 'font-style=italic',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setItalic: () => ({ commands }) => {\n        return commands.setMark('italic')\n      },\n      toggleItalic: () => ({ commands }) => {\n        return commands.toggleMark('italic')\n      },\n      unsetItalic: () => ({ commands }) => {\n        return commands.unsetMark('italic')\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-i': () => this.editor.commands.toggleItalic(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule(starInputRegex, this.type),\n      markInputRule(underscoreInputRegex, this.type),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule(starPasteRegex, this.type),\n      markPasteRule(underscorePasteRegex, this.type),\n    ]\n  },\n})\n"],"names":["starInputRegex","starPasteRegex","underscoreInputRegex","underscorePasteRegex","Italic","Mark","create","name","defaultOptions","HTMLAttributes","parseHTML","tag","getAttrs","node","style","fontStyle","[object Object]","mergeAttributes","this","options","addCommands","setItalic","commands","setMark","toggleItalic","toggleMark","unsetItalic","unsetMark","Mod-i","editor","markInputRule","type","markPasteRule"],"mappings":"oUA+BaA,EAAiB,uCACjBC,EAAiB,sCACjBC,EAAuB,qCACvBC,EAAuB,oCAEvBC,EAASC,OAAKC,OAAsB,CAC/CC,KAAM,SAENC,eAAgB,CACdC,eAAgB,IAGlBC,UAAS,IACA,CACL,CACEC,IAAK,MAEP,CACEA,IAAK,IACLC,SAAUC,GAAkD,WAAzCA,EAAqBC,MAAMC,WAA0B,MAE1E,CACED,MAAO,sBAKbE,YAAWP,eAAEA,IACX,MAAO,CAAC,KAAMQ,kBAAgBC,KAAKC,QAAQV,eAAgBA,GAAiB,IAG9EW,YAAW,KACF,CACLC,UAAW,IAAM,EAAGC,SAAAA,KACXA,EAASC,QAAQ,UAE1BC,aAAc,IAAM,EAAGF,SAAAA,KACdA,EAASG,WAAW,UAE7BC,YAAa,IAAM,EAAGJ,SAAAA,KACbA,EAASK,UAAU,YAKhCX,uBACE,MAAO,CACLY,QAAS,IAAMV,KAAKW,OAAOP,SAASE,iBAIxCR,gBACE,MAAO,CACLc,gBAAc9B,EAAgBkB,KAAKa,MACnCD,gBAAc5B,EAAsBgB,KAAKa,QAI7Cf,gBACE,MAAO,CACLgB,gBAAc/B,EAAgBiB,KAAKa,MACnCC,gBAAc7B,EAAsBe,KAAKa"}