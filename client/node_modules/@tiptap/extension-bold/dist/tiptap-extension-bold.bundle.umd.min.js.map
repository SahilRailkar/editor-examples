{"version":3,"file":"tiptap-extension-bold.bundle.umd.min.js","sources":["../src/bold.ts"],"sourcesContent":["import {\n  Command,\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface BoldOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    bold: {\n      /**\n       * Set a bold mark\n       */\n      setBold: () => Command,\n      /**\n       * Toggle a bold mark\n       */\n      toggleBold: () => Command,\n      /**\n       * Unset a bold mark\n       */\n      unsetBold: () => Command,\n    }\n  }\n}\n\nexport const starInputRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))$/gm\nexport const starPasteRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))/gm\nexport const underscoreInputRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))$/gm\nexport const underscorePasteRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))/gm\n\nexport const Bold = Mark.create<BoldOptions>({\n  name: 'bold',\n\n  defaultOptions: {\n    HTMLAttributes: {},\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'strong',\n      },\n      {\n        tag: 'b',\n        getAttrs: node => (node as HTMLElement).style.fontWeight !== 'normal' && null,\n      },\n      {\n        style: 'font-weight',\n        getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value as string) && null,\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['strong', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setBold: () => ({ commands }) => {\n        return commands.setMark('bold')\n      },\n      toggleBold: () => ({ commands }) => {\n        return commands.toggleMark('bold')\n      },\n      unsetBold: () => ({ commands }) => {\n        return commands.unsetMark('bold')\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-b': () => this.editor.commands.toggleBold(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule(starInputRegex, this.type),\n      markInputRule(underscoreInputRegex, this.type),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule(starPasteRegex, this.type),\n      markPasteRule(underscorePasteRegex, this.type),\n    ]\n  },\n})\n"],"names":["starInputRegex","starPasteRegex","underscoreInputRegex","underscorePasteRegex","Bold","Mark","create","name","defaultOptions","HTMLAttributes","parseHTML","tag","getAttrs","node","style","fontWeight","value","test","[object Object]","mergeAttributes","this","options","addCommands","setBold","commands","setMark","toggleBold","toggleMark","unsetBold","unsetMark","Mod-b","editor","markInputRule","type","markPasteRule"],"mappings":"kUA+BaA,EAAiB,2CACjBC,EAAiB,0CACjBC,EAAuB,wCACvBC,EAAuB,uCAEvBC,EAAOC,OAAKC,OAAoB,CAC3CC,KAAM,OAENC,eAAgB,CACdC,eAAgB,IAGlBC,UAAS,IACA,CACL,CACEC,IAAK,UAEP,CACEA,IAAK,IACLC,SAAUC,GAAmD,WAA1CA,EAAqBC,MAAMC,YAA2B,MAE3E,CACED,MAAO,cACPF,SAAUI,GAAS,4BAA4BC,KAAKD,IAAoB,OAK9EE,YAAWT,eAAEA,IACX,MAAO,CAAC,SAAUU,kBAAgBC,KAAKC,QAAQZ,eAAgBA,GAAiB,IAGlFa,YAAW,KACF,CACLC,QAAS,IAAM,EAAGC,SAAAA,KACTA,EAASC,QAAQ,QAE1BC,WAAY,IAAM,EAAGF,SAAAA,KACZA,EAASG,WAAW,QAE7BC,UAAW,IAAM,EAAGJ,SAAAA,KACXA,EAASK,UAAU,UAKhCX,uBACE,MAAO,CACLY,QAAS,IAAMV,KAAKW,OAAOP,SAASE,eAIxCR,gBACE,MAAO,CACLc,gBAAchC,EAAgBoB,KAAKa,MACnCD,gBAAc9B,EAAsBkB,KAAKa,QAI7Cf,gBACE,MAAO,CACLgB,gBAAcjC,EAAgBmB,KAAKa,MACnCC,gBAAc/B,EAAsBiB,KAAKa"}